/*! For license information please see lib.js.LICENSE.txt */
(()=>{var e={470:e=>{"use strict";var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,i=Object.getOwnPropertyDescriptor,o=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===n.call(e)},s=function(e){if(!e||"[object Object]"!==n.call(e))return!1;var r,i=t.call(e,"constructor"),o=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!i&&!o)return!1;for(r in e);return void 0===r||t.call(e,r)},a=function(e,t){r&&"__proto__"===t.name?r(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},u=function(e,n){if("__proto__"===n){if(!t.call(e,n))return;if(i)return i(e,n).value}return e[n]};e.exports=function e(){var t,n,r,i,c,l,p=arguments[0],h=1,f=arguments.length,d=!1;for("boolean"==typeof p&&(d=p,p=arguments[1]||{},h=2),(null==p||"object"!=typeof p&&"function"!=typeof p)&&(p={});h<f;++h)if(null!=(t=arguments[h]))for(n in t)r=u(p,n),p!==(i=u(t,n))&&(d&&i&&(s(i)||(c=o(i)))?(c?(c=!1,l=r&&o(r)?r:[]):l=r&&s(r)?r:{},a(p,{name:n,newValue:e(d,l,i)})):void 0!==i&&a(p,{name:n,newValue:i}));return p}},291:e=>{!function(){var t;function n(e){for(var t,n,r,i,o=1,s=[].slice.call(arguments),a=0,u=e.length,c="",l=!1,p=!1,h=function(){return s[o++]},f=function(){for(var n="";/\d/.test(e[a]);)n+=e[a++],t=e[a];return n.length>0?parseInt(n):null};a<u;++a)if(t=e[a],l)switch(l=!1,"."==t?(p=!1,t=e[++a]):"0"==t&&"."==e[a+1]?(p=!0,t=e[a+=2]):p=!0,i=f(),t){case"b":c+=parseInt(h(),10).toString(2);break;case"c":c+="string"==typeof(n=h())||n instanceof String?n:String.fromCharCode(parseInt(n,10));break;case"d":c+=parseInt(h(),10);break;case"f":r=String(parseFloat(h()).toFixed(i||6)),c+=p?r:r.replace(/^0/,"");break;case"j":c+=JSON.stringify(h());break;case"o":c+="0"+parseInt(h(),10).toString(8);break;case"s":c+=h();break;case"x":c+="0x"+parseInt(h(),10).toString(16);break;case"X":c+="0x"+parseInt(h(),10).toString(16).toUpperCase();break;default:c+=t}else"%"===t?l=!0:c+=t;return c}(t=e.exports=n).format=n,t.vsprintf=function(e,t){return n.apply(null,[e].concat(t))},"undefined"!=typeof console&&"function"==typeof console.log&&(t.printf=function(){console.log(n.apply(null,arguments))})}()},671:(e,t,n)=>{const r=n(701);e.exports=o;const i=Object.hasOwnProperty;function o(){if(!(this instanceof o))return new o;this.reset()}function s(e,t){return"string"!=typeof e?"":(t||(e=e.toLowerCase()),e.replace(r,"").replace(/ /g,"-"))}o.prototype.slug=function(e,t){const n=this;let r=s(e,!0===t);const o=r;for(;i.call(n.occurrences,r);)n.occurrences[o]++,r=o+"-"+n.occurrences[o];return n.occurrences[r]=0,r},o.prototype.reset=function(){this.occurrences=Object.create(null)},o.slug=s},701:e=>{e.exports=/[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31BB-\u31EF\u3200-\u33FF\u4DB6-\u4DFF\u9FF0-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7C7-\uA7F6\uA828-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB68-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD47-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD-\uDDCF\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC60-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD00-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D-\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE4-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g},139:e=>{var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,i=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,o=/^:\s*/,s=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,a=/^[;\s]*/,u=/^\s+|\s+$/g,c="";function l(e){return e?e.replace(u,c):c}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var p=1,h=1;function f(e){var t=e.match(n);t&&(p+=t.length);var r=e.lastIndexOf("\n");h=~r?e.length-r:h+e.length}function d(){var e={line:p,column:h};return function(t){return t.position=new m(e),A(),t}}function m(e){this.start=e,this.end={line:p,column:h},this.source=u.source}m.prototype.content=e;var E=[];function g(t){var n=new Error(u.source+":"+p+":"+h+": "+t);if(n.reason=t,n.filename=u.source,n.line=p,n.column=h,n.source=e,!u.silent)throw n;E.push(n)}function T(t){var n=t.exec(e);if(n){var r=n[0];return f(r),e=e.slice(r.length),n}}function A(){T(r)}function C(e){var t;for(e=e||[];t=_();)!1!==t&&e.push(t);return e}function _(){var t=d();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;c!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,c===e.charAt(n-1))return g("End of comment missing");var r=e.slice(2,n-2);return h+=2,f(r),e=e.slice(n),h+=2,t({type:"comment",comment:r})}}function D(){var e=d(),n=T(i);if(n){if(_(),!T(o))return g("property missing ':'");var r=T(s),u=e({type:"declaration",property:l(n[0].replace(t,c)),value:r?l(r[0].replace(t,c)):c});return T(a),u}}return A(),function(){var e,t=[];for(C(t);e=D();)!1!==e&&(t.push(e),C(t));return t}()}},738:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},729:e=>{"use strict";var t={};function n(e,r,i){var o,s,a,u,c,l="";for("string"!=typeof r&&(i=r,r=n.defaultChars),void 0===i&&(i=!0),c=function(e){var n,r,i=t[e];if(i)return i;for(i=t[e]=[],n=0;n<128;n++)r=String.fromCharCode(n),/^[0-9a-z]$/i.test(r)?i.push(r):i.push("%"+("0"+n.toString(16).toUpperCase()).slice(-2));for(n=0;n<e.length;n++)i[e.charCodeAt(n)]=e[n];return i}(r),o=0,s=e.length;o<s;o++)if(a=e.charCodeAt(o),i&&37===a&&o+2<s&&/^[0-9a-f]{2}$/i.test(e.slice(o+1,o+3)))l+=e.slice(o,o+3),o+=2;else if(a<128)l+=c[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&o+1<s&&(u=e.charCodeAt(o+1))>=56320&&u<=57343){l+=encodeURIComponent(e[o]+e[o+1]),o++;continue}l+="%EF%BF%BD"}else l+=encodeURIComponent(e[o]);return l}n.defaultChars=";/?:@&=+$,-_.!~*'()#",n.componentChars="-_.!~*'()",e.exports=n},515:(e,t,n)=>{"use strict";const{DOCUMENT_MODE:r}=n(152),i="html",o=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],s=o.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]),a=["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"],u=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],c=u.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]);function l(e){const t=-1!==e.indexOf('"')?"'":'"';return t+e+t}function p(e,t){for(let n=0;n<t.length;n++)if(0===e.indexOf(t[n]))return!0;return!1}t.isConforming=function(e){return e.name===i&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)},t.getDocumentMode=function(e){if(e.name!==i)return r.QUIRKS;const t=e.systemId;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return r.QUIRKS;let n=e.publicId;if(null!==n){if(n=n.toLowerCase(),a.indexOf(n)>-1)return r.QUIRKS;let e=null===t?s:o;if(p(n,e))return r.QUIRKS;if(e=null===t?u:c,p(n,e))return r.LIMITED_QUIRKS}return r.NO_QUIRKS},t.serializeContent=function(e,t,n){let r="!DOCTYPE ";return e&&(r+=e),t?r+=" PUBLIC "+l(t):n&&(r+=" SYSTEM"),null!==n&&(r+=" "+l(n)),r}},734:e=>{"use strict";e.exports={controlCharacterInInputStream:"control-character-in-input-stream",noncharacterInInputStream:"noncharacter-in-input-stream",surrogateInInputStream:"surrogate-in-input-stream",nonVoidHtmlElementStartTagWithTrailingSolidus:"non-void-html-element-start-tag-with-trailing-solidus",endTagWithAttributes:"end-tag-with-attributes",endTagWithTrailingSolidus:"end-tag-with-trailing-solidus",unexpectedSolidusInTag:"unexpected-solidus-in-tag",unexpectedNullCharacter:"unexpected-null-character",unexpectedQuestionMarkInsteadOfTagName:"unexpected-question-mark-instead-of-tag-name",invalidFirstCharacterOfTagName:"invalid-first-character-of-tag-name",unexpectedEqualsSignBeforeAttributeName:"unexpected-equals-sign-before-attribute-name",missingEndTagName:"missing-end-tag-name",unexpectedCharacterInAttributeName:"unexpected-character-in-attribute-name",unknownNamedCharacterReference:"unknown-named-character-reference",missingSemicolonAfterCharacterReference:"missing-semicolon-after-character-reference",unexpectedCharacterAfterDoctypeSystemIdentifier:"unexpected-character-after-doctype-system-identifier",unexpectedCharacterInUnquotedAttributeValue:"unexpected-character-in-unquoted-attribute-value",eofBeforeTagName:"eof-before-tag-name",eofInTag:"eof-in-tag",missingAttributeValue:"missing-attribute-value",missingWhitespaceBetweenAttributes:"missing-whitespace-between-attributes",missingWhitespaceAfterDoctypePublicKeyword:"missing-whitespace-after-doctype-public-keyword",missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:"missing-whitespace-between-doctype-public-and-system-identifiers",missingWhitespaceAfterDoctypeSystemKeyword:"missing-whitespace-after-doctype-system-keyword",missingQuoteBeforeDoctypePublicIdentifier:"missing-quote-before-doctype-public-identifier",missingQuoteBeforeDoctypeSystemIdentifier:"missing-quote-before-doctype-system-identifier",missingDoctypePublicIdentifier:"missing-doctype-public-identifier",missingDoctypeSystemIdentifier:"missing-doctype-system-identifier",abruptDoctypePublicIdentifier:"abrupt-doctype-public-identifier",abruptDoctypeSystemIdentifier:"abrupt-doctype-system-identifier",cdataInHtmlContent:"cdata-in-html-content",incorrectlyOpenedComment:"incorrectly-opened-comment",eofInScriptHtmlCommentLikeText:"eof-in-script-html-comment-like-text",eofInDoctype:"eof-in-doctype",nestedComment:"nested-comment",abruptClosingOfEmptyComment:"abrupt-closing-of-empty-comment",eofInComment:"eof-in-comment",incorrectlyClosedComment:"incorrectly-closed-comment",eofInCdata:"eof-in-cdata",absenceOfDigitsInNumericCharacterReference:"absence-of-digits-in-numeric-character-reference",nullCharacterReference:"null-character-reference",surrogateCharacterReference:"surrogate-character-reference",characterReferenceOutsideUnicodeRange:"character-reference-outside-unicode-range",controlCharacterReference:"control-character-reference",noncharacterCharacterReference:"noncharacter-character-reference",missingWhitespaceBeforeDoctypeName:"missing-whitespace-before-doctype-name",missingDoctypeName:"missing-doctype-name",invalidCharacterSequenceAfterDoctypeName:"invalid-character-sequence-after-doctype-name",duplicateAttribute:"duplicate-attribute",nonConformingDoctype:"non-conforming-doctype",missingDoctype:"missing-doctype",misplacedDoctype:"misplaced-doctype",endTagWithoutMatchingOpenElement:"end-tag-without-matching-open-element",closingOfElementWithOpenChildElements:"closing-of-element-with-open-child-elements",disallowedContentInNoscriptInHead:"disallowed-content-in-noscript-in-head",openElementsLeftAfterEof:"open-elements-left-after-eof",abandonedHeadElementChild:"abandoned-head-element-child",misplacedStartTagForHeadElement:"misplaced-start-tag-for-head-element",nestedNoscriptInHead:"nested-noscript-in-head",eofInElementThatCanContainOnlyText:"eof-in-element-that-can-contain-only-text"}},779:(e,t,n)=>{"use strict";const r=n(763),i=n(152),o=i.TAG_NAMES,s=i.NAMESPACES,a=i.ATTRS,u={attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},c={"xlink:actuate":{prefix:"xlink",name:"actuate",namespace:s.XLINK},"xlink:arcrole":{prefix:"xlink",name:"arcrole",namespace:s.XLINK},"xlink:href":{prefix:"xlink",name:"href",namespace:s.XLINK},"xlink:role":{prefix:"xlink",name:"role",namespace:s.XLINK},"xlink:show":{prefix:"xlink",name:"show",namespace:s.XLINK},"xlink:title":{prefix:"xlink",name:"title",namespace:s.XLINK},"xlink:type":{prefix:"xlink",name:"type",namespace:s.XLINK},"xml:base":{prefix:"xml",name:"base",namespace:s.XML},"xml:lang":{prefix:"xml",name:"lang",namespace:s.XML},"xml:space":{prefix:"xml",name:"space",namespace:s.XML},xmlns:{prefix:"",name:"xmlns",namespace:s.XMLNS},"xmlns:xlink":{prefix:"xmlns",name:"xlink",namespace:s.XMLNS}},l=t.SVG_TAG_NAMES_ADJUSTMENT_MAP={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},p={[o.B]:!0,[o.BIG]:!0,[o.BLOCKQUOTE]:!0,[o.BODY]:!0,[o.BR]:!0,[o.CENTER]:!0,[o.CODE]:!0,[o.DD]:!0,[o.DIV]:!0,[o.DL]:!0,[o.DT]:!0,[o.EM]:!0,[o.EMBED]:!0,[o.H1]:!0,[o.H2]:!0,[o.H3]:!0,[o.H4]:!0,[o.H5]:!0,[o.H6]:!0,[o.HEAD]:!0,[o.HR]:!0,[o.I]:!0,[o.IMG]:!0,[o.LI]:!0,[o.LISTING]:!0,[o.MENU]:!0,[o.META]:!0,[o.NOBR]:!0,[o.OL]:!0,[o.P]:!0,[o.PRE]:!0,[o.RUBY]:!0,[o.S]:!0,[o.SMALL]:!0,[o.SPAN]:!0,[o.STRONG]:!0,[o.STRIKE]:!0,[o.SUB]:!0,[o.SUP]:!0,[o.TABLE]:!0,[o.TT]:!0,[o.U]:!0,[o.UL]:!0,[o.VAR]:!0};t.causesExit=function(e){const t=e.tagName;return!(t!==o.FONT||null===r.getTokenAttr(e,a.COLOR)&&null===r.getTokenAttr(e,a.SIZE)&&null===r.getTokenAttr(e,a.FACE))||p[t]},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=u[e.attrs[t].name];n&&(e.attrs[t].name=n)}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=c[e.attrs[t].name];n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace)}},t.adjustTokenSVGTagName=function(e){const t=l[e.tagName];t&&(e.tagName=t)},t.isIntegrationPoint=function(e,t,n,r){return!(r&&r!==s.HTML||!function(e,t,n){if(t===s.MATHML&&e===o.ANNOTATION_XML)for(let e=0;e<n.length;e++)if(n[e].name===a.ENCODING){const t=n[e].value.toLowerCase();return"text/html"===t||"application/xhtml+xml"===t}return t===s.SVG&&(e===o.FOREIGN_OBJECT||e===o.DESC||e===o.TITLE)}(e,t,n))||!(r&&r!==s.MATHML||!function(e,t){return t===s.MATHML&&(e===o.MI||e===o.MO||e===o.MN||e===o.MS||e===o.MTEXT)}(e,t))}},152:(e,t)=>{"use strict";const n=t.NAMESPACES={HTML:"http://www.w3.org/1999/xhtml",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"};t.ATTRS={TYPE:"type",ACTION:"action",ENCODING:"encoding",PROMPT:"prompt",NAME:"name",COLOR:"color",FACE:"face",SIZE:"size"},t.DOCUMENT_MODE={NO_QUIRKS:"no-quirks",QUIRKS:"quirks",LIMITED_QUIRKS:"limited-quirks"};const r=t.TAG_NAMES={A:"a",ADDRESS:"address",ANNOTATION_XML:"annotation-xml",APPLET:"applet",AREA:"area",ARTICLE:"article",ASIDE:"aside",B:"b",BASE:"base",BASEFONT:"basefont",BGSOUND:"bgsound",BIG:"big",BLOCKQUOTE:"blockquote",BODY:"body",BR:"br",BUTTON:"button",CAPTION:"caption",CENTER:"center",CODE:"code",COL:"col",COLGROUP:"colgroup",DD:"dd",DESC:"desc",DETAILS:"details",DIALOG:"dialog",DIR:"dir",DIV:"div",DL:"dl",DT:"dt",EM:"em",EMBED:"embed",FIELDSET:"fieldset",FIGCAPTION:"figcaption",FIGURE:"figure",FONT:"font",FOOTER:"footer",FOREIGN_OBJECT:"foreignObject",FORM:"form",FRAME:"frame",FRAMESET:"frameset",H1:"h1",H2:"h2",H3:"h3",H4:"h4",H5:"h5",H6:"h6",HEAD:"head",HEADER:"header",HGROUP:"hgroup",HR:"hr",HTML:"html",I:"i",IMG:"img",IMAGE:"image",INPUT:"input",IFRAME:"iframe",KEYGEN:"keygen",LABEL:"label",LI:"li",LINK:"link",LISTING:"listing",MAIN:"main",MALIGNMARK:"malignmark",MARQUEE:"marquee",MATH:"math",MENU:"menu",META:"meta",MGLYPH:"mglyph",MI:"mi",MO:"mo",MN:"mn",MS:"ms",MTEXT:"mtext",NAV:"nav",NOBR:"nobr",NOFRAMES:"noframes",NOEMBED:"noembed",NOSCRIPT:"noscript",OBJECT:"object",OL:"ol",OPTGROUP:"optgroup",OPTION:"option",P:"p",PARAM:"param",PLAINTEXT:"plaintext",PRE:"pre",RB:"rb",RP:"rp",RT:"rt",RTC:"rtc",RUBY:"ruby",S:"s",SCRIPT:"script",SECTION:"section",SELECT:"select",SOURCE:"source",SMALL:"small",SPAN:"span",STRIKE:"strike",STRONG:"strong",STYLE:"style",SUB:"sub",SUMMARY:"summary",SUP:"sup",TABLE:"table",TBODY:"tbody",TEMPLATE:"template",TEXTAREA:"textarea",TFOOT:"tfoot",TD:"td",TH:"th",THEAD:"thead",TITLE:"title",TR:"tr",TRACK:"track",TT:"tt",U:"u",UL:"ul",SVG:"svg",VAR:"var",WBR:"wbr",XMP:"xmp"};t.SPECIAL_ELEMENTS={[n.HTML]:{[r.ADDRESS]:!0,[r.APPLET]:!0,[r.AREA]:!0,[r.ARTICLE]:!0,[r.ASIDE]:!0,[r.BASE]:!0,[r.BASEFONT]:!0,[r.BGSOUND]:!0,[r.BLOCKQUOTE]:!0,[r.BODY]:!0,[r.BR]:!0,[r.BUTTON]:!0,[r.CAPTION]:!0,[r.CENTER]:!0,[r.COL]:!0,[r.COLGROUP]:!0,[r.DD]:!0,[r.DETAILS]:!0,[r.DIR]:!0,[r.DIV]:!0,[r.DL]:!0,[r.DT]:!0,[r.EMBED]:!0,[r.FIELDSET]:!0,[r.FIGCAPTION]:!0,[r.FIGURE]:!0,[r.FOOTER]:!0,[r.FORM]:!0,[r.FRAME]:!0,[r.FRAMESET]:!0,[r.H1]:!0,[r.H2]:!0,[r.H3]:!0,[r.H4]:!0,[r.H5]:!0,[r.H6]:!0,[r.HEAD]:!0,[r.HEADER]:!0,[r.HGROUP]:!0,[r.HR]:!0,[r.HTML]:!0,[r.IFRAME]:!0,[r.IMG]:!0,[r.INPUT]:!0,[r.LI]:!0,[r.LINK]:!0,[r.LISTING]:!0,[r.MAIN]:!0,[r.MARQUEE]:!0,[r.MENU]:!0,[r.META]:!0,[r.NAV]:!0,[r.NOEMBED]:!0,[r.NOFRAMES]:!0,[r.NOSCRIPT]:!0,[r.OBJECT]:!0,[r.OL]:!0,[r.P]:!0,[r.PARAM]:!0,[r.PLAINTEXT]:!0,[r.PRE]:!0,[r.SCRIPT]:!0,[r.SECTION]:!0,[r.SELECT]:!0,[r.SOURCE]:!0,[r.STYLE]:!0,[r.SUMMARY]:!0,[r.TABLE]:!0,[r.TBODY]:!0,[r.TD]:!0,[r.TEMPLATE]:!0,[r.TEXTAREA]:!0,[r.TFOOT]:!0,[r.TH]:!0,[r.THEAD]:!0,[r.TITLE]:!0,[r.TR]:!0,[r.TRACK]:!0,[r.UL]:!0,[r.WBR]:!0,[r.XMP]:!0},[n.MATHML]:{[r.MI]:!0,[r.MO]:!0,[r.MN]:!0,[r.MS]:!0,[r.MTEXT]:!0,[r.ANNOTATION_XML]:!0},[n.SVG]:{[r.TITLE]:!0,[r.FOREIGN_OBJECT]:!0,[r.DESC]:!0}}},284:(e,t)=>{"use strict";const n=[65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];t.REPLACEMENT_CHARACTER="�",t.CODE_POINTS={EOF:-1,NULL:0,TABULATION:9,CARRIAGE_RETURN:13,LINE_FEED:10,FORM_FEED:12,SPACE:32,EXCLAMATION_MARK:33,QUOTATION_MARK:34,NUMBER_SIGN:35,AMPERSAND:38,APOSTROPHE:39,HYPHEN_MINUS:45,SOLIDUS:47,DIGIT_0:48,DIGIT_9:57,SEMICOLON:59,LESS_THAN_SIGN:60,EQUALS_SIGN:61,GREATER_THAN_SIGN:62,QUESTION_MARK:63,LATIN_CAPITAL_A:65,LATIN_CAPITAL_F:70,LATIN_CAPITAL_X:88,LATIN_CAPITAL_Z:90,RIGHT_SQUARE_BRACKET:93,GRAVE_ACCENT:96,LATIN_SMALL_A:97,LATIN_SMALL_F:102,LATIN_SMALL_X:120,LATIN_SMALL_Z:122,REPLACEMENT_CHARACTER:65533},t.CODE_POINT_SEQUENCES={DASH_DASH_STRING:[45,45],DOCTYPE_STRING:[68,79,67,84,89,80,69],CDATA_START_STRING:[91,67,68,65,84,65,91],SCRIPT_STRING:[115,99,114,105,112,116],PUBLIC_STRING:[80,85,66,76,73,67],SYSTEM_STRING:[83,89,83,84,69,77]},t.isSurrogate=function(e){return e>=55296&&e<=57343},t.isSurrogatePair=function(e){return e>=56320&&e<=57343},t.getSurrogatePairCodePoint=function(e,t){return 1024*(e-55296)+9216+t},t.isControlCodePoint=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},t.isUndefinedCodePoint=function(e){return e>=64976&&e<=65007||n.indexOf(e)>-1}},843:(e,t,n)=>{"use strict";const r=n(704);e.exports=class extends r{constructor(e,t){super(e),this.posTracker=null,this.onParseError=t.onParseError}_setErrorLocation(e){e.startLine=e.endLine=this.posTracker.line,e.startCol=e.endCol=this.posTracker.col,e.startOffset=e.endOffset=this.posTracker.offset}_reportError(e){const t={code:e,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(t),this.onParseError(t)}_getOverriddenMethods(e){return{_err(t){e._reportError(t)}}}}},232:(e,t,n)=>{"use strict";const r=n(843),i=n(50),o=n(110),s=n(704);e.exports=class extends r{constructor(e,t){super(e,t),this.opts=t,this.ctLoc=null,this.locBeforeToken=!1}_setErrorLocation(e){this.ctLoc&&(e.startLine=this.ctLoc.startLine,e.startCol=this.ctLoc.startCol,e.startOffset=this.ctLoc.startOffset,e.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,e.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,e.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset)}_getOverriddenMethods(e,t){return{_bootstrap(n,r){t._bootstrap.call(this,n,r),s.install(this.tokenizer,i,e.opts),s.install(this.tokenizer,o)},_processInputToken(n){e.ctLoc=n.location,t._processInputToken.call(this,n)},_err(t,n){e.locBeforeToken=n&&n.beforeToken,e._reportError(t)}}}}},288:(e,t,n)=>{"use strict";const r=n(843),i=n(930),o=n(704);e.exports=class extends r{constructor(e,t){super(e,t),this.posTracker=o.install(e,i),this.lastErrOffset=-1}_reportError(e){this.lastErrOffset!==this.posTracker.offset&&(this.lastErrOffset=this.posTracker.offset,super._reportError(e))}}},50:(e,t,n)=>{"use strict";const r=n(843),i=n(288),o=n(704);e.exports=class extends r{constructor(e,t){super(e,t);const n=o.install(e.preprocessor,i,t);this.posTracker=n.posTracker}}},77:(e,t,n)=>{"use strict";const r=n(704);e.exports=class extends r{constructor(e,t){super(e),this.onItemPop=t.onItemPop}_getOverriddenMethods(e,t){return{pop(){e.onItemPop(this.current),t.pop.call(this)},popAllUpToHtmlElement(){for(let t=this.stackTop;t>0;t--)e.onItemPop(this.items[t]);t.popAllUpToHtmlElement.call(this)},remove(n){e.onItemPop(this.current),t.remove.call(this,n)}}}}},452:(e,t,n)=>{"use strict";const r=n(704),i=n(763),o=n(110),s=n(77),a=n(152).TAG_NAMES;e.exports=class extends r{constructor(e){super(e),this.parser=e,this.treeAdapter=this.parser.treeAdapter,this.posTracker=null,this.lastStartTagToken=null,this.lastFosterParentingLocation=null,this.currentToken=null}_setStartLocation(e){let t=null;this.lastStartTagToken&&(t=Object.assign({},this.lastStartTagToken.location),t.startTag=this.lastStartTagToken.location),this.treeAdapter.setNodeSourceCodeLocation(e,t)}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,r=this.treeAdapter.getTagName(e),o={};t.type===i.END_TAG_TOKEN&&r===t.tagName?(o.endTag=Object.assign({},n),o.endLine=n.endLine,o.endCol=n.endCol,o.endOffset=n.endOffset):(o.endLine=n.startLine,o.endCol=n.startCol,o.endOffset=n.startOffset),this.treeAdapter.updateNodeSourceCodeLocation(e,o)}}_getOverriddenMethods(e,t){return{_bootstrap(n,i){t._bootstrap.call(this,n,i),e.lastStartTagToken=null,e.lastFosterParentingLocation=null,e.currentToken=null;const a=r.install(this.tokenizer,o);e.posTracker=a.posTracker,r.install(this.openElements,s,{onItemPop:function(t){e._setEndLocation(t,e.currentToken)}})},_runParsingLoop(n){t._runParsingLoop.call(this,n);for(let t=this.openElements.stackTop;t>=0;t--)e._setEndLocation(this.openElements.items[t],e.currentToken)},_processTokenInForeignContent(n){e.currentToken=n,t._processTokenInForeignContent.call(this,n)},_processToken(n){if(e.currentToken=n,t._processToken.call(this,n),n.type===i.END_TAG_TOKEN&&(n.tagName===a.HTML||n.tagName===a.BODY&&this.openElements.hasInScope(a.BODY)))for(let t=this.openElements.stackTop;t>=0;t--){const r=this.openElements.items[t];if(this.treeAdapter.getTagName(r)===n.tagName){e._setEndLocation(r,n);break}}},_setDocumentType(e){t._setDocumentType.call(this,e);const n=this.treeAdapter.getChildNodes(this.document),r=n.length;for(let t=0;t<r;t++){const r=n[t];if(this.treeAdapter.isDocumentTypeNode(r)){this.treeAdapter.setNodeSourceCodeLocation(r,e.location);break}}},_attachElementToTree(n){e._setStartLocation(n),e.lastStartTagToken=null,t._attachElementToTree.call(this,n)},_appendElement(n,r){e.lastStartTagToken=n,t._appendElement.call(this,n,r)},_insertElement(n,r){e.lastStartTagToken=n,t._insertElement.call(this,n,r)},_insertTemplate(n){e.lastStartTagToken=n,t._insertTemplate.call(this,n);const r=this.treeAdapter.getTemplateContent(this.openElements.current);this.treeAdapter.setNodeSourceCodeLocation(r,null)},_insertFakeRootElement(){t._insertFakeRootElement.call(this),this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current,null)},_appendCommentNode(e,n){t._appendCommentNode.call(this,e,n);const r=this.treeAdapter.getChildNodes(n),i=r[r.length-1];this.treeAdapter.setNodeSourceCodeLocation(i,e.location)},_findFosterParentingLocation(){return e.lastFosterParentingLocation=t._findFosterParentingLocation.call(this),e.lastFosterParentingLocation},_insertCharacters(n){t._insertCharacters.call(this,n);const r=this._shouldFosterParentOnInsertion(),i=r&&e.lastFosterParentingLocation.parent||this.openElements.currentTmplContent||this.openElements.current,o=this.treeAdapter.getChildNodes(i),s=r&&e.lastFosterParentingLocation.beforeElement?o.indexOf(e.lastFosterParentingLocation.beforeElement)-1:o.length-1,a=o[s];if(this.treeAdapter.getNodeSourceCodeLocation(a)){const{endLine:e,endCol:t,endOffset:r}=n.location;this.treeAdapter.updateNodeSourceCodeLocation(a,{endLine:e,endCol:t,endOffset:r})}else this.treeAdapter.setNodeSourceCodeLocation(a,n.location)}}}}},110:(e,t,n)=>{"use strict";const r=n(704),i=n(763),o=n(930);e.exports=class extends r{constructor(e){super(e),this.tokenizer=e,this.posTracker=r.install(e.preprocessor,o),this.currentAttrLocation=null,this.ctLoc=null}_getCurrentLocation(){return{startLine:this.posTracker.line,startCol:this.posTracker.col,startOffset:this.posTracker.offset,endLine:-1,endCol:-1,endOffset:-1}}_attachCurrentAttrLocationInfo(){this.currentAttrLocation.endLine=this.posTracker.line,this.currentAttrLocation.endCol=this.posTracker.col,this.currentAttrLocation.endOffset=this.posTracker.offset;const e=this.tokenizer.currentToken,t=this.tokenizer.currentAttr;e.location.attrs||(e.location.attrs=Object.create(null)),e.location.attrs[t.name]=this.currentAttrLocation}_getOverriddenMethods(e,t){const n={_createStartTagToken(){t._createStartTagToken.call(this),this.currentToken.location=e.ctLoc},_createEndTagToken(){t._createEndTagToken.call(this),this.currentToken.location=e.ctLoc},_createCommentToken(){t._createCommentToken.call(this),this.currentToken.location=e.ctLoc},_createDoctypeToken(n){t._createDoctypeToken.call(this,n),this.currentToken.location=e.ctLoc},_createCharacterToken(n,r){t._createCharacterToken.call(this,n,r),this.currentCharacterToken.location=e.ctLoc},_createEOFToken(){t._createEOFToken.call(this),this.currentToken.location=e._getCurrentLocation()},_createAttr(n){t._createAttr.call(this,n),e.currentAttrLocation=e._getCurrentLocation()},_leaveAttrName(n){t._leaveAttrName.call(this,n),e._attachCurrentAttrLocationInfo()},_leaveAttrValue(n){t._leaveAttrValue.call(this,n),e._attachCurrentAttrLocationInfo()},_emitCurrentToken(){const n=this.currentToken.location;this.currentCharacterToken&&(this.currentCharacterToken.location.endLine=n.startLine,this.currentCharacterToken.location.endCol=n.startCol,this.currentCharacterToken.location.endOffset=n.startOffset),this.currentToken.type===i.EOF_TOKEN?(n.endLine=n.startLine,n.endCol=n.startCol,n.endOffset=n.startOffset):(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col+1,n.endOffset=e.posTracker.offset+1),t._emitCurrentToken.call(this)},_emitCurrentCharacterToken(){const n=this.currentCharacterToken&&this.currentCharacterToken.location;n&&-1===n.endOffset&&(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col,n.endOffset=e.posTracker.offset),t._emitCurrentCharacterToken.call(this)}};return Object.keys(i.MODE).forEach((r=>{const o=i.MODE[r];n[o]=function(n){e.ctLoc=e._getCurrentLocation(),t[o].call(this,n)}})),n}}},930:(e,t,n)=>{"use strict";const r=n(704);e.exports=class extends r{constructor(e){super(e),this.preprocessor=e,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.offset=0,this.col=0,this.line=1}_getOverriddenMethods(e,t){return{advance(){const n=this.pos+1,r=this.html[n];return e.isEol&&(e.isEol=!1,e.line++,e.lineStartPos=n),("\n"===r||"\r"===r&&"\n"!==this.html[n+1])&&(e.isEol=!0),e.col=n-e.lineStartPos+1,e.offset=e.droppedBufferSize+n,t.advance.call(this)},retreat(){t.retreat.call(this),e.isEol=!1,e.col=this.pos-e.lineStartPos+1},dropParsedChunk(){const n=this.pos;t.dropParsedChunk.call(this);const r=n-this.pos;e.lineStartPos-=r,e.droppedBufferSize+=r,e.offset=e.droppedBufferSize+this.pos}}}}},484:e=>{"use strict";class t{constructor(e){this.length=0,this.entries=[],this.treeAdapter=e,this.bookmark=null}_getNoahArkConditionCandidates(e){const n=[];if(this.length>=3){const r=this.treeAdapter.getAttrList(e).length,i=this.treeAdapter.getTagName(e),o=this.treeAdapter.getNamespaceURI(e);for(let e=this.length-1;e>=0;e--){const s=this.entries[e];if(s.type===t.MARKER_ENTRY)break;const a=s.element,u=this.treeAdapter.getAttrList(a);this.treeAdapter.getTagName(a)===i&&this.treeAdapter.getNamespaceURI(a)===o&&u.length===r&&n.push({idx:e,attrs:u})}}return n.length<3?[]:n}_ensureNoahArkCondition(e){const t=this._getNoahArkConditionCandidates(e);let n=t.length;if(n){const r=this.treeAdapter.getAttrList(e),i=r.length,o=Object.create(null);for(let e=0;e<i;e++){const t=r[e];o[t.name]=t.value}for(let e=0;e<i;e++)for(let r=0;r<n;r++){const i=t[r].attrs[e];if(o[i.name]!==i.value&&(t.splice(r,1),n--),t.length<3)return}for(let e=n-1;e>=2;e--)this.entries.splice(t[e].idx,1),this.length--}}insertMarker(){this.entries.push({type:t.MARKER_ENTRY}),this.length++}pushElement(e,n){this._ensureNoahArkCondition(e),this.entries.push({type:t.ELEMENT_ENTRY,element:e,token:n}),this.length++}insertElementAfterBookmark(e,n){let r=this.length-1;for(;r>=0&&this.entries[r]!==this.bookmark;r--);this.entries.splice(r+1,0,{type:t.ELEMENT_ENTRY,element:e,token:n}),this.length++}removeEntry(e){for(let t=this.length-1;t>=0;t--)if(this.entries[t]===e){this.entries.splice(t,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const e=this.entries.pop();if(this.length--,e.type===t.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(e){for(let n=this.length-1;n>=0;n--){const r=this.entries[n];if(r.type===t.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(r.element)===e)return r}return null}getElementEntry(e){for(let n=this.length-1;n>=0;n--){const r=this.entries[n];if(r.type===t.ELEMENT_ENTRY&&r.element===e)return r}return null}}t.MARKER_ENTRY="MARKER_ENTRY",t.ELEMENT_ENTRY="ELEMENT_ENTRY",e.exports=t},45:(e,t,n)=>{"use strict";const r=n(763),i=n(519),o=n(484),s=n(452),a=n(232),u=n(704),c=n(296),l=n(904),p=n(515),h=n(779),f=n(734),d=n(284),m=n(152),E=m.TAG_NAMES,g=m.NAMESPACES,T=m.ATTRS,A={scriptingEnabled:!0,sourceCodeLocationInfo:!1,onParseError:null,treeAdapter:c},C="hidden",_="INITIAL_MODE",D="BEFORE_HTML_MODE",k="BEFORE_HEAD_MODE",N="IN_HEAD_MODE",y="IN_HEAD_NO_SCRIPT_MODE",b="AFTER_HEAD_MODE",S="IN_BODY_MODE",x="TEXT_MODE",O="IN_TABLE_MODE",F="IN_TABLE_TEXT_MODE",I="IN_CAPTION_MODE",v="IN_COLUMN_GROUP_MODE",L="IN_TABLE_BODY_MODE",R="IN_ROW_MODE",M="IN_CELL_MODE",P="IN_SELECT_MODE",w="IN_SELECT_IN_TABLE_MODE",B="IN_TEMPLATE_MODE",H="AFTER_BODY_MODE",U="IN_FRAMESET_MODE",G="AFTER_FRAMESET_MODE",q="AFTER_AFTER_BODY_MODE",K="AFTER_AFTER_FRAMESET_MODE",z={[E.TR]:R,[E.TBODY]:L,[E.THEAD]:L,[E.TFOOT]:L,[E.CAPTION]:I,[E.COLGROUP]:v,[E.TABLE]:O,[E.BODY]:S,[E.FRAMESET]:U},j={[E.CAPTION]:O,[E.COLGROUP]:O,[E.TBODY]:O,[E.TFOOT]:O,[E.THEAD]:O,[E.COL]:v,[E.TR]:L,[E.TD]:R,[E.TH]:R},V={[_]:{[r.CHARACTER_TOKEN]:se,[r.NULL_CHARACTER_TOKEN]:se,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:function(e,t){e._setDocumentType(t);const n=t.forceQuirks?m.DOCUMENT_MODE.QUIRKS:p.getDocumentMode(t);p.isConforming(t)||e._err(f.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=D},[r.START_TAG_TOKEN]:se,[r.END_TAG_TOKEN]:se,[r.EOF_TOKEN]:se},[D]:{[r.CHARACTER_TOKEN]:ae,[r.NULL_CHARACTER_TOKEN]:ae,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===E.HTML?(e._insertElement(t,g.HTML),e.insertionMode=k):ae(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n!==E.HTML&&n!==E.HEAD&&n!==E.BODY&&n!==E.BR||ae(e,t)},[r.EOF_TOKEN]:ae},[k]:{[r.CHARACTER_TOKEN]:ue,[r.NULL_CHARACTER_TOKEN]:ue,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.HEAD?(e._insertElement(t,g.HTML),e.headElement=e.openElements.current,e.insertionMode=N):ue(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HEAD||n===E.BODY||n===E.HTML||n===E.BR?ue(e,t):e._err(f.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:ue},[N]:{[r.CHARACTER_TOKEN]:pe,[r.NULL_CHARACTER_TOKEN]:pe,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:ce,[r.END_TAG_TOKEN]:le,[r.EOF_TOKEN]:pe},[y]:{[r.CHARACTER_TOKEN]:he,[r.NULL_CHARACTER_TOKEN]:he,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.BASEFONT||n===E.BGSOUND||n===E.HEAD||n===E.LINK||n===E.META||n===E.NOFRAMES||n===E.STYLE?ce(e,t):n===E.NOSCRIPT?e._err(f.nestedNoscriptInHead):he(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.NOSCRIPT?(e.openElements.pop(),e.insertionMode=N):n===E.BR?he(e,t):e._err(f.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:he},[b]:{[r.CHARACTER_TOKEN]:fe,[r.NULL_CHARACTER_TOKEN]:fe,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.BODY?(e._insertElement(t,g.HTML),e.framesetOk=!1,e.insertionMode=S):n===E.FRAMESET?(e._insertElement(t,g.HTML),e.insertionMode=U):n===E.BASE||n===E.BASEFONT||n===E.BGSOUND||n===E.LINK||n===E.META||n===E.NOFRAMES||n===E.SCRIPT||n===E.STYLE||n===E.TEMPLATE||n===E.TITLE?(e._err(f.abandonedHeadElementChild),e.openElements.push(e.headElement),ce(e,t),e.openElements.remove(e.headElement)):n===E.HEAD?e._err(f.misplacedStartTagForHeadElement):fe(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.BODY||n===E.HTML||n===E.BR?fe(e,t):n===E.TEMPLATE?le(e,t):e._err(f.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:fe},[S]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:be,[r.END_TAG_TOKEN]:Fe,[r.EOF_TOKEN]:Ie},[x]:{[r.CHARACTER_TOKEN]:ie,[r.NULL_CHARACTER_TOKEN]:ie,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ee,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:ee,[r.END_TAG_TOKEN]:function(e,t){t.tagName===E.SCRIPT&&(e.pendingScript=e.openElements.current),e.openElements.pop(),e.insertionMode=e.originalInsertionMode},[r.EOF_TOKEN]:function(e,t){e._err(f.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e._processToken(t)}},[O]:{[r.CHARACTER_TOKEN]:ve,[r.NULL_CHARACTER_TOKEN]:ve,[r.WHITESPACE_CHARACTER_TOKEN]:ve,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:Le,[r.END_TAG_TOKEN]:Re,[r.EOF_TOKEN]:Ie},[F]:{[r.CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0},[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t)},[r.COMMENT_TOKEN]:Pe,[r.DOCTYPE_TOKEN]:Pe,[r.START_TAG_TOKEN]:Pe,[r.END_TAG_TOKEN]:Pe,[r.EOF_TOKEN]:Pe},[I]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.CAPTION||n===E.COL||n===E.COLGROUP||n===E.TBODY||n===E.TD||n===E.TFOOT||n===E.TH||n===E.THEAD||n===E.TR?e.openElements.hasInTableScope(E.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(E.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=O,e._processToken(t)):be(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.CAPTION||n===E.TABLE?e.openElements.hasInTableScope(E.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(E.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=O,n===E.TABLE&&e._processToken(t)):n!==E.BODY&&n!==E.COL&&n!==E.COLGROUP&&n!==E.HTML&&n!==E.TBODY&&n!==E.TD&&n!==E.TFOOT&&n!==E.TH&&n!==E.THEAD&&n!==E.TR&&Fe(e,t)},[r.EOF_TOKEN]:Ie},[v]:{[r.CHARACTER_TOKEN]:we,[r.NULL_CHARACTER_TOKEN]:we,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.COL?(e._appendElement(t,g.HTML),t.ackSelfClosing=!0):n===E.TEMPLATE?ce(e,t):we(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.COLGROUP?e.openElements.currentTagName===E.COLGROUP&&(e.openElements.pop(),e.insertionMode=O):n===E.TEMPLATE?le(e,t):n!==E.COL&&we(e,t)},[r.EOF_TOKEN]:Ie},[L]:{[r.CHARACTER_TOKEN]:ve,[r.NULL_CHARACTER_TOKEN]:ve,[r.WHITESPACE_CHARACTER_TOKEN]:ve,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.TR?(e.openElements.clearBackToTableBodyContext(),e._insertElement(t,g.HTML),e.insertionMode=R):n===E.TH||n===E.TD?(e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(E.TR),e.insertionMode=R,e._processToken(t)):n===E.CAPTION||n===E.COL||n===E.COLGROUP||n===E.TBODY||n===E.TFOOT||n===E.THEAD?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=O,e._processToken(t)):Le(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.TBODY||n===E.TFOOT||n===E.THEAD?e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=O):n===E.TABLE?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=O,e._processToken(t)):(n!==E.BODY&&n!==E.CAPTION&&n!==E.COL&&n!==E.COLGROUP||n!==E.HTML&&n!==E.TD&&n!==E.TH&&n!==E.TR)&&Re(e,t)},[r.EOF_TOKEN]:Ie},[R]:{[r.CHARACTER_TOKEN]:ve,[r.NULL_CHARACTER_TOKEN]:ve,[r.WHITESPACE_CHARACTER_TOKEN]:ve,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.TH||n===E.TD?(e.openElements.clearBackToTableRowContext(),e._insertElement(t,g.HTML),e.insertionMode=M,e.activeFormattingElements.insertMarker()):n===E.CAPTION||n===E.COL||n===E.COLGROUP||n===E.TBODY||n===E.TFOOT||n===E.THEAD||n===E.TR?e.openElements.hasInTableScope(E.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):Le(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.TR?e.openElements.hasInTableScope(E.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L):n===E.TABLE?e.openElements.hasInTableScope(E.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):n===E.TBODY||n===E.TFOOT||n===E.THEAD?(e.openElements.hasInTableScope(n)||e.openElements.hasInTableScope(E.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):(n!==E.BODY&&n!==E.CAPTION&&n!==E.COL&&n!==E.COLGROUP||n!==E.HTML&&n!==E.TD&&n!==E.TH)&&Re(e,t)},[r.EOF_TOKEN]:Ie},[M]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.CAPTION||n===E.COL||n===E.COLGROUP||n===E.TBODY||n===E.TD||n===E.TFOOT||n===E.TH||n===E.THEAD||n===E.TR?(e.openElements.hasInTableScope(E.TD)||e.openElements.hasInTableScope(E.TH))&&(e._closeTableCell(),e._processToken(t)):be(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.TD||n===E.TH?e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=R):n===E.TABLE||n===E.TBODY||n===E.TFOOT||n===E.THEAD||n===E.TR?e.openElements.hasInTableScope(n)&&(e._closeTableCell(),e._processToken(t)):n!==E.BODY&&n!==E.CAPTION&&n!==E.COL&&n!==E.COLGROUP&&n!==E.HTML&&Fe(e,t)},[r.EOF_TOKEN]:Ie},[P]:{[r.CHARACTER_TOKEN]:ie,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:Be,[r.END_TAG_TOKEN]:He,[r.EOF_TOKEN]:Ie},[w]:{[r.CHARACTER_TOKEN]:ie,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.CAPTION||n===E.TABLE||n===E.TBODY||n===E.TFOOT||n===E.THEAD||n===E.TR||n===E.TD||n===E.TH?(e.openElements.popUntilTagNamePopped(E.SELECT),e._resetInsertionMode(),e._processToken(t)):Be(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.CAPTION||n===E.TABLE||n===E.TBODY||n===E.TFOOT||n===E.THEAD||n===E.TR||n===E.TD||n===E.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(E.SELECT),e._resetInsertionMode(),e._processToken(t)):He(e,t)},[r.EOF_TOKEN]:Ie},[B]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;if(n===E.BASE||n===E.BASEFONT||n===E.BGSOUND||n===E.LINK||n===E.META||n===E.NOFRAMES||n===E.SCRIPT||n===E.STYLE||n===E.TEMPLATE||n===E.TITLE)ce(e,t);else{const r=j[n]||S;e._popTmplInsertionMode(),e._pushTmplInsertionMode(r),e.insertionMode=r,e._processToken(t)}},[r.END_TAG_TOKEN]:function(e,t){t.tagName===E.TEMPLATE&&le(e,t)},[r.EOF_TOKEN]:Ue},[H]:{[r.CHARACTER_TOKEN]:Ge,[r.NULL_CHARACTER_TOKEN]:Ge,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:function(e,t){e._appendCommentNode(t,e.openElements.items[0])},[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===E.HTML?be(e,t):Ge(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName===E.HTML?e.fragmentContext||(e.insertionMode=q):Ge(e,t)},[r.EOF_TOKEN]:oe},[U]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.FRAMESET?e._insertElement(t,g.HTML):n===E.FRAME?(e._appendElement(t,g.HTML),t.ackSelfClosing=!0):n===E.NOFRAMES&&ce(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName!==E.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagName===E.FRAMESET||(e.insertionMode=G))},[r.EOF_TOKEN]:oe},[G]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:ie,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.NOFRAMES&&ce(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName===E.HTML&&(e.insertionMode=K)},[r.EOF_TOKEN]:oe},[q]:{[r.CHARACTER_TOKEN]:qe,[r.NULL_CHARACTER_TOKEN]:qe,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:re,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===E.HTML?be(e,t):qe(e,t)},[r.END_TAG_TOKEN]:qe,[r.EOF_TOKEN]:oe},[K]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:de,[r.COMMENT_TOKEN]:re,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.NOFRAMES&&ce(e,t)},[r.END_TAG_TOKEN]:ee,[r.EOF_TOKEN]:oe}};function Y(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagName)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):Oe(e,t),n}function Q(e,t){let n=null;for(let r=e.openElements.stackTop;r>=0;r--){const i=e.openElements.items[r];if(i===t.element)break;e._isSpecialElement(i)&&(n=i)}return n||(e.openElements.popUntilElementPopped(t.element),e.activeFormattingElements.removeEntry(t)),n}function W(e,t,n){let r=t,i=e.openElements.getCommonAncestor(t);for(let o=0,s=i;s!==n;o++,s=i){i=e.openElements.getCommonAncestor(s);const n=e.activeFormattingElements.getElementEntry(s),a=n&&o>=3;!n||a?(a&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(s)):(s=X(e,n),r===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(r),e.treeAdapter.appendChild(s,r),r=s)}return r}function X(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),r=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,r),t.element=r,r}function $(e,t,n){if(e._isElementCausesFosterParenting(t))e._fosterParentElement(n);else{const r=e.treeAdapter.getTagName(t),i=e.treeAdapter.getNamespaceURI(t);r===E.TEMPLATE&&i===g.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n)}}function Z(e,t,n){const r=e.treeAdapter.getNamespaceURI(n.element),i=n.token,o=e.treeAdapter.createElement(i.tagName,r,i.attrs);e._adoptNodes(t,o),e.treeAdapter.appendChild(t,o),e.activeFormattingElements.insertElementAfterBookmark(o,n.token),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,o)}function J(e,t){let n;for(let r=0;r<8&&(n=Y(e,t),n);r++){const t=Q(e,n);if(!t)break;e.activeFormattingElements.bookmark=n;const r=W(e,t,n.element),i=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(r),$(e,i,r),Z(e,t,n)}}function ee(){}function te(e){e._err(f.misplacedDoctype)}function ne(e,t){e._appendCommentNode(t,e.openElements.currentTmplContent||e.openElements.current)}function re(e,t){e._appendCommentNode(t,e.document)}function ie(e,t){e._insertCharacters(t)}function oe(e){e.stopped=!0}function se(e,t){e._err(f.missingDoctype,{beforeToken:!0}),e.treeAdapter.setDocumentMode(e.document,m.DOCUMENT_MODE.QUIRKS),e.insertionMode=D,e._processToken(t)}function ae(e,t){e._insertFakeRootElement(),e.insertionMode=k,e._processToken(t)}function ue(e,t){e._insertFakeElement(E.HEAD),e.headElement=e.openElements.current,e.insertionMode=N,e._processToken(t)}function ce(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.BASE||n===E.BASEFONT||n===E.BGSOUND||n===E.LINK||n===E.META?(e._appendElement(t,g.HTML),t.ackSelfClosing=!0):n===E.TITLE?e._switchToTextParsing(t,r.MODE.RCDATA):n===E.NOSCRIPT?e.options.scriptingEnabled?e._switchToTextParsing(t,r.MODE.RAWTEXT):(e._insertElement(t,g.HTML),e.insertionMode=y):n===E.NOFRAMES||n===E.STYLE?e._switchToTextParsing(t,r.MODE.RAWTEXT):n===E.SCRIPT?e._switchToTextParsing(t,r.MODE.SCRIPT_DATA):n===E.TEMPLATE?(e._insertTemplate(t,g.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=B,e._pushTmplInsertionMode(B)):n===E.HEAD?e._err(f.misplacedStartTagForHeadElement):pe(e,t)}function le(e,t){const n=t.tagName;n===E.HEAD?(e.openElements.pop(),e.insertionMode=b):n===E.BODY||n===E.BR||n===E.HTML?pe(e,t):n===E.TEMPLATE&&e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagName!==E.TEMPLATE&&e._err(f.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped(E.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode()):e._err(f.endTagWithoutMatchingOpenElement)}function pe(e,t){e.openElements.pop(),e.insertionMode=b,e._processToken(t)}function he(e,t){const n=t.type===r.EOF_TOKEN?f.openElementsLeftAfterEof:f.disallowedContentInNoscriptInHead;e._err(n),e.openElements.pop(),e.insertionMode=N,e._processToken(t)}function fe(e,t){e._insertFakeElement(E.BODY),e.insertionMode=S,e._processToken(t)}function de(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t)}function me(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1}function Ee(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML)}function ge(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML),e.skipNextNewLine=!0,e.framesetOk=!1}function Te(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}function Ae(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1}function Ce(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,g.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}function _e(e,t){e._appendElement(t,g.HTML),t.ackSelfClosing=!0}function De(e,t){e._switchToTextParsing(t,r.MODE.RAWTEXT)}function ke(e,t){e.openElements.currentTagName===E.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML)}function Ne(e,t){e.openElements.hasInScope(E.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,g.HTML)}function ye(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML)}function be(e,t){const n=t.tagName;switch(n.length){case 1:n===E.I||n===E.S||n===E.B||n===E.U?Te(e,t):n===E.P?Ee(e,t):n===E.A?function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(E.A);n&&(J(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t):ye(e,t);break;case 2:n===E.DL||n===E.OL||n===E.UL?Ee(e,t):n===E.H1||n===E.H2||n===E.H3||n===E.H4||n===E.H5||n===E.H6?function(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement();const n=e.openElements.currentTagName;n!==E.H1&&n!==E.H2&&n!==E.H3&&n!==E.H4&&n!==E.H5&&n!==E.H6||e.openElements.pop(),e._insertElement(t,g.HTML)}(e,t):n===E.LI||n===E.DD||n===E.DT?function(e,t){e.framesetOk=!1;const n=t.tagName;for(let t=e.openElements.stackTop;t>=0;t--){const r=e.openElements.items[t],i=e.treeAdapter.getTagName(r);let o=null;if(n===E.LI&&i===E.LI?o=E.LI:n!==E.DD&&n!==E.DT||i!==E.DD&&i!==E.DT||(o=i),o){e.openElements.generateImpliedEndTagsWithExclusion(o),e.openElements.popUntilTagNamePopped(o);break}if(i!==E.ADDRESS&&i!==E.DIV&&i!==E.P&&e._isSpecialElement(r))break}e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML)}(e,t):n===E.EM||n===E.TT?Te(e,t):n===E.BR?Ce(e,t):n===E.HR?function(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._appendElement(t,g.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}(e,t):n===E.RB?Ne(e,t):n===E.RT||n===E.RP?function(e,t){e.openElements.hasInScope(E.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(E.RTC),e._insertElement(t,g.HTML)}(e,t):n!==E.TH&&n!==E.TD&&n!==E.TR&&ye(e,t);break;case 3:n===E.DIV||n===E.DIR||n===E.NAV?Ee(e,t):n===E.PRE?ge(e,t):n===E.BIG?Te(e,t):n===E.IMG||n===E.WBR?Ce(e,t):n===E.XMP?function(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,r.MODE.RAWTEXT)}(e,t):n===E.SVG?function(e,t){e._reconstructActiveFormattingElements(),h.adjustTokenSVGAttrs(t),h.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,g.SVG):e._insertElement(t,g.SVG),t.ackSelfClosing=!0}(e,t):n===E.RTC?Ne(e,t):n!==E.COL&&ye(e,t);break;case 4:n===E.HTML?function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs)}(e,t):n===E.BASE||n===E.LINK||n===E.META?ce(e,t):n===E.BODY?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs))}(e,t):n===E.MAIN||n===E.MENU?Ee(e,t):n===E.FORM?function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML),n||(e.formElement=e.openElements.current))}(e,t):n===E.CODE||n===E.FONT?Te(e,t):n===E.NOBR?function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(E.NOBR)&&(J(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,g.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t):n===E.AREA?Ce(e,t):n===E.MATH?function(e,t){e._reconstructActiveFormattingElements(),h.adjustTokenMathMLAttrs(t),h.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,g.MATHML):e._insertElement(t,g.MATHML),t.ackSelfClosing=!0}(e,t):n===E.MENU?function(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML)}(e,t):n!==E.HEAD&&ye(e,t);break;case 5:n===E.STYLE||n===E.TITLE?ce(e,t):n===E.ASIDE?Ee(e,t):n===E.SMALL?Te(e,t):n===E.TABLE?function(e,t){e.treeAdapter.getDocumentMode(e.document)!==m.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML),e.framesetOk=!1,e.insertionMode=O}(e,t):n===E.EMBED?Ce(e,t):n===E.INPUT?function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,g.HTML);const n=r.getTokenAttr(t,T.TYPE);n&&n.toLowerCase()===C||(e.framesetOk=!1),t.ackSelfClosing=!0}(e,t):n===E.PARAM||n===E.TRACK?_e(e,t):n===E.IMAGE?function(e,t){t.tagName=E.IMG,Ce(e,t)}(e,t):n!==E.FRAME&&n!==E.TBODY&&n!==E.TFOOT&&n!==E.THEAD&&ye(e,t);break;case 6:n===E.SCRIPT?ce(e,t):n===E.CENTER||n===E.FIGURE||n===E.FOOTER||n===E.HEADER||n===E.HGROUP||n===E.DIALOG?Ee(e,t):n===E.BUTTON?function(e,t){e.openElements.hasInScope(E.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(E.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML),e.framesetOk=!1}(e,t):n===E.STRIKE||n===E.STRONG?Te(e,t):n===E.APPLET||n===E.OBJECT?Ae(e,t):n===E.KEYGEN?Ce(e,t):n===E.SOURCE?_e(e,t):n===E.IFRAME?function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,r.MODE.RAWTEXT)}(e,t):n===E.SELECT?function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,g.HTML),e.framesetOk=!1,e.insertionMode===O||e.insertionMode===I||e.insertionMode===L||e.insertionMode===R||e.insertionMode===M?e.insertionMode=w:e.insertionMode=P}(e,t):n===E.OPTION?ke(e,t):ye(e,t);break;case 7:n===E.BGSOUND?ce(e,t):n===E.DETAILS||n===E.ADDRESS||n===E.ARTICLE||n===E.SECTION||n===E.SUMMARY?Ee(e,t):n===E.LISTING?ge(e,t):n===E.MARQUEE?Ae(e,t):n===E.NOEMBED?De(e,t):n!==E.CAPTION&&ye(e,t);break;case 8:n===E.BASEFONT?ce(e,t):n===E.FRAMESET?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,g.HTML),e.insertionMode=U)}(e,t):n===E.FIELDSET?Ee(e,t):n===E.TEXTAREA?function(e,t){e._insertElement(t,g.HTML),e.skipNextNewLine=!0,e.tokenizer.state=r.MODE.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=x}(e,t):n===E.TEMPLATE?ce(e,t):n===E.NOSCRIPT?e.options.scriptingEnabled?De(e,t):ye(e,t):n===E.OPTGROUP?ke(e,t):n!==E.COLGROUP&&ye(e,t);break;case 9:n===E.PLAINTEXT?function(e,t){e.openElements.hasInButtonScope(E.P)&&e._closePElement(),e._insertElement(t,g.HTML),e.tokenizer.state=r.MODE.PLAINTEXT}(e,t):ye(e,t);break;case 10:n===E.BLOCKQUOTE||n===E.FIGCAPTION?Ee(e,t):ye(e,t);break;default:ye(e,t)}}function Se(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n))}function xe(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker())}function Oe(e,t){const n=t.tagName;for(let t=e.openElements.stackTop;t>0;t--){const r=e.openElements.items[t];if(e.treeAdapter.getTagName(r)===n){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilElementPopped(r);break}if(e._isSpecialElement(r))break}}function Fe(e,t){const n=t.tagName;switch(n.length){case 1:n===E.A||n===E.B||n===E.I||n===E.S||n===E.U?J(e,t):n===E.P?function(e){e.openElements.hasInButtonScope(E.P)||e._insertFakeElement(E.P),e._closePElement()}(e):Oe(e,t);break;case 2:n===E.DL||n===E.UL||n===E.OL?Se(e,t):n===E.LI?function(e){e.openElements.hasInListItemScope(E.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(E.LI),e.openElements.popUntilTagNamePopped(E.LI))}(e):n===E.DD||n===E.DT?function(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n))}(e,t):n===E.H1||n===E.H2||n===E.H3||n===E.H4||n===E.H5||n===E.H6?function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped())}(e):n===E.BR?function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(E.BR),e.openElements.pop(),e.framesetOk=!1}(e):n===E.EM||n===E.TT?J(e,t):Oe(e,t);break;case 3:n===E.BIG?J(e,t):n===E.DIR||n===E.DIV||n===E.NAV||n===E.PRE?Se(e,t):Oe(e,t);break;case 4:n===E.BODY?function(e){e.openElements.hasInScope(E.BODY)&&(e.insertionMode=H)}(e):n===E.HTML?function(e,t){e.openElements.hasInScope(E.BODY)&&(e.insertionMode=H,e._processToken(t))}(e,t):n===E.FORM?function(e){const t=e.openElements.tmplCount>0,n=e.formElement;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(E.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(E.FORM):e.openElements.remove(n))}(e):n===E.CODE||n===E.FONT||n===E.NOBR?J(e,t):n===E.MAIN||n===E.MENU?Se(e,t):Oe(e,t);break;case 5:n===E.ASIDE?Se(e,t):n===E.SMALL?J(e,t):Oe(e,t);break;case 6:n===E.CENTER||n===E.FIGURE||n===E.FOOTER||n===E.HEADER||n===E.HGROUP||n===E.DIALOG?Se(e,t):n===E.APPLET||n===E.OBJECT?xe(e,t):n===E.STRIKE||n===E.STRONG?J(e,t):Oe(e,t);break;case 7:n===E.ADDRESS||n===E.ARTICLE||n===E.DETAILS||n===E.SECTION||n===E.SUMMARY||n===E.LISTING?Se(e,t):n===E.MARQUEE?xe(e,t):Oe(e,t);break;case 8:n===E.FIELDSET?Se(e,t):n===E.TEMPLATE?le(e,t):Oe(e,t);break;case 10:n===E.BLOCKQUOTE||n===E.FIGCAPTION?Se(e,t):Oe(e,t);break;default:Oe(e,t)}}function Ie(e,t){e.tmplInsertionModeStackTop>-1?Ue(e,t):e.stopped=!0}function ve(e,t){const n=e.openElements.currentTagName;n===E.TABLE||n===E.TBODY||n===E.TFOOT||n===E.THEAD||n===E.TR?(e.pendingCharacterTokens=[],e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=F,e._processToken(t)):Me(e,t)}function Le(e,t){const n=t.tagName;switch(n.length){case 2:n===E.TD||n===E.TH||n===E.TR?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(E.TBODY),e.insertionMode=L,e._processToken(t)}(e,t):Me(e,t);break;case 3:n===E.COL?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(E.COLGROUP),e.insertionMode=v,e._processToken(t)}(e,t):Me(e,t);break;case 4:n===E.FORM?function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,g.HTML),e.formElement=e.openElements.current,e.openElements.pop())}(e,t):Me(e,t);break;case 5:n===E.TABLE?function(e,t){e.openElements.hasInTableScope(E.TABLE)&&(e.openElements.popUntilTagNamePopped(E.TABLE),e._resetInsertionMode(),e._processToken(t))}(e,t):n===E.STYLE?ce(e,t):n===E.TBODY||n===E.TFOOT||n===E.THEAD?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,g.HTML),e.insertionMode=L}(e,t):n===E.INPUT?function(e,t){const n=r.getTokenAttr(t,T.TYPE);n&&n.toLowerCase()===C?e._appendElement(t,g.HTML):Me(e,t),t.ackSelfClosing=!0}(e,t):Me(e,t);break;case 6:n===E.SCRIPT?ce(e,t):Me(e,t);break;case 7:n===E.CAPTION?function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,g.HTML),e.insertionMode=I}(e,t):Me(e,t);break;case 8:n===E.COLGROUP?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,g.HTML),e.insertionMode=v}(e,t):n===E.TEMPLATE?ce(e,t):Me(e,t);break;default:Me(e,t)}}function Re(e,t){const n=t.tagName;n===E.TABLE?e.openElements.hasInTableScope(E.TABLE)&&(e.openElements.popUntilTagNamePopped(E.TABLE),e._resetInsertionMode()):n===E.TEMPLATE?le(e,t):n!==E.BODY&&n!==E.CAPTION&&n!==E.COL&&n!==E.COLGROUP&&n!==E.HTML&&n!==E.TBODY&&n!==E.TD&&n!==E.TFOOT&&n!==E.TH&&n!==E.THEAD&&n!==E.TR&&Me(e,t)}function Me(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,e._processTokenInBodyMode(t),e.fosterParentingEnabled=n}function Pe(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)Me(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t)}function we(e,t){e.openElements.currentTagName===E.COLGROUP&&(e.openElements.pop(),e.insertionMode=O,e._processToken(t))}function Be(e,t){const n=t.tagName;n===E.HTML?be(e,t):n===E.OPTION?(e.openElements.currentTagName===E.OPTION&&e.openElements.pop(),e._insertElement(t,g.HTML)):n===E.OPTGROUP?(e.openElements.currentTagName===E.OPTION&&e.openElements.pop(),e.openElements.currentTagName===E.OPTGROUP&&e.openElements.pop(),e._insertElement(t,g.HTML)):n===E.INPUT||n===E.KEYGEN||n===E.TEXTAREA||n===E.SELECT?e.openElements.hasInSelectScope(E.SELECT)&&(e.openElements.popUntilTagNamePopped(E.SELECT),e._resetInsertionMode(),n!==E.SELECT&&e._processToken(t)):n!==E.SCRIPT&&n!==E.TEMPLATE||ce(e,t)}function He(e,t){const n=t.tagName;if(n===E.OPTGROUP){const t=e.openElements.items[e.openElements.stackTop-1],n=t&&e.treeAdapter.getTagName(t);e.openElements.currentTagName===E.OPTION&&n===E.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagName===E.OPTGROUP&&e.openElements.pop()}else n===E.OPTION?e.openElements.currentTagName===E.OPTION&&e.openElements.pop():n===E.SELECT&&e.openElements.hasInSelectScope(E.SELECT)?(e.openElements.popUntilTagNamePopped(E.SELECT),e._resetInsertionMode()):n===E.TEMPLATE&&le(e,t)}function Ue(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(E.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode(),e._processToken(t)):e.stopped=!0}function Ge(e,t){e.insertionMode=S,e._processToken(t)}function qe(e,t){e.insertionMode=S,e._processToken(t)}e.exports=class{constructor(e){this.options=l(A,e),this.treeAdapter=this.options.treeAdapter,this.pendingScript=null,this.options.sourceCodeLocationInfo&&u.install(this,s),this.options.onParseError&&u.install(this,a,{onParseError:this.options.onParseError})}parse(e){const t=this.treeAdapter.createDocument();return this._bootstrap(t,null),this.tokenizer.write(e,!0),this._runParsingLoop(null),t}parseFragment(e,t){t||(t=this.treeAdapter.createElement(E.TEMPLATE,g.HTML,[]));const n=this.treeAdapter.createElement("documentmock",g.HTML,[]);this._bootstrap(n,t),this.treeAdapter.getTagName(t)===E.TEMPLATE&&this._pushTmplInsertionMode(B),this._initTokenizerForFragmentParsing(),this._insertFakeRootElement(),this._resetInsertionMode(),this._findFormInFragmentContext(),this.tokenizer.write(e,!0),this._runParsingLoop(null);const r=this.treeAdapter.getFirstChild(n),i=this.treeAdapter.createDocumentFragment();return this._adoptNodes(r,i),i}_bootstrap(e,t){this.tokenizer=new r(this.options),this.stopped=!1,this.insertionMode=_,this.originalInsertionMode="",this.document=e,this.fragmentContext=t,this.headElement=null,this.formElement=null,this.openElements=new i(this.document,this.treeAdapter),this.activeFormattingElements=new o(this.treeAdapter),this.tmplInsertionModeStack=[],this.tmplInsertionModeStackTop=-1,this.currentTmplInsertionMode=null,this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1}_err(){}_runParsingLoop(e){for(;!this.stopped;){this._setupTokenizerCDATAMode();const t=this.tokenizer.getNextToken();if(t.type===r.HIBERNATION_TOKEN)break;if(this.skipNextNewLine&&(this.skipNextNewLine=!1,t.type===r.WHITESPACE_CHARACTER_TOKEN&&"\n"===t.chars[0])){if(1===t.chars.length)continue;t.chars=t.chars.substr(1)}if(this._processInputToken(t),e&&this.pendingScript)break}}runParsingLoopForCurrentChunk(e,t){if(this._runParsingLoop(t),t&&this.pendingScript){const e=this.pendingScript;return this.pendingScript=null,void t(e)}e&&e()}_setupTokenizerCDATAMode(){const e=this._getAdjustedCurrentElement();this.tokenizer.allowCDATA=e&&e!==this.document&&this.treeAdapter.getNamespaceURI(e)!==g.HTML&&!this._isIntegrationPoint(e)}_switchToTextParsing(e,t){this._insertElement(e,g.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=x}switchToPlaintextParsing(){this.insertionMode=x,this.originalInsertionMode=S,this.tokenizer.state=r.MODE.PLAINTEXT}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;do{if(this.treeAdapter.getTagName(e)===E.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e)}while(e)}_initTokenizerForFragmentParsing(){if(this.treeAdapter.getNamespaceURI(this.fragmentContext)===g.HTML){const e=this.treeAdapter.getTagName(this.fragmentContext);e===E.TITLE||e===E.TEXTAREA?this.tokenizer.state=r.MODE.RCDATA:e===E.STYLE||e===E.XMP||e===E.IFRAME||e===E.NOEMBED||e===E.NOFRAMES||e===E.NOSCRIPT?this.tokenizer.state=r.MODE.RAWTEXT:e===E.SCRIPT?this.tokenizer.state=r.MODE.SCRIPT_DATA:e===E.PLAINTEXT&&(this.tokenizer.state=r.MODE.PLAINTEXT)}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",r=e.systemId||"";this.treeAdapter.setDocumentType(this.document,t,n,r)}_attachElementToTree(e){if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.appendChild(t,e)}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n)}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n),this.openElements.push(n)}_insertFakeElement(e){const t=this.treeAdapter.createElement(e,g.HTML,[]);this._attachElementToTree(t),this.openElements.push(t)}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,g.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t),this.openElements.push(t)}_insertFakeRootElement(){const e=this.treeAdapter.createElement(E.HTML,g.HTML,[]);this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e)}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n)}_insertCharacters(e){if(this._shouldFosterParentOnInsertion())this._fosterParentText(e.chars);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.insertText(t,e.chars)}}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n)}_shouldProcessTokenInForeignContent(e){const t=this._getAdjustedCurrentElement();if(!t||t===this.document)return!1;const n=this.treeAdapter.getNamespaceURI(t);if(n===g.HTML)return!1;if(this.treeAdapter.getTagName(t)===E.ANNOTATION_XML&&n===g.MATHML&&e.type===r.START_TAG_TOKEN&&e.tagName===E.SVG)return!1;const i=e.type===r.CHARACTER_TOKEN||e.type===r.NULL_CHARACTER_TOKEN||e.type===r.WHITESPACE_CHARACTER_TOKEN;return!((e.type===r.START_TAG_TOKEN&&e.tagName!==E.MGLYPH&&e.tagName!==E.MALIGNMARK||i)&&this._isIntegrationPoint(t,g.MATHML)||(e.type===r.START_TAG_TOKEN||i)&&this._isIntegrationPoint(t,g.HTML)||e.type===r.EOF_TOKEN)}_processToken(e){V[this.insertionMode][e.type](this,e)}_processTokenInBodyMode(e){V.IN_BODY_MODE[e.type](this,e)}_processTokenInForeignContent(e){e.type===r.CHARACTER_TOKEN?function(e,t){e._insertCharacters(t),e.framesetOk=!1}(this,e):e.type===r.NULL_CHARACTER_TOKEN?function(e,t){t.chars=d.REPLACEMENT_CHARACTER,e._insertCharacters(t)}(this,e):e.type===r.WHITESPACE_CHARACTER_TOKEN?ie(this,e):e.type===r.COMMENT_TOKEN?ne(this,e):e.type===r.START_TAG_TOKEN?function(e,t){if(h.causesExit(t)&&!e.fragmentContext){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==g.HTML&&!e._isIntegrationPoint(e.openElements.current);)e.openElements.pop();e._processToken(t)}else{const n=e._getAdjustedCurrentElement(),r=e.treeAdapter.getNamespaceURI(n);r===g.MATHML?h.adjustTokenMathMLAttrs(t):r===g.SVG&&(h.adjustTokenSVGTagName(t),h.adjustTokenSVGAttrs(t)),h.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,r):e._insertElement(t,r),t.ackSelfClosing=!0}}(this,e):e.type===r.END_TAG_TOKEN&&function(e,t){for(let n=e.openElements.stackTop;n>0;n--){const r=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(r)===g.HTML){e._processToken(t);break}if(e.treeAdapter.getTagName(r).toLowerCase()===t.tagName){e.openElements.popUntilElementPopped(r);break}}}(this,e)}_processInputToken(e){this._shouldProcessTokenInForeignContent(e)?this._processTokenInForeignContent(e):this._processToken(e),e.type===r.START_TAG_TOKEN&&e.selfClosing&&!e.ackSelfClosing&&this._err(f.nonVoidHtmlElementStartTagWithTrailingSolidus)}_isIntegrationPoint(e,t){const n=this.treeAdapter.getTagName(e),r=this.treeAdapter.getNamespaceURI(e),i=this.treeAdapter.getAttrList(e);return h.isIntegrationPoint(n,r,i,t)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.length;if(e){let t=e,n=null;do{if(t--,n=this.activeFormattingElements.entries[t],n.type===o.MARKER_ENTRY||this.openElements.contains(n.element)){t++;break}}while(t>0);for(let r=t;r<e;r++)n=this.activeFormattingElements.entries[r],this._insertElement(n.token,this.treeAdapter.getNamespaceURI(n.element)),n.element=this.openElements.current}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=R}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(E.P),this.openElements.popUntilTagNamePopped(E.P)}_resetInsertionMode(){for(let e=this.openElements.stackTop,t=!1;e>=0;e--){let n=this.openElements.items[e];0===e&&(t=!0,this.fragmentContext&&(n=this.fragmentContext));const r=this.treeAdapter.getTagName(n),i=z[r];if(i){this.insertionMode=i;break}if(!(t||r!==E.TD&&r!==E.TH)){this.insertionMode=M;break}if(!t&&r===E.HEAD){this.insertionMode=N;break}if(r===E.SELECT){this._resetInsertionModeForSelect(e);break}if(r===E.TEMPLATE){this.insertionMode=this.currentTmplInsertionMode;break}if(r===E.HTML){this.insertionMode=this.headElement?b:k;break}if(t){this.insertionMode=S;break}}}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.items[t],n=this.treeAdapter.getTagName(e);if(n===E.TEMPLATE)break;if(n===E.TABLE)return void(this.insertionMode=w)}this.insertionMode=P}_pushTmplInsertionMode(e){this.tmplInsertionModeStack.push(e),this.tmplInsertionModeStackTop++,this.currentTmplInsertionMode=e}_popTmplInsertionMode(){this.tmplInsertionModeStack.pop(),this.tmplInsertionModeStackTop--,this.currentTmplInsertionMode=this.tmplInsertionModeStack[this.tmplInsertionModeStackTop]}_isElementCausesFosterParenting(e){const t=this.treeAdapter.getTagName(e);return t===E.TABLE||t===E.TBODY||t===E.TFOOT||t===E.THEAD||t===E.TR}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.current)}_findFosterParentingLocation(){const e={parent:null,beforeElement:null};for(let t=this.openElements.stackTop;t>=0;t--){const n=this.openElements.items[t],r=this.treeAdapter.getTagName(n),i=this.treeAdapter.getNamespaceURI(n);if(r===E.TEMPLATE&&i===g.HTML){e.parent=this.treeAdapter.getTemplateContent(n);break}if(r===E.TABLE){e.parent=this.treeAdapter.getParentNode(n),e.parent?e.beforeElement=n:e.parent=this.openElements.items[t-1];break}}return e.parent||(e.parent=this.openElements.items[0]),e}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e)}_fosterParentText(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertTextBefore(t.parent,e,t.beforeElement):this.treeAdapter.insertText(t.parent,e)}_isSpecialElement(e){const t=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);return m.SPECIAL_ELEMENTS[n][t]}}},519:(e,t,n)=>{"use strict";const r=n(152),i=r.TAG_NAMES,o=r.NAMESPACES;function s(e){switch(e.length){case 1:return e===i.P;case 2:return e===i.RB||e===i.RP||e===i.RT||e===i.DD||e===i.DT||e===i.LI;case 3:return e===i.RTC;case 6:return e===i.OPTION;case 8:return e===i.OPTGROUP}return!1}function a(e){switch(e.length){case 1:return e===i.P;case 2:return e===i.RB||e===i.RP||e===i.RT||e===i.DD||e===i.DT||e===i.LI||e===i.TD||e===i.TH||e===i.TR;case 3:return e===i.RTC;case 5:return e===i.TBODY||e===i.TFOOT||e===i.THEAD;case 6:return e===i.OPTION;case 7:return e===i.CAPTION;case 8:return e===i.OPTGROUP||e===i.COLGROUP}return!1}function u(e,t){switch(e.length){case 2:if(e===i.TD||e===i.TH)return t===o.HTML;if(e===i.MI||e===i.MO||e===i.MN||e===i.MS)return t===o.MATHML;break;case 4:if(e===i.HTML)return t===o.HTML;if(e===i.DESC)return t===o.SVG;break;case 5:if(e===i.TABLE)return t===o.HTML;if(e===i.MTEXT)return t===o.MATHML;if(e===i.TITLE)return t===o.SVG;break;case 6:return(e===i.APPLET||e===i.OBJECT)&&t===o.HTML;case 7:return(e===i.CAPTION||e===i.MARQUEE)&&t===o.HTML;case 8:return e===i.TEMPLATE&&t===o.HTML;case 13:return e===i.FOREIGN_OBJECT&&t===o.SVG;case 14:return e===i.ANNOTATION_XML&&t===o.MATHML}return!1}e.exports=class{constructor(e,t){this.stackTop=-1,this.items=[],this.current=e,this.currentTagName=null,this.currentTmplContent=null,this.tmplCount=0,this.treeAdapter=t}_indexOf(e){let t=-1;for(let n=this.stackTop;n>=0;n--)if(this.items[n]===e){t=n;break}return t}_isInTemplate(){return this.currentTagName===i.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===o.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagName=this.current&&this.treeAdapter.getTagName(this.current),this.currentTmplContent=this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):null}push(e){this.items[++this.stackTop]=e,this._updateCurrentElement(),this._isInTemplate()&&this.tmplCount++}pop(){this.stackTop--,this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this._updateCurrentElement()}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&this._updateCurrentElement()}insertAfter(e,t){const n=this._indexOf(e)+1;this.items.splice(n,0,t),n===++this.stackTop&&this._updateCurrentElement()}popUntilTagNamePopped(e){for(;this.stackTop>-1;){const t=this.currentTagName,n=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),t===e&&n===o.HTML)break}}popUntilElementPopped(e){for(;this.stackTop>-1;){const t=this.current;if(this.pop(),t===e)break}}popUntilNumberedHeaderPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===i.H1||e===i.H2||e===i.H3||e===i.H4||e===i.H5||e===i.H6&&t===o.HTML)break}}popUntilTableCellPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===i.TD||e===i.TH&&t===o.HTML)break}}popAllUpToHtmlElement(){this.stackTop=0,this._updateCurrentElement()}clearBackToTableContext(){for(;this.currentTagName!==i.TABLE&&this.currentTagName!==i.TEMPLATE&&this.currentTagName!==i.HTML||this.treeAdapter.getNamespaceURI(this.current)!==o.HTML;)this.pop()}clearBackToTableBodyContext(){for(;this.currentTagName!==i.TBODY&&this.currentTagName!==i.TFOOT&&this.currentTagName!==i.THEAD&&this.currentTagName!==i.TEMPLATE&&this.currentTagName!==i.HTML||this.treeAdapter.getNamespaceURI(this.current)!==o.HTML;)this.pop()}clearBackToTableRowContext(){for(;this.currentTagName!==i.TR&&this.currentTagName!==i.TEMPLATE&&this.currentTagName!==i.HTML||this.treeAdapter.getNamespaceURI(this.current)!==o.HTML;)this.pop()}remove(e){for(let t=this.stackTop;t>=0;t--)if(this.items[t]===e){this.items.splice(t,1),this.stackTop--,this._updateCurrentElement();break}}tryPeekProperlyNestedBodyElement(){const e=this.items[1];return e&&this.treeAdapter.getTagName(e)===i.BODY?e:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){let t=this._indexOf(e);return--t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.currentTagName===i.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===o.HTML)return!0;if(u(n,r))return!1}return!0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]),n=this.treeAdapter.getNamespaceURI(this.items[e]);if((t===i.H1||t===i.H2||t===i.H3||t===i.H4||t===i.H5||t===i.H6)&&n===o.HTML)return!0;if(u(t,n))return!1}return!0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===o.HTML)return!0;if((n===i.UL||n===i.OL)&&r===o.HTML||u(n,r))return!1}return!0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===o.HTML)return!0;if(n===i.BUTTON&&r===o.HTML||u(n,r))return!1}return!0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===o.HTML){if(n===e)return!0;if(n===i.TABLE||n===i.TEMPLATE||n===i.HTML)return!1}}return!0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]);if(this.treeAdapter.getNamespaceURI(this.items[e])===o.HTML){if(t===i.TBODY||t===i.THEAD||t===i.TFOOT)return!0;if(t===i.TABLE||t===i.HTML)return!1}}return!0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===o.HTML){if(n===e)return!0;if(n!==i.OPTION&&n!==i.OPTGROUP)return!1}}return!0}generateImpliedEndTags(){for(;s(this.currentTagName);)this.pop()}generateImpliedEndTagsThoroughly(){for(;a(this.currentTagName);)this.pop()}generateImpliedEndTagsWithExclusion(e){for(;s(this.currentTagName)&&this.currentTagName!==e;)this.pop()}}},763:(e,t,n)=>{"use strict";const r=n(118),i=n(284),o=n(482),s=n(734),a=i.CODE_POINTS,u=i.CODE_POINT_SEQUENCES,c={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},l="DATA_STATE",p="RCDATA_STATE",h="RAWTEXT_STATE",f="SCRIPT_DATA_STATE",d="PLAINTEXT_STATE",m="TAG_OPEN_STATE",E="END_TAG_OPEN_STATE",g="TAG_NAME_STATE",T="RCDATA_LESS_THAN_SIGN_STATE",A="RCDATA_END_TAG_OPEN_STATE",C="RCDATA_END_TAG_NAME_STATE",_="RAWTEXT_LESS_THAN_SIGN_STATE",D="RAWTEXT_END_TAG_OPEN_STATE",k="RAWTEXT_END_TAG_NAME_STATE",N="SCRIPT_DATA_LESS_THAN_SIGN_STATE",y="SCRIPT_DATA_END_TAG_OPEN_STATE",b="SCRIPT_DATA_END_TAG_NAME_STATE",S="SCRIPT_DATA_ESCAPE_START_STATE",x="SCRIPT_DATA_ESCAPE_START_DASH_STATE",O="SCRIPT_DATA_ESCAPED_STATE",F="SCRIPT_DATA_ESCAPED_DASH_STATE",I="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",v="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE",L="SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE",R="SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE",M="SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE",P="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",w="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE",B="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE",H="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",U="SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE",G="BEFORE_ATTRIBUTE_NAME_STATE",q="ATTRIBUTE_NAME_STATE",K="AFTER_ATTRIBUTE_NAME_STATE",z="BEFORE_ATTRIBUTE_VALUE_STATE",j="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE",V="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE",Y="ATTRIBUTE_VALUE_UNQUOTED_STATE",Q="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE",W="SELF_CLOSING_START_TAG_STATE",X="BOGUS_COMMENT_STATE",$="MARKUP_DECLARATION_OPEN_STATE",Z="COMMENT_START_STATE",J="COMMENT_START_DASH_STATE",ee="COMMENT_STATE",te="COMMENT_LESS_THAN_SIGN_STATE",ne="COMMENT_LESS_THAN_SIGN_BANG_STATE",re="COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE",ie="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE",oe="COMMENT_END_DASH_STATE",se="COMMENT_END_STATE",ae="COMMENT_END_BANG_STATE",ue="DOCTYPE_STATE",ce="BEFORE_DOCTYPE_NAME_STATE",le="DOCTYPE_NAME_STATE",pe="AFTER_DOCTYPE_NAME_STATE",he="AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE",fe="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE",de="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE",me="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE",Ee="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE",ge="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE",Te="AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE",Ae="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE",Ce="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE",_e="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE",De="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE",ke="BOGUS_DOCTYPE_STATE",Ne="CDATA_SECTION_STATE",ye="CDATA_SECTION_BRACKET_STATE",be="CDATA_SECTION_END_STATE",Se="CHARACTER_REFERENCE_STATE",xe="NAMED_CHARACTER_REFERENCE_STATE",Oe="AMBIGUOS_AMPERSAND_STATE",Fe="NUMERIC_CHARACTER_REFERENCE_STATE",Ie="HEXADEMICAL_CHARACTER_REFERENCE_START_STATE",ve="DECIMAL_CHARACTER_REFERENCE_START_STATE",Le="HEXADEMICAL_CHARACTER_REFERENCE_STATE",Re="DECIMAL_CHARACTER_REFERENCE_STATE",Me="NUMERIC_CHARACTER_REFERENCE_END_STATE";function Pe(e){return e===a.SPACE||e===a.LINE_FEED||e===a.TABULATION||e===a.FORM_FEED}function we(e){return e>=a.DIGIT_0&&e<=a.DIGIT_9}function Be(e){return e>=a.LATIN_CAPITAL_A&&e<=a.LATIN_CAPITAL_Z}function He(e){return e>=a.LATIN_SMALL_A&&e<=a.LATIN_SMALL_Z}function Ue(e){return He(e)||Be(e)}function Ge(e){return Ue(e)||we(e)}function qe(e){return e>=a.LATIN_CAPITAL_A&&e<=a.LATIN_CAPITAL_F}function Ke(e){return e>=a.LATIN_SMALL_A&&e<=a.LATIN_SMALL_F}function ze(e){return e+32}function je(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(e>>>10&1023|55296)+String.fromCharCode(56320|1023&e))}function Ve(e){return String.fromCharCode(ze(e))}function Ye(e,t){const n=o[++e];let r=++e,i=r+n-1;for(;r<=i;){const e=r+i>>>1,s=o[e];if(s<t)r=e+1;else{if(!(s>t))return o[e+n];i=e-1}}return-1}class Qe{constructor(){this.preprocessor=new r,this.tokenQueue=[],this.allowCDATA=!1,this.state=l,this.returnState="",this.charRefCode=-1,this.tempBuff=[],this.lastStartTagName="",this.consumedAfterSnapshot=-1,this.active=!1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr=null}_err(){}_errOnNextCodePoint(e){this._consume(),this._err(e),this._unconsume()}getNextToken(){for(;!this.tokenQueue.length&&this.active;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this[this.state](e)}return this.tokenQueue.shift()}write(e,t){this.active=!0,this.preprocessor.write(e,t)}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e)}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;this.consumedAfterSnapshot>0;this.consumedAfterSnapshot--)this.preprocessor.retreat();return this.active=!1,this.tokenQueue.push({type:Qe.HIBERNATION_TOKEN}),!0}return!1}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--,this.preprocessor.retreat()}_reconsumeInState(e){this.state=e,this._unconsume()}_consumeSequenceIfMatch(e,t,n){let r=0,i=!0;const o=e.length;let s,u=0,c=t;for(;u<o;u++){if(u>0&&(c=this._consume(),r++),c===a.EOF){i=!1;break}if(s=e[u],c!==s&&(n||c!==ze(s))){i=!1;break}}if(!i)for(;r--;)this._unconsume();return i}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==u.SCRIPT_STRING.length)return!1;for(let e=0;e<this.tempBuff.length;e++)if(this.tempBuff[e]!==u.SCRIPT_STRING[e])return!1;return!0}_createStartTagToken(){this.currentToken={type:Qe.START_TAG_TOKEN,tagName:"",selfClosing:!1,ackSelfClosing:!1,attrs:[]}}_createEndTagToken(){this.currentToken={type:Qe.END_TAG_TOKEN,tagName:"",selfClosing:!1,attrs:[]}}_createCommentToken(){this.currentToken={type:Qe.COMMENT_TOKEN,data:""}}_createDoctypeToken(e){this.currentToken={type:Qe.DOCTYPE_TOKEN,name:e,forceQuirks:!1,publicId:null,systemId:null}}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t}}_createEOFToken(){this.currentToken={type:Qe.EOF_TOKEN}}_createAttr(e){this.currentAttr={name:e,value:""}}_leaveAttrName(e){null===Qe.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err(s.duplicateAttribute),this.state=e}_leaveAttrValue(e){this.state=e}_emitCurrentToken(){this._emitCurrentCharacterToken();const e=this.currentToken;this.currentToken=null,e.type===Qe.START_TAG_TOKEN?this.lastStartTagName=e.tagName:e.type===Qe.END_TAG_TOKEN&&(e.attrs.length>0&&this._err(s.endTagWithAttributes),e.selfClosing&&this._err(s.endTagWithTrailingSolidus)),this.tokenQueue.push(e)}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null)}_emitEOFToken(){this._createEOFToken(),this._emitCurrentToken()}_appendCharToCurrentCharacterToken(e,t){this.currentCharacterToken&&this.currentCharacterToken.type!==e&&this._emitCurrentCharacterToken(),this.currentCharacterToken?this.currentCharacterToken.chars+=t:this._createCharacterToken(e,t)}_emitCodePoint(e){let t=Qe.CHARACTER_TOKEN;Pe(e)?t=Qe.WHITESPACE_CHARACTER_TOKEN:e===a.NULL&&(t=Qe.NULL_CHARACTER_TOKEN),this._appendCharToCurrentCharacterToken(t,je(e))}_emitSeveralCodePoints(e){for(let t=0;t<e.length;t++)this._emitCodePoint(e[t])}_emitChars(e){this._appendCharToCurrentCharacterToken(Qe.CHARACTER_TOKEN,e)}_matchNamedCharacterReference(e){let t=null,n=1,r=Ye(0,e);for(this.tempBuff.push(e);r>-1;){const e=o[r],i=e<7;i&&1&e&&(t=2&e?[o[++r],o[++r]]:[o[++r]],n=0);const s=this._consume();if(this.tempBuff.push(s),n++,s===a.EOF)break;r=i?4&e?Ye(r,s):-1:s===e?++r:-1}for(;n--;)this.tempBuff.pop(),this._unconsume();return t}_isCharacterReferenceInAttribute(){return this.returnState===j||this.returnState===V||this.returnState===Y}_isCharacterReferenceAttributeQuirk(e){if(!e&&this._isCharacterReferenceInAttribute()){const e=this._consume();return this._unconsume(),e===a.EQUALS_SIGN||Ge(e)}return!1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let e=0;e<this.tempBuff.length;e++)this.currentAttr.value+=je(this.tempBuff[e]);else this._emitSeveralCodePoints(this.tempBuff);this.tempBuff=[]}[l](e){this.preprocessor.dropParsedChunk(),e===a.LESS_THAN_SIGN?this.state=m:e===a.AMPERSAND?(this.returnState=l,this.state=Se):e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitCodePoint(e)):e===a.EOF?this._emitEOFToken():this._emitCodePoint(e)}[p](e){this.preprocessor.dropParsedChunk(),e===a.AMPERSAND?(this.returnState=p,this.state=Se):e===a.LESS_THAN_SIGN?this.state=T:e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?this._emitEOFToken():this._emitCodePoint(e)}[h](e){this.preprocessor.dropParsedChunk(),e===a.LESS_THAN_SIGN?this.state=_:e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?this._emitEOFToken():this._emitCodePoint(e)}[f](e){this.preprocessor.dropParsedChunk(),e===a.LESS_THAN_SIGN?this.state=N:e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?this._emitEOFToken():this._emitCodePoint(e)}[d](e){this.preprocessor.dropParsedChunk(),e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?this._emitEOFToken():this._emitCodePoint(e)}[m](e){e===a.EXCLAMATION_MARK?this.state=$:e===a.SOLIDUS?this.state=E:Ue(e)?(this._createStartTagToken(),this._reconsumeInState(g)):e===a.QUESTION_MARK?(this._err(s.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(),this._reconsumeInState(X)):e===a.EOF?(this._err(s.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken()):(this._err(s.invalidFirstCharacterOfTagName),this._emitChars("<"),this._reconsumeInState(l))}[E](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(g)):e===a.GREATER_THAN_SIGN?(this._err(s.missingEndTagName),this.state=l):e===a.EOF?(this._err(s.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken()):(this._err(s.invalidFirstCharacterOfTagName),this._createCommentToken(),this._reconsumeInState(X))}[g](e){Pe(e)?this.state=G:e===a.SOLIDUS?this.state=W:e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):Be(e)?this.currentToken.tagName+=Ve(e):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.tagName+=i.REPLACEMENT_CHARACTER):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):this.currentToken.tagName+=je(e)}[T](e){e===a.SOLIDUS?(this.tempBuff=[],this.state=A):(this._emitChars("<"),this._reconsumeInState(p))}[A](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(C)):(this._emitChars("</"),this._reconsumeInState(p))}[C](e){if(Be(e))this.currentToken.tagName+=Ve(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=je(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Pe(e))return void(this.state=G);if(e===a.SOLIDUS)return void(this.state=W);if(e===a.GREATER_THAN_SIGN)return this.state=l,void this._emitCurrentToken()}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(p)}}[_](e){e===a.SOLIDUS?(this.tempBuff=[],this.state=D):(this._emitChars("<"),this._reconsumeInState(h))}[D](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(k)):(this._emitChars("</"),this._reconsumeInState(h))}[k](e){if(Be(e))this.currentToken.tagName+=Ve(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=je(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Pe(e))return void(this.state=G);if(e===a.SOLIDUS)return void(this.state=W);if(e===a.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=l)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(h)}}[N](e){e===a.SOLIDUS?(this.tempBuff=[],this.state=y):e===a.EXCLAMATION_MARK?(this.state=S,this._emitChars("<!")):(this._emitChars("<"),this._reconsumeInState(f))}[y](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(b)):(this._emitChars("</"),this._reconsumeInState(f))}[b](e){if(Be(e))this.currentToken.tagName+=Ve(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=je(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Pe(e))return void(this.state=G);if(e===a.SOLIDUS)return void(this.state=W);if(e===a.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=l)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(f)}}[S](e){e===a.HYPHEN_MINUS?(this.state=x,this._emitChars("-")):this._reconsumeInState(f)}[x](e){e===a.HYPHEN_MINUS?(this.state=I,this._emitChars("-")):this._reconsumeInState(f)}[O](e){e===a.HYPHEN_MINUS?(this.state=F,this._emitChars("-")):e===a.LESS_THAN_SIGN?this.state=v:e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(e)}[F](e){e===a.HYPHEN_MINUS?(this.state=I,this._emitChars("-")):e===a.LESS_THAN_SIGN?this.state=v:e===a.NULL?(this._err(s.unexpectedNullCharacter),this.state=O,this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=O,this._emitCodePoint(e))}[I](e){e===a.HYPHEN_MINUS?this._emitChars("-"):e===a.LESS_THAN_SIGN?this.state=v:e===a.GREATER_THAN_SIGN?(this.state=f,this._emitChars(">")):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.state=O,this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=O,this._emitCodePoint(e))}[v](e){e===a.SOLIDUS?(this.tempBuff=[],this.state=L):Ue(e)?(this.tempBuff=[],this._emitChars("<"),this._reconsumeInState(M)):(this._emitChars("<"),this._reconsumeInState(O))}[L](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(R)):(this._emitChars("</"),this._reconsumeInState(O))}[R](e){if(Be(e))this.currentToken.tagName+=Ve(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=je(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Pe(e))return void(this.state=G);if(e===a.SOLIDUS)return void(this.state=W);if(e===a.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=l)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(O)}}[M](e){Pe(e)||e===a.SOLIDUS||e===a.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?P:O,this._emitCodePoint(e)):Be(e)?(this.tempBuff.push(ze(e)),this._emitCodePoint(e)):He(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(O)}[P](e){e===a.HYPHEN_MINUS?(this.state=w,this._emitChars("-")):e===a.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===a.NULL?(this._err(s.unexpectedNullCharacter),this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(e)}[w](e){e===a.HYPHEN_MINUS?(this.state=B,this._emitChars("-")):e===a.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.state=P,this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=P,this._emitCodePoint(e))}[B](e){e===a.HYPHEN_MINUS?this._emitChars("-"):e===a.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===a.GREATER_THAN_SIGN?(this.state=f,this._emitChars(">")):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.state=P,this._emitChars(i.REPLACEMENT_CHARACTER)):e===a.EOF?(this._err(s.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=P,this._emitCodePoint(e))}[H](e){e===a.SOLIDUS?(this.tempBuff=[],this.state=U,this._emitChars("/")):this._reconsumeInState(P)}[U](e){Pe(e)||e===a.SOLIDUS||e===a.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?O:P,this._emitCodePoint(e)):Be(e)?(this.tempBuff.push(ze(e)),this._emitCodePoint(e)):He(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(P)}[G](e){Pe(e)||(e===a.SOLIDUS||e===a.GREATER_THAN_SIGN||e===a.EOF?this._reconsumeInState(K):e===a.EQUALS_SIGN?(this._err(s.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=q):(this._createAttr(""),this._reconsumeInState(q)))}[q](e){Pe(e)||e===a.SOLIDUS||e===a.GREATER_THAN_SIGN||e===a.EOF?(this._leaveAttrName(K),this._unconsume()):e===a.EQUALS_SIGN?this._leaveAttrName(z):Be(e)?this.currentAttr.name+=Ve(e):e===a.QUOTATION_MARK||e===a.APOSTROPHE||e===a.LESS_THAN_SIGN?(this._err(s.unexpectedCharacterInAttributeName),this.currentAttr.name+=je(e)):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentAttr.name+=i.REPLACEMENT_CHARACTER):this.currentAttr.name+=je(e)}[K](e){Pe(e)||(e===a.SOLIDUS?this.state=W:e===a.EQUALS_SIGN?this.state=z:e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):(this._createAttr(""),this._reconsumeInState(q)))}[z](e){Pe(e)||(e===a.QUOTATION_MARK?this.state=j:e===a.APOSTROPHE?this.state=V:e===a.GREATER_THAN_SIGN?(this._err(s.missingAttributeValue),this.state=l,this._emitCurrentToken()):this._reconsumeInState(Y))}[j](e){e===a.QUOTATION_MARK?this.state=Q:e===a.AMPERSAND?(this.returnState=j,this.state=Se):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentAttr.value+=i.REPLACEMENT_CHARACTER):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):this.currentAttr.value+=je(e)}[V](e){e===a.APOSTROPHE?this.state=Q:e===a.AMPERSAND?(this.returnState=V,this.state=Se):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentAttr.value+=i.REPLACEMENT_CHARACTER):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):this.currentAttr.value+=je(e)}[Y](e){Pe(e)?this._leaveAttrValue(G):e===a.AMPERSAND?(this.returnState=Y,this.state=Se):e===a.GREATER_THAN_SIGN?(this._leaveAttrValue(l),this._emitCurrentToken()):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentAttr.value+=i.REPLACEMENT_CHARACTER):e===a.QUOTATION_MARK||e===a.APOSTROPHE||e===a.LESS_THAN_SIGN||e===a.EQUALS_SIGN||e===a.GRAVE_ACCENT?(this._err(s.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=je(e)):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):this.currentAttr.value+=je(e)}[Q](e){Pe(e)?this._leaveAttrValue(G):e===a.SOLIDUS?this._leaveAttrValue(W):e===a.GREATER_THAN_SIGN?(this._leaveAttrValue(l),this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):(this._err(s.missingWhitespaceBetweenAttributes),this._reconsumeInState(G))}[W](e){e===a.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInTag),this._emitEOFToken()):(this._err(s.unexpectedSolidusInTag),this._reconsumeInState(G))}[X](e){e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):e===a.EOF?(this._emitCurrentToken(),this._emitEOFToken()):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.data+=i.REPLACEMENT_CHARACTER):this.currentToken.data+=je(e)}[$](e){this._consumeSequenceIfMatch(u.DASH_DASH_STRING,e,!0)?(this._createCommentToken(),this.state=Z):this._consumeSequenceIfMatch(u.DOCTYPE_STRING,e,!1)?this.state=ue:this._consumeSequenceIfMatch(u.CDATA_START_STRING,e,!0)?this.allowCDATA?this.state=Ne:(this._err(s.cdataInHtmlContent),this._createCommentToken(),this.currentToken.data="[CDATA[",this.state=X):this._ensureHibernation()||(this._err(s.incorrectlyOpenedComment),this._createCommentToken(),this._reconsumeInState(X))}[Z](e){e===a.HYPHEN_MINUS?this.state=J:e===a.GREATER_THAN_SIGN?(this._err(s.abruptClosingOfEmptyComment),this.state=l,this._emitCurrentToken()):this._reconsumeInState(ee)}[J](e){e===a.HYPHEN_MINUS?this.state=se:e===a.GREATER_THAN_SIGN?(this._err(s.abruptClosingOfEmptyComment),this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(ee))}[ee](e){e===a.HYPHEN_MINUS?this.state=oe:e===a.LESS_THAN_SIGN?(this.currentToken.data+="<",this.state=te):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.data+=i.REPLACEMENT_CHARACTER):e===a.EOF?(this._err(s.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=je(e)}[te](e){e===a.EXCLAMATION_MARK?(this.currentToken.data+="!",this.state=ne):e===a.LESS_THAN_SIGN?this.currentToken.data+="!":this._reconsumeInState(ee)}[ne](e){e===a.HYPHEN_MINUS?this.state=re:this._reconsumeInState(ee)}[re](e){e===a.HYPHEN_MINUS?this.state=ie:this._reconsumeInState(oe)}[ie](e){e!==a.GREATER_THAN_SIGN&&e!==a.EOF&&this._err(s.nestedComment),this._reconsumeInState(se)}[oe](e){e===a.HYPHEN_MINUS?this.state=se:e===a.EOF?(this._err(s.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(ee))}[se](e){e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):e===a.EXCLAMATION_MARK?this.state=ae:e===a.HYPHEN_MINUS?this.currentToken.data+="-":e===a.EOF?(this._err(s.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--",this._reconsumeInState(ee))}[ae](e){e===a.HYPHEN_MINUS?(this.currentToken.data+="--!",this.state=oe):e===a.GREATER_THAN_SIGN?(this._err(s.incorrectlyClosedComment),this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--!",this._reconsumeInState(ee))}[ue](e){Pe(e)?this.state=ce:e===a.GREATER_THAN_SIGN?this._reconsumeInState(ce):e===a.EOF?(this._err(s.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingWhitespaceBeforeDoctypeName),this._reconsumeInState(ce))}[ce](e){Pe(e)||(Be(e)?(this._createDoctypeToken(Ve(e)),this.state=le):e===a.NULL?(this._err(s.unexpectedNullCharacter),this._createDoctypeToken(i.REPLACEMENT_CHARACTER),this.state=le):e===a.GREATER_THAN_SIGN?(this._err(s.missingDoctypeName),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken(je(e)),this.state=le))}[le](e){Pe(e)?this.state=pe:e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):Be(e)?this.currentToken.name+=Ve(e):e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.name+=i.REPLACEMENT_CHARACTER):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=je(e)}[pe](e){Pe(e)||(e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch(u.PUBLIC_STRING,e,!1)?this.state=he:this._consumeSequenceIfMatch(u.SYSTEM_STRING,e,!1)?this.state=Te:this._ensureHibernation()||(this._err(s.invalidCharacterSequenceAfterDoctypeName),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke)))}[he](e){Pe(e)?this.state=fe:e===a.QUOTATION_MARK?(this._err(s.missingWhitespaceAfterDoctypePublicKeyword),this.currentToken.publicId="",this.state=de):e===a.APOSTROPHE?(this._err(s.missingWhitespaceAfterDoctypePublicKeyword),this.currentToken.publicId="",this.state=me):e===a.GREATER_THAN_SIGN?(this._err(s.missingDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke))}[fe](e){Pe(e)||(e===a.QUOTATION_MARK?(this.currentToken.publicId="",this.state=de):e===a.APOSTROPHE?(this.currentToken.publicId="",this.state=me):e===a.GREATER_THAN_SIGN?(this._err(s.missingDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke)))}[de](e){e===a.QUOTATION_MARK?this.state=Ee:e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.publicId+=i.REPLACEMENT_CHARACTER):e===a.GREATER_THAN_SIGN?(this._err(s.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=je(e)}[me](e){e===a.APOSTROPHE?this.state=Ee:e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.publicId+=i.REPLACEMENT_CHARACTER):e===a.GREATER_THAN_SIGN?(this._err(s.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=je(e)}[Ee](e){Pe(e)?this.state=ge:e===a.GREATER_THAN_SIGN?(this.state=l,this._emitCurrentToken()):e===a.QUOTATION_MARK?(this._err(s.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId="",this.state=Ce):e===a.APOSTROPHE?(this._err(s.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId="",this.state=_e):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke))}[ge](e){Pe(e)||(e===a.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=l):e===a.QUOTATION_MARK?(this.currentToken.systemId="",this.state=Ce):e===a.APOSTROPHE?(this.currentToken.systemId="",this.state=_e):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke)))}[Te](e){Pe(e)?this.state=Ae:e===a.QUOTATION_MARK?(this._err(s.missingWhitespaceAfterDoctypeSystemKeyword),this.currentToken.systemId="",this.state=Ce):e===a.APOSTROPHE?(this._err(s.missingWhitespaceAfterDoctypeSystemKeyword),this.currentToken.systemId="",this.state=_e):e===a.GREATER_THAN_SIGN?(this._err(s.missingDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke))}[Ae](e){Pe(e)||(e===a.QUOTATION_MARK?(this.currentToken.systemId="",this.state=Ce):e===a.APOSTROPHE?(this.currentToken.systemId="",this.state=_e):e===a.GREATER_THAN_SIGN?(this._err(s.missingDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this.state=l,this._emitCurrentToken()):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ke)))}[Ce](e){e===a.QUOTATION_MARK?this.state=De:e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.systemId+=i.REPLACEMENT_CHARACTER):e===a.GREATER_THAN_SIGN?(this._err(s.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=je(e)}[_e](e){e===a.APOSTROPHE?this.state=De:e===a.NULL?(this._err(s.unexpectedNullCharacter),this.currentToken.systemId+=i.REPLACEMENT_CHARACTER):e===a.GREATER_THAN_SIGN?(this._err(s.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=je(e)}[De](e){Pe(e)||(e===a.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=l):e===a.EOF?(this._err(s.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(s.unexpectedCharacterAfterDoctypeSystemIdentifier),this._reconsumeInState(ke)))}[ke](e){e===a.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=l):e===a.NULL?this._err(s.unexpectedNullCharacter):e===a.EOF&&(this._emitCurrentToken(),this._emitEOFToken())}[Ne](e){e===a.RIGHT_SQUARE_BRACKET?this.state=ye:e===a.EOF?(this._err(s.eofInCdata),this._emitEOFToken()):this._emitCodePoint(e)}[ye](e){e===a.RIGHT_SQUARE_BRACKET?this.state=be:(this._emitChars("]"),this._reconsumeInState(Ne))}[be](e){e===a.GREATER_THAN_SIGN?this.state=l:e===a.RIGHT_SQUARE_BRACKET?this._emitChars("]"):(this._emitChars("]]"),this._reconsumeInState(Ne))}[Se](e){this.tempBuff=[a.AMPERSAND],e===a.NUMBER_SIGN?(this.tempBuff.push(e),this.state=Fe):Ge(e)?this._reconsumeInState(xe):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}[xe](e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation())this.tempBuff=[a.AMPERSAND];else if(t){const e=this.tempBuff[this.tempBuff.length-1]===a.SEMICOLON;this._isCharacterReferenceAttributeQuirk(e)||(e||this._errOnNextCodePoint(s.missingSemicolonAfterCharacterReference),this.tempBuff=t),this._flushCodePointsConsumedAsCharacterReference(),this.state=this.returnState}else this._flushCodePointsConsumedAsCharacterReference(),this.state=Oe}[Oe](e){Ge(e)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=je(e):this._emitCodePoint(e):(e===a.SEMICOLON&&this._err(s.unknownNamedCharacterReference),this._reconsumeInState(this.returnState))}[Fe](e){this.charRefCode=0,e===a.LATIN_SMALL_X||e===a.LATIN_CAPITAL_X?(this.tempBuff.push(e),this.state=Ie):this._reconsumeInState(ve)}[Ie](e){!function(e){return we(e)||qe(e)||Ke(e)}(e)?(this._err(s.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)):this._reconsumeInState(Le)}[ve](e){we(e)?this._reconsumeInState(Re):(this._err(s.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}[Le](e){qe(e)?this.charRefCode=16*this.charRefCode+e-55:Ke(e)?this.charRefCode=16*this.charRefCode+e-87:we(e)?this.charRefCode=16*this.charRefCode+e-48:e===a.SEMICOLON?this.state=Me:(this._err(s.missingSemicolonAfterCharacterReference),this._reconsumeInState(Me))}[Re](e){we(e)?this.charRefCode=10*this.charRefCode+e-48:e===a.SEMICOLON?this.state=Me:(this._err(s.missingSemicolonAfterCharacterReference),this._reconsumeInState(Me))}[Me](){if(this.charRefCode===a.NULL)this._err(s.nullCharacterReference),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err(s.characterReferenceOutsideUnicodeRange),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(i.isSurrogate(this.charRefCode))this._err(s.surrogateCharacterReference),this.charRefCode=a.REPLACEMENT_CHARACTER;else if(i.isUndefinedCodePoint(this.charRefCode))this._err(s.noncharacterCharacterReference);else if(i.isControlCodePoint(this.charRefCode)||this.charRefCode===a.CARRIAGE_RETURN){this._err(s.controlCharacterReference);const e=c[this.charRefCode];e&&(this.charRefCode=e)}this.tempBuff=[this.charRefCode],this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)}}Qe.CHARACTER_TOKEN="CHARACTER_TOKEN",Qe.NULL_CHARACTER_TOKEN="NULL_CHARACTER_TOKEN",Qe.WHITESPACE_CHARACTER_TOKEN="WHITESPACE_CHARACTER_TOKEN",Qe.START_TAG_TOKEN="START_TAG_TOKEN",Qe.END_TAG_TOKEN="END_TAG_TOKEN",Qe.COMMENT_TOKEN="COMMENT_TOKEN",Qe.DOCTYPE_TOKEN="DOCTYPE_TOKEN",Qe.EOF_TOKEN="EOF_TOKEN",Qe.HIBERNATION_TOKEN="HIBERNATION_TOKEN",Qe.MODE={DATA:l,RCDATA:p,RAWTEXT:h,SCRIPT_DATA:f,PLAINTEXT:d},Qe.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null},e.exports=Qe},482:e=>{"use strict";e.exports=new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4e3,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,1e4,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13e3,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204])},118:(e,t,n)=>{"use strict";const r=n(284),i=n(734),o=r.CODE_POINTS;e.exports=class{constructor(){this.html=null,this.pos=-1,this.lastGapPos=-1,this.lastCharPos=-1,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536}_err(){}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos}_processSurrogate(e){if(this.pos!==this.lastCharPos){const t=this.html.charCodeAt(this.pos+1);if(r.isSurrogatePair(t))return this.pos++,this._addGap(),r.getSurrogatePairCodePoint(e,t)}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,o.EOF;return this._err(i.surrogateInInputStream),e}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=[])}write(e,t){this.html?this.html+=e:this.html=e,this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1,this.lastChunkWritten=t}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1,this.html.length),this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1}advance(){if(this.pos++,this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,o.EOF;let e=this.html.charCodeAt(this.pos);return this.skipNextNewLine&&e===o.LINE_FEED?(this.skipNextNewLine=!1,this._addGap(),this.advance()):e===o.CARRIAGE_RETURN?(this.skipNextNewLine=!0,o.LINE_FEED):(this.skipNextNewLine=!1,r.isSurrogate(e)&&(e=this._processSurrogate(e)),e>31&&e<127||e===o.LINE_FEED||e===o.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){r.isControlCodePoint(e)?this._err(i.controlCharacterInInputStream):r.isUndefinedCodePoint(e)&&this._err(i.noncharacterInInputStream)}retreat(){this.pos===this.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--),this.pos--}}},296:(e,t,n)=>{"use strict";const{DOCUMENT_MODE:r}=n(152);t.createDocument=function(){return{nodeName:"#document",mode:r.NO_QUIRKS,childNodes:[]}},t.createDocumentFragment=function(){return{nodeName:"#document-fragment",childNodes:[]}},t.createElement=function(e,t,n){return{nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}},t.createCommentNode=function(e){return{nodeName:"#comment",data:e,parentNode:null}};const i=function(e){return{nodeName:"#text",value:e,parentNode:null}},o=t.appendChild=function(e,t){e.childNodes.push(t),t.parentNode=e},s=t.insertBefore=function(e,t,n){const r=e.childNodes.indexOf(n);e.childNodes.splice(r,0,t),t.parentNode=e};t.setTemplateContent=function(e,t){e.content=t},t.getTemplateContent=function(e){return e.content},t.setDocumentType=function(e,t,n,r){let i=null;for(let t=0;t<e.childNodes.length;t++)if("#documentType"===e.childNodes[t].nodeName){i=e.childNodes[t];break}i?(i.name=t,i.publicId=n,i.systemId=r):o(e,{nodeName:"#documentType",name:t,publicId:n,systemId:r})},t.setDocumentMode=function(e,t){e.mode=t},t.getDocumentMode=function(e){return e.mode},t.detachNode=function(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null}},t.insertText=function(e,t){if(e.childNodes.length){const n=e.childNodes[e.childNodes.length-1];if("#text"===n.nodeName)return void(n.value+=t)}o(e,i(t))},t.insertTextBefore=function(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&"#text"===r.nodeName?r.value+=t:s(e,i(t),n)},t.adoptAttributes=function(e,t){const n=[];for(let t=0;t<e.attrs.length;t++)n.push(e.attrs[t].name);for(let r=0;r<t.length;r++)-1===n.indexOf(t[r].name)&&e.attrs.push(t[r])},t.getFirstChild=function(e){return e.childNodes[0]},t.getChildNodes=function(e){return e.childNodes},t.getParentNode=function(e){return e.parentNode},t.getAttrList=function(e){return e.attrs},t.getTagName=function(e){return e.tagName},t.getNamespaceURI=function(e){return e.namespaceURI},t.getTextNodeContent=function(e){return e.value},t.getCommentNodeContent=function(e){return e.data},t.getDocumentTypeNodeName=function(e){return e.name},t.getDocumentTypeNodePublicId=function(e){return e.publicId},t.getDocumentTypeNodeSystemId=function(e){return e.systemId},t.isTextNode=function(e){return"#text"===e.nodeName},t.isCommentNode=function(e){return"#comment"===e.nodeName},t.isDocumentTypeNode=function(e){return"#documentType"===e.nodeName},t.isElementNode=function(e){return!!e.tagName},t.setNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=t},t.getNodeSourceCodeLocation=function(e){return e.sourceCodeLocation},t.updateNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=Object.assign(e.sourceCodeLocation,t)}},904:e=>{"use strict";e.exports=function(e,t){return[e,t=t||Object.create(null)].reduce(((e,t)=>(Object.keys(t).forEach((n=>{e[n]=t[n]})),e)),Object.create(null))}},704:e=>{"use strict";class t{constructor(e){const t={},n=this._getOverriddenMethods(this,t);for(const r of Object.keys(n))"function"==typeof n[r]&&(t[r]=e[r],e[r]=n[r])}_getOverriddenMethods(){throw new Error("Not implemented")}}t.install=function(e,t,n){e.__mixins||(e.__mixins=[]);for(let n=0;n<e.__mixins.length;n++)if(e.__mixins[n].constructor===t)return e.__mixins[n];const r=new t(e,n);return e.__mixins.push(r),r},e.exports=t},848:(e,t,n)=>{var r=n(139);e.exports=function(e,t){var n,i=null;if(!e||"string"!=typeof e)return i;for(var o,s,a=r(e),u="function"==typeof t,c=0,l=a.length;c<l;c++)o=(n=a[c]).property,s=n.value,u?t(o,s,n):s&&(i||(i={}),i[o]=s);return i}},514:e=>{e.exports=function(e,t){return function e(n,r,i){if(n.children){for(var o=[],s=0,a=n.children.length;s<a;s++){var u=e(n.children[s],s,n);if(u)for(var c=0,l=u.length;c<l;c++)o.push(u[c])}n.children=o}return t(n,r,i)}(e,0,null)[0]}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.r(r),n.d(r,{default:()=>sc});var e={};n.r(e),n.d(e,{attentionMarkers:()=>pt,contentInitial:()=>ot,disable:()=>ht,document:()=>it,flow:()=>at,flowInitial:()=>st,insideSpan:()=>lt,string:()=>ut,text:()=>ct});var t={};function i(e){if(e)throw e}n.r(t),n.d(t,{boolean:()=>Ho,booleanish:()=>Uo,commaOrSpaceSeparated:()=>jo,commaSeparated:()=>zo,number:()=>qo,overloadedBoolean:()=>Go,spaceSeparated:()=>Ko});var o=n(738),s=n(470);function a(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var u={}.hasOwnProperty;function c(e){return e&&"object"==typeof e?u.call(e,"position")||u.call(e,"type")?p(e.position):u.call(e,"start")||u.call(e,"end")?p(e):u.call(e,"line")||u.call(e,"column")?l(e):"":""}function l(e){return h(e&&e.line)+":"+h(e&&e.column)}function p(e){return l(e&&e.start)+"-"+l(e&&e.end)}function h(e){return e&&"number"==typeof e?e:1}class f extends Error{constructor(e,t,n){var r,i=[null,null],o={start:{line:null,column:null},end:{line:null,column:null}};super(),"string"==typeof t&&(n=t,t=null),"string"==typeof n&&(-1===(r=n.indexOf(":"))?i[1]=n:(i[0]=n.slice(0,r),i[1]=n.slice(r+1))),t&&("type"in t||"position"in t?t.position&&(o=t.position):"start"in t||"end"in t?o=t:("line"in t||"column"in t)&&(o.start=t)),this.name=c(t)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="object"==typeof e?e.stack:"",this.reason=this.message,this.fatal,this.line=o.start.line,this.column=o.start.column,this.source=i[0],this.ruleId=i[1],this.position=o,this.actual,this.expected,this.file,this.url,this.note}}f.prototype.file="",f.prototype.name="",f.prototype.reason="",f.prototype.message="",f.prototype.stack="",f.prototype.fatal=null,f.prototype.column=null,f.prototype.line=null,f.prototype.source=null,f.prototype.ruleId=null,f.prototype.position=null;const d=require("path"),m=require("process");function E(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const g=require("url"),T=["history","path","basename","stem","extname","dirname"];class A{constructor(e){let t;t=e?"string"==typeof e||o(e)?{value:e}:E(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=m.cwd(),this.value,this.stored,this.result,this.map;let n,r=-1;for(;++r<T.length;){const e=T[r];e in t&&void 0!==t[e]&&(this[e]="history"===e?[...t[e]]:t[e])}for(n in t)T.includes(n)||(this[n]=t[n])}get path(){return this.history[this.history.length-1]}set path(e){E(e)&&(e=(0,g.fileURLToPath)(e)),_(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?d.dirname(this.path):void 0}set dirname(e){D(this.basename,"dirname"),this.path=d.join(e||"",this.basename)}get basename(){return"string"==typeof this.path?d.basename(this.path):void 0}set basename(e){_(e,"basename"),C(e,"basename"),this.path=d.join(this.dirname||"",e)}get extname(){return"string"==typeof this.path?d.extname(this.path):void 0}set extname(e){if(C(e,"extname"),D(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=d.join(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?d.basename(this.path,this.extname):void 0}set stem(e){_(e,"stem"),C(e,"stem"),this.path=d.join(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e)}message(e,t,n){const r=new f(e,t,n);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,t,n){const r=this.message(e,t,n);return r.fatal=null,r}fail(e,t,n){const r=this.message(e,t,n);throw r.fatal=!0,r}}function C(e,t){if(e&&e.includes(d.sep))throw new Error("`"+t+"` cannot be a path: did not expect `"+d.sep+"`")}function _(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function D(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}const k=function e(){const t=function(){const e=[],t={run:function(...t){let n=-1;const r=t.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function i(o,...s){const a=e[++n];let u=-1;if(o)r(o);else{for(;++u<t.length;)null!==s[u]&&void 0!==s[u]||(s[u]=t[u]);t=s,a?function(e,t){let n;return function(...t){const o=e.length>t.length;let s;o&&t.push(r);try{s=e(...t)}catch(e){const t=e;if(o&&n)throw t;return r(t)}o||(s instanceof Promise?s.then(i,r):s instanceof Error?r(s):i(s))};function r(e,...r){n||(n=!0,t(e,...r))}function i(e){r(null,e)}}(a,i)(...s):r(null,...s)}}(null,...t)},use:function(n){if("function"!=typeof n)throw new TypeError("Expected `middelware` to be a function, not "+n);return e.push(n),t}};return t}(),n=[];let r,u={},c=-1;return l.data=function(e,t){return"string"==typeof e?2===arguments.length?(x("data",r),u[e]=t,l):N.call(u,e)&&u[e]||null:e?(x("data",r),u=e,l):u},l.Parser=void 0,l.Compiler=void 0,l.freeze=function(){if(r)return l;for(;++c<n.length;){const[e,...r]=n[c];if(!1===r[0])continue;!0===r[0]&&(r[1]=void 0);const i=e.call(l,...r);"function"==typeof i&&t.use(i)}return r=!0,c=Number.POSITIVE_INFINITY,l},l.attachers=n,l.use=function(e,...t){let i;if(x("use",r),null==e);else if("function"==typeof e)h(e,...t);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?p(e):c(e)}return i&&(u.settings=Object.assign(u.settings||{},i)),l;function o(e){if("function"==typeof e)h(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[t,...n]=e;h(t,...n)}else c(e)}}function c(e){p(e.plugins),e.settings&&(i=Object.assign(i||{},e.settings))}function p(e){let t=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++t<e.length;)o(e[t])}}function h(e,t){let r,i=-1;for(;++i<n.length;)if(n[i][0]===e){r=n[i];break}r?(a(r[1])&&a(t)&&(t=s(!0,r[1],t)),r[1]=t):n.push([...arguments])}},l.parse=function(e){l.freeze();const t=I(e),n=l.Parser;return b("parse",n),y(n,"parse")?new n(String(t),t).parse():n(String(t),t)},l.stringify=function(e,t){l.freeze();const n=I(t),r=l.Compiler;return S("stringify",r),O(e),y(r,"compile")?new r(e,n).compile():r(e,n)},l.run=function(e,n,r){if(O(e),l.freeze(),r||"function"!=typeof n||(r=n,n=void 0),!r)return new Promise(i);function i(i,o){t.run(e,I(n),(function(t,n,s){n=n||e,t?o(t):i?i(n):r(null,n,s)}))}i(null,r)},l.runSync=function(e,t){let n,r;return l.run(e,t,(function(e,t){i(e),n=t,r=!0})),F("runSync","run",r),n},l.process=function(e,t){if(l.freeze(),b("process",l.Parser),S("process",l.Compiler),!t)return new Promise(n);function n(n,r){const i=I(e);function s(e,i){e||!i?r(e):n?n(i):t(null,i)}l.run(l.parse(i),i,((e,t,n)=>{if(!e&&t&&n){const r=l.stringify(t,n);null==r||(function(e){return"string"==typeof e||o(e)}(r)?n.value=r:n.result=r),s(e,n)}else s(e)}))}n(null,t)},l.processSync=function(e){let t;l.freeze(),b("processSync",l.Parser),S("processSync",l.Compiler);const n=I(e);return l.process(n,(function(e){t=!0,i(e)})),F("processSync","process",t),n},l;function l(){const t=e();let r=-1;for(;++r<n.length;)t.use(...n[r]);return t.data(s(!0,{},u)),t}}().freeze(),N={}.hasOwnProperty;function y(e,t){return"function"==typeof e&&e.prototype&&(function(e){let t;for(t in e)if(N.call(e,t))return!0;return!1}(e.prototype)||t in e.prototype)}function b(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `Parser`")}function S(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function x(e,t){if(t)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function O(e){if(!a(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function F(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}function I(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new A(e)}function v(e,t){var{includeImageAlt:n=!0}=t||{};return L(e,n)}function L(e,t){return e&&"object"==typeof e&&(e.value||(t?e.alt:"")||"children"in e&&R(e.children,t)||Array.isArray(e)&&R(e,t))||""}function R(e,t){for(var n=[],r=-1;++r<e.length;)n[r]=L(e[r],t);return n.join("")}function M(e,t,n,r){const i=e.length;let o,s=0;if(t=t<0?-t>i?0:i+t:t>i?i:t,n=n>0?n:0,r.length<1e4)o=Array.from(r),o.unshift(t,n),[].splice.apply(e,o);else for(n&&[].splice.apply(e,[t,n]);s<r.length;)o=r.slice(s,s+1e4),o.unshift(t,0),[].splice.apply(e,o),s+=1e4,t+=1e4}function P(e,t){return e.length>0?(M(e,e.length,0,t),e):t}const w={}.hasOwnProperty;function B(e){const t={};let n=-1;for(;++n<e.length;)H(t,e[n]);return t}function H(e,t){let n;for(n in t){const r=(w.call(e,n)?e[n]:void 0)||(e[n]={}),i=t[n];let o;for(o in i){w.call(r,o)||(r[o]=[]);const e=i[o];U(r[o],Array.isArray(e)?e:e?[e]:[])}}}function U(e,t){let n=-1;const r=[];for(;++n<t.length;)("after"===t[n].add?e:r).push(t[n]);M(e,0,0,r)}const G=J(/[A-Za-z]/),q=J(/\d/),K=J(/[\dA-Fa-f]/),z=J(/[\dA-Za-z]/),j=J(/[!-/:-@[-`{-~]/),V=J(/[#-'*+\--9=?A-Z^-~]/);function Y(e){return null!==e&&(e<32||127===e)}function Q(e){return null!==e&&(e<0||32===e)}function W(e){return null!==e&&e<-2}function X(e){return-2===e||-1===e||32===e}const $=J(/\s/),Z=J(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function J(e){return function(t){return null!==t&&e.test(String.fromCharCode(t))}}function ee(e,t,n,r){const i=r?r-1:Number.POSITIVE_INFINITY;let o=0;return function(r){return X(r)?(e.enter(n),s(r)):t(r)};function s(r){return X(r)&&o++<i?(e.consume(r),s):(e.exit(n),t(r))}}const te={tokenize:function(e){const t=e.attempt(this.parser.constructs.contentInitial,(function(n){if(null!==n)return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),ee(e,t,"linePrefix");e.consume(n)}),(function(t){return e.enter("paragraph"),r(t)}));let n;return t;function r(t){const r=e.enter("chunkText",{contentType:"text",previous:n});return n&&(n.next=r),n=r,i(t)}function i(t){return null===t?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(t)):W(t)?(e.consume(t),e.exit("chunkText"),r):(e.consume(t),i)}}},ne={tokenize:function(e){const t=this,n=[];let r,i,o,s=0;return a;function a(r){if(s<n.length){const i=n[s];return t.containerState=i[1],e.attempt(i[0].continuation,u,c)(r)}return c(r)}function u(e){if(s++,t.containerState._closeFlow){t.containerState._closeFlow=void 0,r&&T();const n=t.events.length;let i,o=n;for(;o--;)if("exit"===t.events[o][0]&&"chunkFlow"===t.events[o][1].type){i=t.events[o][1].end;break}g(s);let a=n;for(;a<t.events.length;)t.events[a][1].end=Object.assign({},i),a++;return M(t.events,o+1,0,t.events.slice(n)),t.events.length=a,c(e)}return a(e)}function c(i){if(s===n.length){if(!r)return h(i);if(r.currentConstruct&&r.currentConstruct.concrete)return d(i);t.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return t.containerState={},e.check(re,l,p)(i)}function l(e){return r&&T(),g(s),h(e)}function p(e){return t.parser.lazy[t.now().line]=s!==n.length,o=t.now().offset,d(e)}function h(n){return t.containerState={},e.attempt(re,f,d)(n)}function f(e){return s++,n.push([t.currentConstruct,t.containerState]),h(e)}function d(n){return null===n?(r&&T(),g(0),void e.consume(n)):(r=r||t.parser.flow(t.now()),e.enter("chunkFlow",{contentType:"flow",previous:i,_tokenizer:r}),m(n))}function m(n){return null===n?(E(e.exit("chunkFlow"),!0),g(0),void e.consume(n)):W(n)?(e.consume(n),E(e.exit("chunkFlow")),s=0,t.interrupt=void 0,a):(e.consume(n),m)}function E(e,n){const a=t.sliceStream(e);if(n&&a.push(null),e.previous=i,i&&(i.next=e),i=e,r.defineSkip(e.start),r.write(a),t.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<o&&(!r.events[e][1].end||r.events[e][1].end.offset>o))return;const n=t.events.length;let i,a,u=n;for(;u--;)if("exit"===t.events[u][0]&&"chunkFlow"===t.events[u][1].type){if(i){a=t.events[u][1].end;break}i=!0}for(g(s),e=n;e<t.events.length;)t.events[e][1].end=Object.assign({},a),e++;M(t.events,u+1,0,t.events.slice(n)),t.events.length=e}}function g(r){let i=n.length;for(;i-- >r;){const r=n[i];t.containerState=r[1],r[0].exit.call(t,e)}n.length=r}function T(){r.write([null]),i=void 0,r=void 0,t.containerState._closeFlow=void 0}}},re={tokenize:function(e,t,n){return ee(e,e.attempt(this.parser.constructs.document,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},ie={tokenize:function(e,t,n){return ee(e,(function(e){return null===e||W(e)?t(e):n(e)}),"linePrefix")},partial:!0};function oe(e){const t={};let n,r,i,o,s,a,u,c=-1;for(;++c<e.length;){for(;c in t;)c=t[c];if(n=e[c],c&&"chunkFlow"===n[1].type&&"listItemPrefix"===e[c-1][1].type&&(a=n[1]._tokenizer.events,i=0,i<a.length&&"lineEndingBlank"===a[i][1].type&&(i+=2),i<a.length&&"content"===a[i][1].type))for(;++i<a.length&&"content"!==a[i][1].type;)"chunkText"===a[i][1].type&&(a[i][1]._isInFirstContentOfListItem=!0,i++);if("enter"===n[0])n[1].contentType&&(Object.assign(t,se(e,c)),c=t[c],u=!0);else if(n[1]._container){for(i=c,r=void 0;i--&&(o=e[i],"lineEnding"===o[1].type||"lineEndingBlank"===o[1].type);)"enter"===o[0]&&(r&&(e[r][1].type="lineEndingBlank"),o[1].type="lineEnding",r=i);r&&(n[1].end=Object.assign({},e[r][1].start),s=e.slice(r,c),s.unshift(n),M(e,r,c-r+1,s))}}return!u}function se(e,t){const n=e[t][1],r=e[t][2];let i=t-1;const o=[],s=n._tokenizer||r.parser[n.contentType](n.start),a=s.events,u=[],c={};let l,p,h=-1,f=n,d=0,m=0;const E=[m];for(;f;){for(;e[++i][1]!==f;);o.push(i),f._tokenizer||(l=r.sliceStream(f),f.next||l.push(null),p&&s.defineSkip(f.start),f._isInFirstContentOfListItem&&(s._gfmTasklistFirstContentOfListItem=!0),s.write(l),f._isInFirstContentOfListItem&&(s._gfmTasklistFirstContentOfListItem=void 0)),p=f,f=f.next}for(f=n;++h<a.length;)"exit"===a[h][0]&&"enter"===a[h-1][0]&&a[h][1].type===a[h-1][1].type&&a[h][1].start.line!==a[h][1].end.line&&(m=h+1,E.push(m),f._tokenizer=void 0,f.previous=void 0,f=f.next);for(s.events=[],f?(f._tokenizer=void 0,f.previous=void 0):E.pop(),h=E.length;h--;){const t=a.slice(E[h],E[h+1]),n=o.pop();u.unshift([n,n+t.length-1]),M(e,n,2,t)}for(h=-1;++h<u.length;)c[d+u[h][0]]=d+u[h][1],d+=u[h][1]-u[h][0]-1;return c}const ae={tokenize:function(e,t){let n;return function(t){return e.enter("content"),n=e.enter("chunkContent",{contentType:"content"}),r(t)};function r(t){return null===t?i(t):W(t)?e.check(ue,o,i)(t):(e.consume(t),r)}function i(n){return e.exit("chunkContent"),e.exit("content"),t(n)}function o(t){return e.consume(t),e.exit("chunkContent"),n.next=e.enter("chunkContent",{contentType:"content",previous:n}),n=n.next,r}},resolve:function(e){return oe(e),e}},ue={tokenize:function(e,t,n){const r=this;return function(t){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ee(e,i,"linePrefix")};function i(i){if(null===i||W(i))return n(i);const o=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?t(i):e.interrupt(r.parser.constructs.flow,n,t)(i)}},partial:!0},ce={tokenize:function(e){const t=this,n=e.attempt(ie,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),t.currentConstruct=void 0,n;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,ee(e,e.attempt(this.parser.constructs.flow,r,e.attempt(ae,r)),"linePrefix")));return n;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),t.currentConstruct=void 0,n;e.consume(r)}}},le={resolveAll:de()},pe=fe("string"),he=fe("text");function fe(e){return{tokenize:function(t){const n=this,r=this.parser.constructs[e],i=t.attempt(r,o,s);return o;function o(e){return u(e)?i(e):s(e)}function s(e){if(null!==e)return t.enter("data"),t.consume(e),a;t.consume(e)}function a(e){return u(e)?(t.exit("data"),i(e)):(t.consume(e),a)}function u(e){if(null===e)return!0;const t=r[e];let i=-1;if(t)for(;++i<t.length;){const e=t[i];if(!e.previous||e.previous.call(n,n.previous))return!0}return!1}},resolveAll:de("text"===e?me:void 0)}}function de(e){return function(t,n){let r,i=-1;for(;++i<=t.length;)void 0===r?t[i]&&"data"===t[i][1].type&&(r=i,i++):t[i]&&"data"===t[i][1].type||(i!==r+2&&(t[r][1].end=t[i-1][1].end,t.splice(r+2,i-r-2),i=r+2),r=void 0);return e?e(t,n):t}}function me(e,t){let n=0;for(;++n<=e.length;)if((n===e.length||"lineEnding"===e[n][1].type)&&"data"===e[n-1][1].type){const r=e[n-1][1],i=t.sliceStream(r);let o,s=i.length,a=-1,u=0;for(;s--;){const e=i[s];if("string"==typeof e){for(a=e.length;32===e.charCodeAt(a-1);)u++,a--;if(a)break;a=-1}else if(-2===e)o=!0,u++;else if(-1!==e){s++;break}}if(u){const i={type:n===e.length||o||u<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-u,offset:r.end.offset-u,_index:r.start._index+s,_bufferIndex:s?a:r.start._bufferIndex+a},end:Object.assign({},r.end)};r.end=Object.assign({},i.start),r.start.offset===r.end.offset?Object.assign(r,i):(e.splice(n,0,["enter",i,t],["exit",i,t]),n+=2)}n++}return e}function Ee(e,t,n){const r=[];let i=-1;for(;++i<e.length;){const o=e[i].resolveAll;o&&!r.includes(o)&&(t=o(t,n),r.push(o))}return t}function ge(e,t,n){let r=Object.assign(n?Object.assign({},n):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const i={},o=[];let s=[],a=[],u=!0;const c={consume:function(e){W(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,A()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===s[r._index].length&&(r._bufferIndex=-1,r._index++)),l.previous=e,u=!0},enter:function(e,t){const n=t||{};return n.type=e,n.start=d(),l.events.push(["enter",n,l]),a.push(n),n},exit:function(e){const t=a.pop();return t.end=d(),l.events.push(["exit",t,l]),t},attempt:g((function(e,t){T(e,t.from)})),check:g(E),interrupt:g(E,{interrupt:!0})},l={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:f,sliceSerialize:function(e,t){return function(e,t){let n=-1;const r=[];let i;for(;++n<e.length;){const o=e[n];let s;if("string"==typeof o)s=o;else switch(o){case-5:s="\r";break;case-4:s="\n";break;case-3:s="\r\n";break;case-2:s=t?" ":"\t";break;case-1:if(!t&&i)continue;s=" ";break;default:s=String.fromCharCode(o)}i=-2===o,r.push(s)}return r.join("")}(f(e),t)},now:d,defineSkip:function(e){i[e.line]=e.column,A()},write:function(e){return s=P(s,e),function(){let e;for(;r._index<s.length;){const t=s[r._index];if("string"==typeof t)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<t.length;)m(t.charCodeAt(r._bufferIndex));else m(t)}}(),null!==s[s.length-1]?[]:(T(t,0),l.events=Ee(o,l.events,l),l.events)}};let p,h=t.tokenize.call(l,c);return t.resolveAll&&o.push(t),l;function f(e){return function(e,t){const n=t.start._index,r=t.start._bufferIndex,i=t.end._index,o=t.end._bufferIndex;let s;return n===i?s=[e[n].slice(r,o)]:(s=e.slice(n,i),r>-1&&(s[0]=s[0].slice(r)),o>0&&s.push(e[i].slice(0,o))),s}(s,e)}function d(){return Object.assign({},r)}function m(e){u=void 0,p=e,h=h(e)}function E(e,t){t.restore()}function g(e,t){return function(n,i,o){let s,p,h,f;return Array.isArray(n)?m(n):"tokenize"in n?m([n]):function(e){return function(t){const n=null!==t&&e[t],r=null!==t&&e.null;return m([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(r)?r:r?[r]:[]])(t)}}(n);function m(e){return s=e,p=0,0===e.length?o:E(e[p])}function E(e){return function(n){return f=function(){const e=d(),t=l.previous,n=l.currentConstruct,i=l.events.length,o=Array.from(a);return{restore:function(){r=e,l.previous=t,l.currentConstruct=n,l.events.length=i,a=o,A()},from:i}}(),h=e,e.partial||(l.currentConstruct=e),e.name&&l.parser.constructs.disable.null.includes(e.name)?T():e.tokenize.call(t?Object.assign(Object.create(l),t):l,c,g,T)(n)}}function g(t){return u=!0,e(h,f),i}function T(e){return u=!0,f.restore(),++p<s.length?E(s[p]):o}}}function T(e,t){e.resolveAll&&!o.includes(e)&&o.push(e),e.resolve&&M(l.events,t,l.events.length-t,e.resolve(l.events.slice(t),l)),e.resolveTo&&(l.events=e.resolveTo(l.events,l))}function A(){r.line in i&&r.column<2&&(r.column=i[r.line],r.offset+=i[r.line]-1)}}const Te={name:"thematicBreak",tokenize:function(e,t,n){let r,i=0;return function(t){return e.enter("thematicBreak"),r=t,o(t)};function o(a){return a===r?(e.enter("thematicBreakSequence"),s(a)):X(a)?ee(e,o,"whitespace")(a):i<3||null!==a&&!W(a)?n(a):(e.exit("thematicBreak"),t(a))}function s(t){return t===r?(e.consume(t),i++,s):(e.exit("thematicBreakSequence"),o(t))}}},Ae={name:"list",tokenize:function(e,t,n){const r=this,i=r.events[r.events.length-1];let o=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0,s=0;return function(t){const i=r.containerState.type||(42===t||43===t||45===t?"listUnordered":"listOrdered");if("listUnordered"===i?!r.containerState.marker||t===r.containerState.marker:q(t)){if(r.containerState.type||(r.containerState.type=i,e.enter(i,{_container:!0})),"listUnordered"===i)return e.enter("listItemPrefix"),42===t||45===t?e.check(Te,n,u)(t):u(t);if(!r.interrupt||49===t)return e.enter("listItemPrefix"),e.enter("listItemValue"),a(t)}return n(t)};function a(t){return q(t)&&++s<10?(e.consume(t),a):(!r.interrupt||s<2)&&(r.containerState.marker?t===r.containerState.marker:41===t||46===t)?(e.exit("listItemValue"),u(t)):n(t)}function u(t){return e.enter("listItemMarker"),e.consume(t),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||t,e.check(ie,r.interrupt?n:c,e.attempt(Ce,p,l))}function c(e){return r.containerState.initialBlankLine=!0,o++,p(e)}function l(t){return X(t)?(e.enter("listItemPrefixWhitespace"),e.consume(t),e.exit("listItemPrefixWhitespace"),p):n(t)}function p(n){return r.containerState.size=o+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,t(n)}},continuation:{tokenize:function(e,t,n){const r=this;return r.containerState._closeFlow=void 0,e.check(ie,(function(n){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,ee(e,t,"listItemIndent",r.containerState.size+1)(n)}),(function(n){return r.containerState.furtherBlankLines||!X(n)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,i(n)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(_e,t,i)(n))}));function i(i){return r.containerState._closeFlow=!0,r.interrupt=void 0,ee(e,e.attempt(Ae,t,n),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(i)}}},exit:function(e){e.exit(this.containerState.type)}},Ce={tokenize:function(e,t,n){const r=this;return ee(e,(function(e){const i=r.events[r.events.length-1];return!X(e)&&i&&"listItemPrefixWhitespace"===i[1].type?t(e):n(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},_e={tokenize:function(e,t,n){const r=this;return ee(e,(function(e){const i=r.events[r.events.length-1];return i&&"listItemIndent"===i[1].type&&i[2].sliceSerialize(i[1],!0).length===r.containerState.size?t(e):n(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},De={name:"blockQuote",tokenize:function(e,t,n){const r=this;return function(t){if(62===t){const n=r.containerState;return n.open||(e.enter("blockQuote",{_container:!0}),n.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(t),e.exit("blockQuoteMarker"),i}return n(t)};function i(n){return X(n)?(e.enter("blockQuotePrefixWhitespace"),e.consume(n),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),t):(e.exit("blockQuotePrefix"),t(n))}},continuation:{tokenize:function(e,t,n){return ee(e,e.attempt(De,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function ke(e,t,n,r,i,o,s,a,u){const c=u||Number.POSITIVE_INFINITY;let l=0;return function(t){return 60===t?(e.enter(r),e.enter(i),e.enter(o),e.consume(t),e.exit(o),p):null===t||41===t||Y(t)?n(t):(e.enter(r),e.enter(s),e.enter(a),e.enter("chunkString",{contentType:"string"}),d(t))};function p(n){return 62===n?(e.enter(o),e.consume(n),e.exit(o),e.exit(i),e.exit(r),t):(e.enter(a),e.enter("chunkString",{contentType:"string"}),h(n))}function h(t){return 62===t?(e.exit("chunkString"),e.exit(a),p(t)):null===t||60===t||W(t)?n(t):(e.consume(t),92===t?f:h)}function f(t){return 60===t||62===t||92===t?(e.consume(t),h):h(t)}function d(i){return 40===i?++l>c?n(i):(e.consume(i),d):41===i?l--?(e.consume(i),d):(e.exit("chunkString"),e.exit(a),e.exit(s),e.exit(r),t(i)):null===i||Q(i)?l?n(i):(e.exit("chunkString"),e.exit(a),e.exit(s),e.exit(r),t(i)):Y(i)?n(i):(e.consume(i),92===i?m:d)}function m(t){return 40===t||41===t||92===t?(e.consume(t),d):d(t)}}function Ne(e,t,n,r,i,o){const s=this;let a,u=0;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),e.enter(o),c};function c(p){return null===p||91===p||93===p&&!a||94===p&&!u&&"_hiddenFootnoteSupport"in s.parser.constructs||u>999?n(p):93===p?(e.exit(o),e.enter(i),e.consume(p),e.exit(i),e.exit(r),t):W(p)?(e.enter("lineEnding"),e.consume(p),e.exit("lineEnding"),c):(e.enter("chunkString",{contentType:"string"}),l(p))}function l(t){return null===t||91===t||93===t||W(t)||u++>999?(e.exit("chunkString"),c(t)):(e.consume(t),a=a||!X(t),92===t?p:l)}function p(t){return 91===t||92===t||93===t?(e.consume(t),u++,l):l(t)}}function ye(e,t,n,r,i,o){let s;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),s=40===t?41:t,a};function a(n){return n===s?(e.enter(i),e.consume(n),e.exit(i),e.exit(r),t):(e.enter(o),u(n))}function u(t){return t===s?(e.exit(o),a(s)):null===t?n(t):W(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ee(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),c(t))}function c(t){return t===s||null===t||W(t)?(e.exit("chunkString"),u(t)):(e.consume(t),92===t?l:c)}function l(t){return t===s||92===t?(e.consume(t),c):c(t)}}function be(e,t){let n;return function r(i){return W(i)?(e.enter("lineEnding"),e.consume(i),e.exit("lineEnding"),n=!0,r):X(i)?ee(e,r,n?"linePrefix":"lineSuffix")(i):t(i)}}function Se(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const xe={name:"definition",tokenize:function(e,t,n){const r=this;let i;return function(t){return e.enter("definition"),Ne.call(r,e,o,n,"definitionLabel","definitionLabelMarker","definitionLabelString")(t)};function o(t){return i=Se(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),be(e,ke(e,e.attempt(Oe,ee(e,s,"whitespace"),ee(e,s,"whitespace")),n,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):n(t)}function s(o){return null===o||W(o)?(e.exit("definition"),r.parser.defined.includes(i)||r.parser.defined.push(i),t(o)):n(o)}}},Oe={tokenize:function(e,t,n){return function(t){return Q(t)?be(e,r)(t):n(t)};function r(t){return 34===t||39===t||40===t?ye(e,ee(e,i,"whitespace"),n,"definitionTitle","definitionTitleMarker","definitionTitleString")(t):n(t)}function i(e){return null===e||W(e)?t(e):n(e)}},partial:!0},Fe={name:"codeIndented",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("codeIndented"),ee(e,i,"linePrefix",5)(t)};function i(e){const t=r.events[r.events.length-1];return t&&"linePrefix"===t[1].type&&t[2].sliceSerialize(t[1],!0).length>=4?o(e):n(e)}function o(t){return null===t?a(t):W(t)?e.attempt(Ie,o,a)(t):(e.enter("codeFlowValue"),s(t))}function s(t){return null===t||W(t)?(e.exit("codeFlowValue"),o(t)):(e.consume(t),s)}function a(n){return e.exit("codeIndented"),t(n)}}},Ie={tokenize:function(e,t,n){const r=this;return i;function i(t){return r.parser.lazy[r.now().line]?n(t):W(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i):ee(e,o,"linePrefix",5)(t)}function o(e){const o=r.events[r.events.length-1];return o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?t(e):W(e)?i(e):n(e)}},partial:!0},ve={name:"headingAtx",tokenize:function(e,t,n){const r=this;let i=0;return function(t){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),o(t)};function o(a){return 35===a&&i++<6?(e.consume(a),o):null===a||Q(a)?(e.exit("atxHeadingSequence"),r.interrupt?t(a):s(a)):n(a)}function s(n){return 35===n?(e.enter("atxHeadingSequence"),a(n)):null===n||W(n)?(e.exit("atxHeading"),t(n)):X(n)?ee(e,s,"whitespace")(n):(e.enter("atxHeadingText"),u(n))}function a(t){return 35===t?(e.consume(t),a):(e.exit("atxHeadingSequence"),s(t))}function u(t){return null===t||35===t||Q(t)?(e.exit("atxHeadingText"),s(t)):(e.consume(t),u)}},resolve:function(e,t){let n,r,i=e.length-2,o=3;return"whitespace"===e[o][1].type&&(o+=2),i-2>o&&"whitespace"===e[i][1].type&&(i-=2),"atxHeadingSequence"===e[i][1].type&&(o===i-1||i-4>o&&"whitespace"===e[i-2][1].type)&&(i-=o+1===i?2:4),i>o&&(n={type:"atxHeadingText",start:e[o][1].start,end:e[i][1].end},r={type:"chunkText",start:e[o][1].start,end:e[i][1].end,contentType:"text"},M(e,o,i-o+1,[["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]])),e}},Le={name:"setextUnderline",tokenize:function(e,t,n){const r=this;let i,o,s=r.events.length;for(;s--;)if("lineEnding"!==r.events[s][1].type&&"linePrefix"!==r.events[s][1].type&&"content"!==r.events[s][1].type){o="paragraph"===r.events[s][1].type;break}return function(t){return r.parser.lazy[r.now().line]||!r.interrupt&&!o?n(t):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),i=t,a(t))};function a(t){return t===i?(e.consume(t),a):(e.exit("setextHeadingLineSequence"),ee(e,u,"lineSuffix")(t))}function u(r){return null===r||W(r)?(e.exit("setextHeadingLine"),t(r)):n(r)}},resolveTo:function(e,t){let n,r,i,o=e.length;for(;o--;)if("enter"===e[o][0]){if("content"===e[o][1].type){n=o;break}"paragraph"===e[o][1].type&&(r=o)}else"content"===e[o][1].type&&e.splice(o,1),i||"definition"!==e[o][1].type||(i=o);const s={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",i?(e.splice(r,0,["enter",s,t]),e.splice(i+1,0,["exit",e[n][1],t]),e[n][1].end=Object.assign({},e[i][1].end)):e[n][1]=s,e.push(["exit",s,t]),e}},Re=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Me=["pre","script","style","textarea"],Pe={name:"htmlFlow",tokenize:function(e,t,n){const r=this;let i,o,s,a,u;return function(t){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(t),c};function c(a){return 33===a?(e.consume(a),l):47===a?(e.consume(a),f):63===a?(e.consume(a),i=3,r.interrupt?t:R):G(a)?(e.consume(a),s=String.fromCharCode(a),o=!0,d):n(a)}function l(o){return 45===o?(e.consume(o),i=2,p):91===o?(e.consume(o),i=5,s="CDATA[",a=0,h):G(o)?(e.consume(o),i=4,r.interrupt?t:R):n(o)}function p(i){return 45===i?(e.consume(i),r.interrupt?t:R):n(i)}function h(i){return i===s.charCodeAt(a++)?(e.consume(i),a===s.length?r.interrupt?t:b:h):n(i)}function f(t){return G(t)?(e.consume(t),s=String.fromCharCode(t),d):n(t)}function d(a){return null===a||47===a||62===a||Q(a)?47!==a&&o&&Me.includes(s.toLowerCase())?(i=1,r.interrupt?t(a):b(a)):Re.includes(s.toLowerCase())?(i=6,47===a?(e.consume(a),m):r.interrupt?t(a):b(a)):(i=7,r.interrupt&&!r.parser.lazy[r.now().line]?n(a):o?g(a):E(a)):45===a||z(a)?(e.consume(a),s+=String.fromCharCode(a),d):n(a)}function m(i){return 62===i?(e.consume(i),r.interrupt?t:b):n(i)}function E(t){return X(t)?(e.consume(t),E):N(t)}function g(t){return 47===t?(e.consume(t),N):58===t||95===t||G(t)?(e.consume(t),T):X(t)?(e.consume(t),g):N(t)}function T(t){return 45===t||46===t||58===t||95===t||z(t)?(e.consume(t),T):A(t)}function A(t){return 61===t?(e.consume(t),C):X(t)?(e.consume(t),A):g(t)}function C(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),u=t,_):X(t)?(e.consume(t),C):(u=null,D(t))}function _(t){return null===t||W(t)?n(t):t===u?(e.consume(t),k):(e.consume(t),_)}function D(t){return null===t||34===t||39===t||60===t||61===t||62===t||96===t||Q(t)?A(t):(e.consume(t),D)}function k(e){return 47===e||62===e||X(e)?g(e):n(e)}function N(t){return 62===t?(e.consume(t),y):n(t)}function y(t){return X(t)?(e.consume(t),y):null===t||W(t)?b(t):n(t)}function b(t){return 45===t&&2===i?(e.consume(t),F):60===t&&1===i?(e.consume(t),I):62===t&&4===i?(e.consume(t),M):63===t&&3===i?(e.consume(t),R):93===t&&5===i?(e.consume(t),L):!W(t)||6!==i&&7!==i?null===t||W(t)?S(t):(e.consume(t),b):e.check(we,M,S)(t)}function S(t){return e.exit("htmlFlowData"),x(t)}function x(t){return null===t?P(t):W(t)?e.attempt({tokenize:O,partial:!0},x,P)(t):(e.enter("htmlFlowData"),b(t))}function O(e,t,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i};function i(e){return r.parser.lazy[r.now().line]?n(e):t(e)}}function F(t){return 45===t?(e.consume(t),R):b(t)}function I(t){return 47===t?(e.consume(t),s="",v):b(t)}function v(t){return 62===t&&Me.includes(s.toLowerCase())?(e.consume(t),M):G(t)&&s.length<8?(e.consume(t),s+=String.fromCharCode(t),v):b(t)}function L(t){return 93===t?(e.consume(t),R):b(t)}function R(t){return 62===t?(e.consume(t),M):45===t&&2===i?(e.consume(t),R):b(t)}function M(t){return null===t||W(t)?(e.exit("htmlFlowData"),P(t)):(e.consume(t),M)}function P(n){return e.exit("htmlFlow"),t(n)}},resolveTo:function(e){let t=e.length;for(;t--&&("enter"!==e[t][0]||"htmlFlow"!==e[t][1].type););return t>1&&"linePrefix"===e[t-2][1].type&&(e[t][1].start=e[t-2][1].start,e[t+1][1].start=e[t-2][1].start,e.splice(t-2,2)),e},concrete:!0},we={tokenize:function(e,t,n){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(ie,t,n)}},partial:!0},Be={name:"codeFenced",tokenize:function(e,t,n){const r=this,i={tokenize:function(e,t,n){let r=0;return ee(e,(function(t){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),i(t)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function i(t){return t===u?(e.consume(t),r++,i):r<c?n(t):(e.exit("codeFencedFenceSequence"),ee(e,o,"whitespace")(t))}function o(r){return null===r||W(r)?(e.exit("codeFencedFence"),t(r)):n(r)}},partial:!0},o={tokenize:function(e,t,n){const r=this;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i};function i(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0},s=this.events[this.events.length-1],a=s&&"linePrefix"===s[1].type?s[2].sliceSerialize(s[1],!0).length:0;let u,c=0;return function(t){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),u=t,l(t)};function l(t){return t===u?(e.consume(t),c++,l):(e.exit("codeFencedFenceSequence"),c<3?n(t):ee(e,p,"whitespace")(t))}function p(t){return null===t||W(t)?m(t):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),h(t))}function h(t){return null===t||Q(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),ee(e,f,"whitespace")(t)):96===t&&t===u?n(t):(e.consume(t),h)}function f(t){return null===t||W(t)?m(t):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),d(t))}function d(t){return null===t||W(t)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),m(t)):96===t&&t===u?n(t):(e.consume(t),d)}function m(n){return e.exit("codeFencedFence"),r.interrupt?t(n):E(n)}function E(t){return null===t?T(t):W(t)?e.attempt(o,e.attempt(i,T,a?ee(e,E,"linePrefix",a+1):E),T)(t):(e.enter("codeFlowValue"),g(t))}function g(t){return null===t||W(t)?(e.exit("codeFlowValue"),E(t)):(e.consume(t),g)}function T(n){return e.exit("codeFenced"),t(n)}},concrete:!0},He={AEli:"Æ",AElig:"Æ",AM:"&",AMP:"&",Aacut:"Á",Aacute:"Á",Abreve:"Ă",Acir:"Â",Acirc:"Â",Acy:"А",Afr:"𝔄",Agrav:"À",Agrave:"À",Alpha:"Α",Amacr:"Ā",And:"⩓",Aogon:"Ą",Aopf:"𝔸",ApplyFunction:"⁡",Arin:"Å",Aring:"Å",Ascr:"𝒜",Assign:"≔",Atild:"Ã",Atilde:"Ã",Aum:"Ä",Auml:"Ä",Backslash:"∖",Barv:"⫧",Barwed:"⌆",Bcy:"Б",Because:"∵",Bernoullis:"ℬ",Beta:"Β",Bfr:"𝔅",Bopf:"𝔹",Breve:"˘",Bscr:"ℬ",Bumpeq:"≎",CHcy:"Ч",COP:"©",COPY:"©",Cacute:"Ć",Cap:"⋒",CapitalDifferentialD:"ⅅ",Cayleys:"ℭ",Ccaron:"Č",Ccedi:"Ç",Ccedil:"Ç",Ccirc:"Ĉ",Cconint:"∰",Cdot:"Ċ",Cedilla:"¸",CenterDot:"·",Cfr:"ℭ",Chi:"Χ",CircleDot:"⊙",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",Colon:"∷",Colone:"⩴",Congruent:"≡",Conint:"∯",ContourIntegral:"∮",Copf:"ℂ",Coproduct:"∐",CounterClockwiseContourIntegral:"∳",Cross:"⨯",Cscr:"𝒞",Cup:"⋓",CupCap:"≍",DD:"ⅅ",DDotrahd:"⤑",DJcy:"Ђ",DScy:"Ѕ",DZcy:"Џ",Dagger:"‡",Darr:"↡",Dashv:"⫤",Dcaron:"Ď",Dcy:"Д",Del:"∇",Delta:"Δ",Dfr:"𝔇",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",Diamond:"⋄",DifferentialD:"ⅆ",Dopf:"𝔻",Dot:"¨",DotDot:"⃜",DotEqual:"≐",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",Downarrow:"⇓",Dscr:"𝒟",Dstrok:"Đ",ENG:"Ŋ",ET:"Ð",ETH:"Ð",Eacut:"É",Eacute:"É",Ecaron:"Ě",Ecir:"Ê",Ecirc:"Ê",Ecy:"Э",Edot:"Ė",Efr:"𝔈",Egrav:"È",Egrave:"È",Element:"∈",Emacr:"Ē",EmptySmallSquare:"◻",EmptyVerySmallSquare:"▫",Eogon:"Ę",Eopf:"𝔼",Epsilon:"Ε",Equal:"⩵",EqualTilde:"≂",Equilibrium:"⇌",Escr:"ℰ",Esim:"⩳",Eta:"Η",Eum:"Ë",Euml:"Ë",Exists:"∃",ExponentialE:"ⅇ",Fcy:"Ф",Ffr:"𝔉",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",Fopf:"𝔽",ForAll:"∀",Fouriertrf:"ℱ",Fscr:"ℱ",GJcy:"Ѓ",G:">",GT:">",Gamma:"Γ",Gammad:"Ϝ",Gbreve:"Ğ",Gcedil:"Ģ",Gcirc:"Ĝ",Gcy:"Г",Gdot:"Ġ",Gfr:"𝔊",Gg:"⋙",Gopf:"𝔾",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",Gt:"≫",HARDcy:"Ъ",Hacek:"ˇ",Hat:"^",Hcirc:"Ĥ",Hfr:"ℌ",HilbertSpace:"ℋ",Hopf:"ℍ",HorizontalLine:"─",Hscr:"ℋ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",IEcy:"Е",IJlig:"Ĳ",IOcy:"Ё",Iacut:"Í",Iacute:"Í",Icir:"Î",Icirc:"Î",Icy:"И",Idot:"İ",Ifr:"ℑ",Igrav:"Ì",Igrave:"Ì",Im:"ℑ",Imacr:"Ī",ImaginaryI:"ⅈ",Implies:"⇒",Int:"∬",Integral:"∫",Intersection:"⋂",InvisibleComma:"⁣",InvisibleTimes:"⁢",Iogon:"Į",Iopf:"𝕀",Iota:"Ι",Iscr:"ℐ",Itilde:"Ĩ",Iukcy:"І",Ium:"Ï",Iuml:"Ï",Jcirc:"Ĵ",Jcy:"Й",Jfr:"𝔍",Jopf:"𝕁",Jscr:"𝒥",Jsercy:"Ј",Jukcy:"Є",KHcy:"Х",KJcy:"Ќ",Kappa:"Κ",Kcedil:"Ķ",Kcy:"К",Kfr:"𝔎",Kopf:"𝕂",Kscr:"𝒦",LJcy:"Љ",L:"<",LT:"<",Lacute:"Ĺ",Lambda:"Λ",Lang:"⟪",Laplacetrf:"ℒ",Larr:"↞",Lcaron:"Ľ",Lcedil:"Ļ",Lcy:"Л",LeftAngleBracket:"⟨",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",LeftRightArrow:"↔",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",Leftarrow:"⇐",Leftrightarrow:"⇔",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",LessLess:"⪡",LessSlantEqual:"⩽",LessTilde:"≲",Lfr:"𝔏",Ll:"⋘",Lleftarrow:"⇚",Lmidot:"Ŀ",LongLeftArrow:"⟵",LongLeftRightArrow:"⟷",LongRightArrow:"⟶",Longleftarrow:"⟸",Longleftrightarrow:"⟺",Longrightarrow:"⟹",Lopf:"𝕃",LowerLeftArrow:"↙",LowerRightArrow:"↘",Lscr:"ℒ",Lsh:"↰",Lstrok:"Ł",Lt:"≪",Map:"⤅",Mcy:"М",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",MinusPlus:"∓",Mopf:"𝕄",Mscr:"ℳ",Mu:"Μ",NJcy:"Њ",Nacute:"Ń",Ncaron:"Ň",Ncedil:"Ņ",Ncy:"Н",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",Nfr:"𝔑",NoBreak:"⁠",NonBreakingSpace:" ",Nopf:"ℕ",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",Nscr:"𝒩",Ntild:"Ñ",Ntilde:"Ñ",Nu:"Ν",OElig:"Œ",Oacut:"Ó",Oacute:"Ó",Ocir:"Ô",Ocirc:"Ô",Ocy:"О",Odblac:"Ő",Ofr:"𝔒",Ograv:"Ò",Ograve:"Ò",Omacr:"Ō",Omega:"Ω",Omicron:"Ο",Oopf:"𝕆",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",Or:"⩔",Oscr:"𝒪",Oslas:"Ø",Oslash:"Ø",Otild:"Õ",Otilde:"Õ",Otimes:"⨷",Oum:"Ö",Ouml:"Ö",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",PartialD:"∂",Pcy:"П",Pfr:"𝔓",Phi:"Φ",Pi:"Π",PlusMinus:"±",Poincareplane:"ℌ",Popf:"ℙ",Pr:"⪻",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",Prime:"″",Product:"∏",Proportion:"∷",Proportional:"∝",Pscr:"𝒫",Psi:"Ψ",QUO:'"',QUOT:'"',Qfr:"𝔔",Qopf:"ℚ",Qscr:"𝒬",RBarr:"⤐",RE:"®",REG:"®",Racute:"Ŕ",Rang:"⟫",Rarr:"↠",Rarrtl:"⤖",Rcaron:"Ř",Rcedil:"Ŗ",Rcy:"Р",Re:"ℜ",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",Rfr:"ℜ",Rho:"Ρ",RightAngleBracket:"⟩",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",Rightarrow:"⇒",Ropf:"ℝ",RoundImplies:"⥰",Rrightarrow:"⇛",Rscr:"ℛ",Rsh:"↱",RuleDelayed:"⧴",SHCHcy:"Щ",SHcy:"Ш",SOFTcy:"Ь",Sacute:"Ś",Sc:"⪼",Scaron:"Š",Scedil:"Ş",Scirc:"Ŝ",Scy:"С",Sfr:"𝔖",ShortDownArrow:"↓",ShortLeftArrow:"←",ShortRightArrow:"→",ShortUpArrow:"↑",Sigma:"Σ",SmallCircle:"∘",Sopf:"𝕊",Sqrt:"√",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",Sscr:"𝒮",Star:"⋆",Sub:"⋐",Subset:"⋐",SubsetEqual:"⊆",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",SuchThat:"∋",Sum:"∑",Sup:"⋑",Superset:"⊃",SupersetEqual:"⊇",Supset:"⋑",THOR:"Þ",THORN:"Þ",TRADE:"™",TSHcy:"Ћ",TScy:"Ц",Tab:"\t",Tau:"Τ",Tcaron:"Ť",Tcedil:"Ţ",Tcy:"Т",Tfr:"𝔗",Therefore:"∴",Theta:"Θ",ThickSpace:"  ",ThinSpace:" ",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",Topf:"𝕋",TripleDot:"⃛",Tscr:"𝒯",Tstrok:"Ŧ",Uacut:"Ú",Uacute:"Ú",Uarr:"↟",Uarrocir:"⥉",Ubrcy:"Ў",Ubreve:"Ŭ",Ucir:"Û",Ucirc:"Û",Ucy:"У",Udblac:"Ű",Ufr:"𝔘",Ugrav:"Ù",Ugrave:"Ù",Umacr:"Ū",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",Uopf:"𝕌",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",UpDownArrow:"↕",UpEquilibrium:"⥮",UpTee:"⊥",UpTeeArrow:"↥",Uparrow:"⇑",Updownarrow:"⇕",UpperLeftArrow:"↖",UpperRightArrow:"↗",Upsi:"ϒ",Upsilon:"Υ",Uring:"Ů",Uscr:"𝒰",Utilde:"Ũ",Uum:"Ü",Uuml:"Ü",VDash:"⊫",Vbar:"⫫",Vcy:"В",Vdash:"⊩",Vdashl:"⫦",Vee:"⋁",Verbar:"‖",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",Vopf:"𝕍",Vscr:"𝒱",Vvdash:"⊪",Wcirc:"Ŵ",Wedge:"⋀",Wfr:"𝔚",Wopf:"𝕎",Wscr:"𝒲",Xfr:"𝔛",Xi:"Ξ",Xopf:"𝕏",Xscr:"𝒳",YAcy:"Я",YIcy:"Ї",YUcy:"Ю",Yacut:"Ý",Yacute:"Ý",Ycirc:"Ŷ",Ycy:"Ы",Yfr:"𝔜",Yopf:"𝕐",Yscr:"𝒴",Yuml:"Ÿ",ZHcy:"Ж",Zacute:"Ź",Zcaron:"Ž",Zcy:"З",Zdot:"Ż",ZeroWidthSpace:"​",Zeta:"Ζ",Zfr:"ℨ",Zopf:"ℤ",Zscr:"𝒵",aacut:"á",aacute:"á",abreve:"ă",ac:"∾",acE:"∾̳",acd:"∿",acir:"â",acirc:"â",acut:"´",acute:"´",acy:"а",aeli:"æ",aelig:"æ",af:"⁡",afr:"𝔞",agrav:"à",agrave:"à",alefsym:"ℵ",aleph:"ℵ",alpha:"α",amacr:"ā",amalg:"⨿",am:"&",amp:"&",and:"∧",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",aopf:"𝕒",ap:"≈",apE:"⩰",apacir:"⩯",ape:"≊",apid:"≋",apos:"'",approx:"≈",approxeq:"≊",arin:"å",aring:"å",ascr:"𝒶",ast:"*",asymp:"≈",asympeq:"≍",atild:"ã",atilde:"ã",aum:"ä",auml:"ä",awconint:"∳",awint:"⨑",bNot:"⫭",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",barvee:"⊽",barwed:"⌅",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",beta:"β",beth:"ℶ",between:"≬",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxDL:"╗",boxDR:"╔",boxDl:"╖",boxDr:"╓",boxH:"═",boxHD:"╦",boxHU:"╩",boxHd:"╤",boxHu:"╧",boxUL:"╝",boxUR:"╚",boxUl:"╜",boxUr:"╙",boxV:"║",boxVH:"╬",boxVL:"╣",boxVR:"╠",boxVh:"╫",boxVl:"╢",boxVr:"╟",boxbox:"⧉",boxdL:"╕",boxdR:"╒",boxdl:"┐",boxdr:"┌",boxh:"─",boxhD:"╥",boxhU:"╨",boxhd:"┬",boxhu:"┴",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxuL:"╛",boxuR:"╘",boxul:"┘",boxur:"└",boxv:"│",boxvH:"╪",boxvL:"╡",boxvR:"╞",boxvh:"┼",boxvl:"┤",boxvr:"├",bprime:"‵",breve:"˘",brvba:"¦",brvbar:"¦",bscr:"𝒷",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",bumpeq:"≏",cacute:"ć",cap:"∩",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",caps:"∩︀",caret:"⁁",caron:"ˇ",ccaps:"⩍",ccaron:"č",ccedi:"ç",ccedil:"ç",ccirc:"ĉ",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",cedi:"¸",cedil:"¸",cemptyv:"⦲",cen:"¢",cent:"¢",centerdot:"·",cfr:"𝔠",chcy:"ч",check:"✓",checkmark:"✓",chi:"χ",cir:"○",cirE:"⧃",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledR:"®",circledS:"Ⓢ",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",clubs:"♣",clubsuit:"♣",colon:":",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",conint:"∮",copf:"𝕔",coprod:"∐",cop:"©",copy:"©",copysr:"℗",crarr:"↵",cross:"✗",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",cupbrcap:"⩈",cupcap:"⩆",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curre:"¤",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dArr:"⇓",dHar:"⥥",dagger:"†",daleth:"ℸ",darr:"↓",dash:"‐",dashv:"⊣",dbkarow:"⤏",dblac:"˝",dcaron:"ď",dcy:"д",dd:"ⅆ",ddagger:"‡",ddarr:"⇊",ddotseq:"⩷",de:"°",deg:"°",delta:"δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",dharl:"⇃",dharr:"⇂",diam:"⋄",diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",digamma:"ϝ",disin:"⋲",div:"÷",divid:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",dot:"˙",doteq:"≐",doteqdot:"≑",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",downarrow:"↓",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",dscy:"ѕ",dsol:"⧶",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",dzigrarr:"⟿",eDDot:"⩷",eDot:"≑",eacut:"é",eacute:"é",easter:"⩮",ecaron:"ě",ecir:"ê",ecirc:"ê",ecolon:"≕",ecy:"э",edot:"ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",eg:"⪚",egrav:"è",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",empty:"∅",emptyset:"∅",emptyv:"∅",emsp13:" ",emsp14:" ",emsp:" ",eng:"ŋ",ensp:" ",eogon:"ę",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",equals:"=",equest:"≟",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erDot:"≓",erarr:"⥱",escr:"ℯ",esdot:"≐",esim:"≂",eta:"η",et:"ð",eth:"ð",eum:"ë",euml:"ë",euro:"€",excl:"!",exist:"∃",expectation:"ℰ",exponentiale:"ⅇ",fallingdotseq:"≒",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",filig:"ﬁ",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",forall:"∀",fork:"⋔",forkv:"⫙",fpartint:"⨍",frac1:"¼",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac3:"¾",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",gE:"≧",gEl:"⪌",gacute:"ǵ",gamma:"γ",gammad:"ϝ",gap:"⪆",gbreve:"ğ",gcirc:"ĝ",gcy:"г",gdot:"ġ",ge:"≥",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",gg:"≫",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",gl:"≷",glE:"⪒",gla:"⪥",glj:"⪤",gnE:"≩",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",grave:"`",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",g:">",gt:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",hArr:"⇔",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",harr:"↔",harrcir:"⥈",harrw:"↭",hbar:"ℏ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",horbar:"―",hscr:"𝒽",hslash:"ℏ",hstrok:"ħ",hybull:"⁃",hyphen:"‐",iacut:"í",iacute:"í",ic:"⁣",icir:"î",icirc:"î",icy:"и",iecy:"е",iexc:"¡",iexcl:"¡",iff:"⇔",ifr:"𝔦",igrav:"ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",imacr:"ī",image:"ℑ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",intcal:"⊺",integers:"ℤ",intercal:"⊺",intlarhk:"⨗",intprod:"⨼",iocy:"ё",iogon:"į",iopf:"𝕚",iota:"ι",iprod:"⨼",iques:"¿",iquest:"¿",iscr:"𝒾",isin:"∈",isinE:"⋹",isindot:"⋵",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",iukcy:"і",ium:"ï",iuml:"ï",jcirc:"ĵ",jcy:"й",jfr:"𝔧",jmath:"ȷ",jopf:"𝕛",jscr:"𝒿",jsercy:"ј",jukcy:"є",kappa:"κ",kappav:"ϰ",kcedil:"ķ",kcy:"к",kfr:"𝔨",kgreen:"ĸ",khcy:"х",kjcy:"ќ",kopf:"𝕜",kscr:"𝓀",lAarr:"⇚",lArr:"⇐",lAtail:"⤛",lBarr:"⤎",lE:"≦",lEg:"⪋",lHar:"⥢",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",lang:"⟨",langd:"⦑",langle:"⟨",lap:"⪅",laqu:"«",laquo:"«",larr:"←",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",late:"⪭",lates:"⪭︀",lbarr:"⤌",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",lcedil:"ļ",lceil:"⌈",lcub:"{",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",leftarrow:"←",leftarrowtail:"↢",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",leftthreetimes:"⋋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",lessgtr:"≶",lesssim:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",lg:"≶",lgE:"⪑",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",ll:"≪",llarr:"⇇",llcorner:"⌞",llhard:"⥫",lltri:"◺",lmidot:"ŀ",lmoust:"⎰",lmoustache:"⎰",lnE:"≨",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",longleftrightarrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",l:"<",lt:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltrPar:"⦖",ltri:"◃",ltrie:"⊴",ltrif:"◂",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",mDDot:"∺",mac:"¯",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",mdash:"—",measuredangle:"∡",mfr:"𝔪",mho:"℧",micr:"µ",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middo:"·",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",mp:"∓",mscr:"𝓂",mstpos:"∾",mu:"μ",multimap:"⊸",mumap:"⊸",nGg:"⋙̸",nGt:"≫⃒",nGtv:"≫̸",nLeftarrow:"⇍",nLeftrightarrow:"⇎",nLl:"⋘̸",nLt:"≪⃒",nLtv:"≪̸",nRightarrow:"⇏",nVDash:"⊯",nVdash:"⊮",nabla:"∇",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbs:" ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",ndash:"–",ne:"≠",neArr:"⇗",nearhk:"⤤",nearr:"↗",nearrow:"↗",nedot:"≐̸",nequiv:"≢",nesear:"⤨",nesim:"≂̸",nexist:"∄",nexists:"∄",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",ngsim:"≵",ngt:"≯",ngtr:"≯",nhArr:"⇎",nharr:"↮",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",nlArr:"⇍",nlE:"≦̸",nlarr:"↚",nldr:"‥",nle:"≰",nleftarrow:"↚",nleftrightarrow:"↮",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nlsim:"≴",nlt:"≮",nltri:"⋪",nltrie:"⋬",nmid:"∤",nopf:"𝕟",no:"¬",not:"¬",notin:"∉",notinE:"⋹̸",notindot:"⋵̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrArr:"⇏",nrarr:"↛",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntild:"ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",num:"#",numero:"№",numsp:" ",nvDash:"⊭",nvHarr:"⤄",nvap:"≍⃒",nvdash:"⊬",nvge:"≥⃒",nvgt:">⃒",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwArr:"⇖",nwarhk:"⤣",nwarr:"↖",nwarrow:"↖",nwnear:"⤧",oS:"Ⓢ",oacut:"ó",oacute:"ó",oast:"⊛",ocir:"ô",ocirc:"ô",ocy:"о",odash:"⊝",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",ofcir:"⦿",ofr:"𝔬",ogon:"˛",ograv:"ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",omega:"ω",omicron:"ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",opar:"⦷",operp:"⦹",oplus:"⊕",or:"∨",orarr:"↻",ord:"º",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oscr:"ℴ",oslas:"ø",oslash:"ø",osol:"⊘",otild:"õ",otilde:"õ",otimes:"⊗",otimesas:"⨶",oum:"ö",ouml:"ö",ovbar:"⌽",par:"¶",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",plusm:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",pointint:"⨕",popf:"𝕡",poun:"£",pound:"£",pr:"≺",prE:"⪳",prap:"⪷",prcue:"≼",pre:"⪯",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",primes:"ℙ",prnE:"⪵",prnap:"⪹",prnsim:"⋨",prod:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",psi:"ψ",puncsp:" ",qfr:"𝔮",qint:"⨌",qopf:"𝕢",qprime:"⁗",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quo:'"',quot:'"',rAarr:"⇛",rArr:"⇒",rAtail:"⤜",rBarr:"⤏",rHar:"⥤",race:"∽̱",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",rangd:"⦒",range:"⦥",rangle:"⟩",raqu:"»",raquo:"»",rarr:"→",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",rarrw:"↝",ratail:"⤚",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",rcedil:"ŗ",rceil:"⌉",rcub:"}",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",re:"®",reg:"®",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",rhov:"ϱ",rightarrow:"→",rightarrowtail:"↣",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",rightthreetimes:"⋌",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",roplus:"⨮",rotimes:"⨵",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",rsaquo:"›",rscr:"𝓇",rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",ruluhar:"⥨",rx:"℞",sacute:"ś",sbquo:"‚",sc:"≻",scE:"⪴",scap:"⪸",scaron:"š",sccue:"≽",sce:"⪰",scedil:"ş",scirc:"ŝ",scnE:"⪶",scnap:"⪺",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",sdot:"⋅",sdotb:"⊡",sdote:"⩦",seArr:"⇘",searhk:"⤥",searr:"↘",searrow:"↘",sec:"§",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",sfrown:"⌢",sharp:"♯",shchcy:"щ",shcy:"ш",shortmid:"∣",shortparallel:"∥",sh:"­",shy:"­",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",subE:"⫅",subdot:"⪽",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",subseteq:"⊆",subseteqq:"⫅",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",sum:"∑",sung:"♪",sup:"⊃",sup1:"¹",sup2:"²",sup3:"³",supE:"⫆",supdot:"⪾",supdsub:"⫘",supe:"⊇",supedot:"⫄",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swArr:"⇙",swarhk:"⤦",swarr:"↙",swarrow:"↙",swnwar:"⤪",szli:"ß",szlig:"ß",target:"⌖",tau:"τ",tbrk:"⎴",tcaron:"ť",tcedil:"ţ",tcy:"т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",there4:"∴",therefore:"∴",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",thinsp:" ",thkap:"≈",thksim:"∼",thor:"þ",thorn:"þ",tilde:"˜",time:"×",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",tscy:"ц",tshcy:"ћ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uArr:"⇑",uHar:"⥣",uacut:"ú",uacute:"ú",uarr:"↑",ubrcy:"ў",ubreve:"ŭ",ucir:"û",ucirc:"û",ucy:"у",udarr:"⇅",udblac:"ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",ugrav:"ù",ugrave:"ù",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",um:"¨",uml:"¨",uogon:"ų",uopf:"𝕦",uparrow:"↑",updownarrow:"↕",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",upsi:"υ",upsih:"ϒ",upsilon:"υ",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",urtri:"◹",uscr:"𝓊",utdot:"⋰",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uum:"ü",uuml:"ü",uwangle:"⦧",vArr:"⇕",vBar:"⫨",vBarv:"⫩",vDash:"⊨",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vcy:"в",vdash:"⊢",vee:"∨",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",vert:"|",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",vprop:"∝",vrtri:"⊳",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",vzigzag:"⦚",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",wedgeq:"≙",weierp:"℘",wfr:"𝔴",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",xhArr:"⟺",xharr:"⟷",xi:"ξ",xlArr:"⟸",xlarr:"⟵",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrArr:"⟹",xrarr:"⟶",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacut:"ý",yacute:"ý",yacy:"я",ycirc:"ŷ",ycy:"ы",ye:"¥",yen:"¥",yfr:"𝔶",yicy:"ї",yopf:"𝕪",yscr:"𝓎",yucy:"ю",yum:"ÿ",yuml:"ÿ",zacute:"ź",zcaron:"ž",zcy:"з",zdot:"ż",zeetrf:"ℨ",zeta:"ζ",zfr:"𝔷",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",zscr:"𝓏",zwj:"‍",zwnj:"‌"},Ue={}.hasOwnProperty;function Ge(e){return!!Ue.call(He,e)&&He[e]}const qe={name:"characterReference",tokenize:function(e,t,n){const r=this;let i,o,s=0;return function(t){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(t),e.exit("characterReferenceMarker"),a};function a(t){return 35===t?(e.enter("characterReferenceMarkerNumeric"),e.consume(t),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),i=31,o=z,c(t))}function u(t){return 88===t||120===t?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(t),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),i=6,o=K,c):(e.enter("characterReferenceValue"),i=7,o=q,c(t))}function c(a){let u;return 59===a&&s?(u=e.exit("characterReferenceValue"),o!==z||Ge(r.sliceSerialize(u))?(e.enter("characterReferenceMarker"),e.consume(a),e.exit("characterReferenceMarker"),e.exit("characterReference"),t):n(a)):o(a)&&s++<i?(e.consume(a),c):n(a)}}},Ke={name:"characterEscape",tokenize:function(e,t,n){return function(t){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(t),e.exit("escapeMarker"),r};function r(r){return j(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),t):n(r)}}},ze={name:"lineEnding",tokenize:function(e,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),ee(e,t,"linePrefix")}}},je={name:"labelEnd",tokenize:function(e,t,n){const r=this;let i,o,s=r.events.length;for(;s--;)if(("labelImage"===r.events[s][1].type||"labelLink"===r.events[s][1].type)&&!r.events[s][1]._balanced){i=r.events[s][1];break}return function(t){return i?i._inactive?u(t):(o=r.parser.defined.includes(Se(r.sliceSerialize({start:i.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelEnd"),a):n(t)};function a(n){return 40===n?e.attempt(Ve,t,o?t:u)(n):91===n?e.attempt(Ye,t,o?e.attempt(Qe,t,u):u)(n):o?t(n):u(n)}function u(e){return i._balanced=!0,n(e)}},resolveTo:function(e,t){let n,r,i,o,s=e.length,a=0;for(;s--;)if(n=e[s][1],r){if("link"===n.type||"labelLink"===n.type&&n._inactive)break;"enter"===e[s][0]&&"labelLink"===n.type&&(n._inactive=!0)}else if(i){if("enter"===e[s][0]&&("labelImage"===n.type||"labelLink"===n.type)&&!n._balanced&&(r=s,"labelLink"!==n.type)){a=2;break}}else"labelEnd"===n.type&&(i=s);const u={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},c={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[i][1].end)},l={type:"labelText",start:Object.assign({},e[r+a+2][1].end),end:Object.assign({},e[i-2][1].start)};return o=[["enter",u,t],["enter",c,t]],o=P(o,e.slice(r+1,r+a+3)),o=P(o,[["enter",l,t]]),o=P(o,Ee(t.parser.constructs.insideSpan.null,e.slice(r+a+4,i-3),t)),o=P(o,[["exit",l,t],e[i-2],e[i-1],["exit",c,t]]),o=P(o,e.slice(i+1)),o=P(o,[["exit",u,t]]),M(e,r,e.length,o),e},resolveAll:function(e){let t,n=-1;for(;++n<e.length;)t=e[n][1],"labelImage"!==t.type&&"labelLink"!==t.type&&"labelEnd"!==t.type||(e.splice(n+1,"labelImage"===t.type?4:2),t.type="data",n++);return e}},Ve={tokenize:function(e,t,n){return function(t){return e.enter("resource"),e.enter("resourceMarker"),e.consume(t),e.exit("resourceMarker"),be(e,r)};function r(t){return 41===t?s(t):ke(e,i,n,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(t)}function i(t){return Q(t)?be(e,o)(t):s(t)}function o(t){return 34===t||39===t||40===t?ye(e,be(e,s),n,"resourceTitle","resourceTitleMarker","resourceTitleString")(t):s(t)}function s(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),t):n(r)}}},Ye={tokenize:function(e,t,n){const r=this;return function(t){return Ne.call(r,e,i,n,"reference","referenceMarker","referenceString")(t)};function i(e){return r.parser.defined.includes(Se(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?t(e):n(e)}}},Qe={tokenize:function(e,t,n){return function(t){return e.enter("reference"),e.enter("referenceMarker"),e.consume(t),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),t):n(r)}}},We={name:"labelStartImage",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(t),e.exit("labelImageMarker"),i};function i(t){return 91===t?(e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelImage"),o):n(t)}function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:je.resolveAll};function Xe(e){return null===e||Q(e)||$(e)?1:Z(e)?2:void 0}const $e={name:"attention",tokenize:function(e,t){const n=this.parser.constructs.attentionMarkers.null,r=this.previous,i=Xe(r);let o;return function(t){return e.enter("attentionSequence"),o=t,s(t)};function s(a){if(a===o)return e.consume(a),s;const u=e.exit("attentionSequence"),c=Xe(a),l=!c||2===c&&i||n.includes(a),p=!i||2===i&&c||n.includes(r);return u._open=Boolean(42===o?l:l&&(i||!p)),u._close=Boolean(42===o?p:p&&(c||!l)),t(a)}},resolveAll:function(e,t){let n,r,i,o,s,a,u,c,l=-1;for(;++l<e.length;)if("enter"===e[l][0]&&"attentionSequence"===e[l][1].type&&e[l][1]._close)for(n=l;n--;)if("exit"===e[n][0]&&"attentionSequence"===e[n][1].type&&e[n][1]._open&&t.sliceSerialize(e[n][1]).charCodeAt(0)===t.sliceSerialize(e[l][1]).charCodeAt(0)){if((e[n][1]._close||e[l][1]._open)&&(e[l][1].end.offset-e[l][1].start.offset)%3&&!((e[n][1].end.offset-e[n][1].start.offset+e[l][1].end.offset-e[l][1].start.offset)%3))continue;a=e[n][1].end.offset-e[n][1].start.offset>1&&e[l][1].end.offset-e[l][1].start.offset>1?2:1;const p=Object.assign({},e[n][1].end),h=Object.assign({},e[l][1].start);Ze(p,-a),Ze(h,a),o={type:a>1?"strongSequence":"emphasisSequence",start:p,end:Object.assign({},e[n][1].end)},s={type:a>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[l][1].start),end:h},i={type:a>1?"strongText":"emphasisText",start:Object.assign({},e[n][1].end),end:Object.assign({},e[l][1].start)},r={type:a>1?"strong":"emphasis",start:Object.assign({},o.start),end:Object.assign({},s.end)},e[n][1].end=Object.assign({},o.start),e[l][1].start=Object.assign({},s.end),u=[],e[n][1].end.offset-e[n][1].start.offset&&(u=P(u,[["enter",e[n][1],t],["exit",e[n][1],t]])),u=P(u,[["enter",r,t],["enter",o,t],["exit",o,t],["enter",i,t]]),u=P(u,Ee(t.parser.constructs.insideSpan.null,e.slice(n+1,l),t)),u=P(u,[["exit",i,t],["enter",s,t],["exit",s,t],["exit",r,t]]),e[l][1].end.offset-e[l][1].start.offset?(c=2,u=P(u,[["enter",e[l][1],t],["exit",e[l][1],t]])):c=0,M(e,n-1,l-n+3,u),l=n+u.length-c-2;break}for(l=-1;++l<e.length;)"attentionSequence"===e[l][1].type&&(e[l][1].type="data");return e}};function Ze(e,t){e.column+=t,e.offset+=t,e._bufferIndex+=t}const Je={name:"autolink",tokenize:function(e,t,n){let r=1;return function(t){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),i};function i(t){return G(t)?(e.consume(t),o):V(t)?u(t):n(t)}function o(e){return 43===e||45===e||46===e||z(e)?s(e):u(e)}function s(t){return 58===t?(e.consume(t),a):(43===t||45===t||46===t||z(t))&&r++<32?(e.consume(t),s):u(t)}function a(t){return 62===t?(e.exit("autolinkProtocol"),h(t)):null===t||32===t||60===t||Y(t)?n(t):(e.consume(t),a)}function u(t){return 64===t?(e.consume(t),r=0,c):V(t)?(e.consume(t),u):n(t)}function c(e){return z(e)?l(e):n(e)}function l(t){return 46===t?(e.consume(t),r=0,c):62===t?(e.exit("autolinkProtocol").type="autolinkEmail",h(t)):p(t)}function p(t){return(45===t||z(t))&&r++<63?(e.consume(t),45===t?p:l):n(t)}function h(n){return e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.exit("autolink"),t}}},et={name:"htmlText",tokenize:function(e,t,n){const r=this;let i,o,s,a;return function(t){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(t),u};function u(t){return 33===t?(e.consume(t),c):47===t?(e.consume(t),D):63===t?(e.consume(t),C):G(t)?(e.consume(t),y):n(t)}function c(t){return 45===t?(e.consume(t),l):91===t?(e.consume(t),o="CDATA[",s=0,m):G(t)?(e.consume(t),A):n(t)}function l(t){return 45===t?(e.consume(t),p):n(t)}function p(t){return null===t||62===t?n(t):45===t?(e.consume(t),h):f(t)}function h(e){return null===e||62===e?n(e):f(e)}function f(t){return null===t?n(t):45===t?(e.consume(t),d):W(t)?(a=f,L(t)):(e.consume(t),f)}function d(t){return 45===t?(e.consume(t),M):f(t)}function m(t){return t===o.charCodeAt(s++)?(e.consume(t),s===o.length?E:m):n(t)}function E(t){return null===t?n(t):93===t?(e.consume(t),g):W(t)?(a=E,L(t)):(e.consume(t),E)}function g(t){return 93===t?(e.consume(t),T):E(t)}function T(t){return 62===t?M(t):93===t?(e.consume(t),T):E(t)}function A(t){return null===t||62===t?M(t):W(t)?(a=A,L(t)):(e.consume(t),A)}function C(t){return null===t?n(t):63===t?(e.consume(t),_):W(t)?(a=C,L(t)):(e.consume(t),C)}function _(e){return 62===e?M(e):C(e)}function D(t){return G(t)?(e.consume(t),k):n(t)}function k(t){return 45===t||z(t)?(e.consume(t),k):N(t)}function N(t){return W(t)?(a=N,L(t)):X(t)?(e.consume(t),N):M(t)}function y(t){return 45===t||z(t)?(e.consume(t),y):47===t||62===t||Q(t)?b(t):n(t)}function b(t){return 47===t?(e.consume(t),M):58===t||95===t||G(t)?(e.consume(t),S):W(t)?(a=b,L(t)):X(t)?(e.consume(t),b):M(t)}function S(t){return 45===t||46===t||58===t||95===t||z(t)?(e.consume(t),S):x(t)}function x(t){return 61===t?(e.consume(t),O):W(t)?(a=x,L(t)):X(t)?(e.consume(t),x):b(t)}function O(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),i=t,F):W(t)?(a=O,L(t)):X(t)?(e.consume(t),O):(e.consume(t),i=void 0,v)}function F(t){return t===i?(e.consume(t),I):null===t?n(t):W(t)?(a=F,L(t)):(e.consume(t),F)}function I(e){return 62===e||47===e||Q(e)?b(e):n(e)}function v(t){return null===t||34===t||39===t||60===t||61===t||96===t?n(t):62===t||Q(t)?b(t):(e.consume(t),v)}function L(t){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ee(e,R,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function R(t){return e.enter("htmlTextData"),a(t)}function M(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),t):n(r)}}},tt={name:"labelStartLink",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelLink"),i};function i(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:je.resolveAll},nt={name:"hardBreakEscape",tokenize:function(e,t,n){return function(t){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(t),r};function r(r){return W(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),t(r)):n(r)}}},rt={name:"codeText",tokenize:function(e,t,n){let r,i,o=0;return function(t){return e.enter("codeText"),e.enter("codeTextSequence"),s(t)};function s(t){return 96===t?(e.consume(t),o++,s):(e.exit("codeTextSequence"),a(t))}function a(t){return null===t?n(t):96===t?(i=e.enter("codeTextSequence"),r=0,c(t)):32===t?(e.enter("space"),e.consume(t),e.exit("space"),a):W(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),a):(e.enter("codeTextData"),u(t))}function u(t){return null===t||32===t||96===t||W(t)?(e.exit("codeTextData"),a(t)):(e.consume(t),u)}function c(n){return 96===n?(e.consume(n),r++,c):r===o?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(i.type="codeTextData",u(n))}},resolve:function(e){let t,n,r=e.length-4,i=3;if(!("lineEnding"!==e[i][1].type&&"space"!==e[i][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=i;++t<r;)if("codeTextData"===e[t][1].type){e[i][1].type="codeTextPadding",e[r][1].type="codeTextPadding",i+=2,r-=2;break}for(t=i-1,r++;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},it={42:Ae,43:Ae,45:Ae,48:Ae,49:Ae,50:Ae,51:Ae,52:Ae,53:Ae,54:Ae,55:Ae,56:Ae,57:Ae,62:De},ot={91:xe},st={[-2]:Fe,[-1]:Fe,32:Fe},at={35:ve,42:Te,45:[Le,Te],60:Pe,61:Le,95:Te,96:Be,126:Be},ut={38:qe,92:Ke},ct={[-5]:ze,[-4]:ze,[-3]:ze,33:We,38:qe,42:$e,60:[Je,et],91:tt,92:[nt,Ke],93:je,95:$e,96:rt},lt={null:[$e,le]},pt={null:[42,95]},ht={null:[]},ft=/[\0\t\n\r]/g;function dt(e,t){const n=Number.parseInt(e,t);return n<9||11===n||n>13&&n<32||n>126&&n<160||n>55295&&n<57344||n>64975&&n<65008||65535==(65535&n)||65534==(65535&n)||n>1114111?"�":String.fromCharCode(n)}const mt=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function Et(e){return e.replace(mt,gt)}function gt(e,t,n){if(t)return t;if(35===n.charCodeAt(0)){const e=n.charCodeAt(1),t=120===e||88===e;return dt(n.slice(t?2:1),t?16:10)}return Ge(n)||e}const Tt={}.hasOwnProperty,At=function(t,n,r){return"string"!=typeof n&&(r=n,n=void 0),function(e={}){const t=Ct({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:a(D),autolinkProtocol:d,autolinkEmail:d,atxHeading:a(A),blockQuote:a((function(){return{type:"blockquote",children:[]}})),characterEscape:d,characterReference:d,codeFenced:a(T),codeFencedFenceInfo:u,codeFencedFenceMeta:u,codeIndented:a(T,u),codeText:a((function(){return{type:"inlineCode",value:""}}),u),codeTextData:d,data:d,codeFlowValue:d,definition:a((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:u,definitionLabelString:u,definitionTitleString:u,emphasis:a((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:a(C),hardBreakTrailing:a(C),htmlFlow:a(_,u),htmlFlowData:d,htmlText:a(_,u),htmlTextData:d,image:a((function(){return{type:"image",title:null,url:"",alt:null}})),label:u,link:a(D),listItem:a((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){o("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),i("expectingFirstListItemValue"))},listOrdered:a(k,(function(){i("expectingFirstListItemValue",!0)})),listUnordered:a(k),paragraph:a((function(){return{type:"paragraph",children:[]}})),reference:function(){i("referenceType","collapsed")},referenceString:u,resourceDestinationString:u,resourceTitleString:u,setextHeading:a(A),strong:a((function(){return{type:"strong",children:[]}})),thematicBreak:a((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:p(),atxHeadingSequence:function(e){const t=this.stack[this.stack.length-1];if(!t.depth){const n=this.sliceSerialize(e).length;t.depth=n}},autolink:p(),autolinkEmail:function(e){m.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){m.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:p(),characterEscapeValue:m,characterReferenceMarkerHexadecimal:g,characterReferenceMarkerNumeric:g,characterReferenceValue:function(e){const t=this.sliceSerialize(e),n=o("characterReferenceType");let r;n?(r=dt(t,"characterReferenceMarkerNumeric"===n?10:16),i("characterReferenceType")):r=Ge(t);const a=this.stack.pop();a.value+=r,a.position.end=s(e.end)},codeFenced:p((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),i("flowCodeInside")})),codeFencedFence:function(){o("flowCodeInside")||(this.buffer(),i("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:m,codeIndented:p((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:p((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:m,data:m,definition:p(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Se(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:p(),hardBreakEscape:p(E),hardBreakTrailing:p(E),htmlFlow:p((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:m,htmlText:p((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:m,image:p((function(){const e=this.stack[this.stack.length-1];o("inReference")?(e.type+="Reference",e.referenceType=o("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),i("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],t=this.resume(),n=this.stack[this.stack.length-1];i("inReference",!0),"link"===n.type?n.children=e.children:n.alt=t},labelText:function(e){const t=this.stack[this.stack.length-2],n=this.sliceSerialize(e);t.label=Et(n),t.identifier=Se(n).toLowerCase()},lineEnding:function(e){const n=this.stack[this.stack.length-1];if(o("atHardBreak"))return n.children[n.children.length-1].position.end=s(e.end),void i("atHardBreak");!o("setextHeadingSlurpLineEnding")&&t.canContainEols.includes(n.type)&&(d.call(this,e),m.call(this,e))},link:p((function(){const e=this.stack[this.stack.length-1];o("inReference")?(e.type+="Reference",e.referenceType=o("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),i("referenceType")})),listItem:p(),listOrdered:p(),listUnordered:p(),paragraph:p(),referenceString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Se(this.sliceSerialize(e)).toLowerCase(),i("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){i("inReference")},setextHeading:p((function(){i("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){i("setextHeadingSlurpLineEnding",!0)},strong:p(),thematicBreak:p()}},e.mdastExtensions||[]),n={};return function(e){let n={type:"root",children:[]};const a=[],c=[],p={stack:[n],tokenStack:a,config:t,enter:l,exit:h,buffer:u,resume:f,setData:i,getData:o};let d=-1;for(;++d<e.length;)"listOrdered"!==e[d][1].type&&"listUnordered"!==e[d][1].type||("enter"===e[d][0]?c.push(d):d=r(e,c.pop(),d));for(d=-1;++d<e.length;){const n=t[e[d][0]];Tt.call(n,e[d][1].type)&&n[e[d][1].type].call(Object.assign({sliceSerialize:e[d][2].sliceSerialize},p),e[d][1])}if(a.length>0){const e=a[a.length-1];(e[1]||Dt).call(p,void 0,e[0])}for(n.position={start:s(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:s(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},d=-1;++d<t.transforms.length;)n=t.transforms[d](n)||n;return n};function r(e,t,n){let r,i,o,s,a=t-1,u=-1,c=!1;for(;++a<=n;){const t=e[a];if("listUnordered"===t[1].type||"listOrdered"===t[1].type||"blockQuote"===t[1].type?("enter"===t[0]?u++:u--,s=void 0):"lineEndingBlank"===t[1].type?"enter"===t[0]&&(!r||s||u||o||(o=a),s=void 0):"linePrefix"===t[1].type||"listItemValue"===t[1].type||"listItemMarker"===t[1].type||"listItemPrefix"===t[1].type||"listItemPrefixWhitespace"===t[1].type||(s=void 0),!u&&"enter"===t[0]&&"listItemPrefix"===t[1].type||-1===u&&"exit"===t[0]&&("listUnordered"===t[1].type||"listOrdered"===t[1].type)){if(r){let s=a;for(i=void 0;s--;){const t=e[s];if("lineEnding"===t[1].type||"lineEndingBlank"===t[1].type){if("exit"===t[0])continue;i&&(e[i][1].type="lineEndingBlank",c=!0),t[1].type="lineEnding",i=s}else if("linePrefix"!==t[1].type&&"blockQuotePrefix"!==t[1].type&&"blockQuotePrefixWhitespace"!==t[1].type&&"blockQuoteMarker"!==t[1].type&&"listItemIndent"!==t[1].type)break}o&&(!i||o<i)&&(r._spread=!0),r.end=Object.assign({},i?e[i][1].start:t[1].end),e.splice(i||a,0,["exit",r,t[2]]),a++,n++}"listItemPrefix"===t[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},t[1].start)},e.splice(a,0,["enter",r,t[2]]),a++,n++,o=void 0,s=!0)}}return e[t][1]._spread=c,n}function i(e,t){n[e]=t}function o(e){return n[e]}function s(e){return{line:e.line,column:e.column,offset:e.offset}}function a(e,t){return function(n){l.call(this,e(n),n),t&&t.call(this,n)}}function u(){this.stack.push({type:"fragment",children:[]})}function l(e,t,n){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([t,n]),e.position={start:s(t.start)},e}function p(e){return function(t){e&&e.call(this,t),h.call(this,t)}}function h(e,t){const n=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+c({start:e.start,end:e.end})+"): it’s not open");return r[0].type!==e.type&&(t?t.call(this,e,r[0]):(r[1]||Dt).call(this,e,r[0])),n.position.end=s(e.end),n}function f(){return v(this.stack.pop())}function d(e){const t=this.stack[this.stack.length-1];let n=t.children[t.children.length-1];n&&"text"===n.type||(n={type:"text",value:""},n.position={start:s(e.start)},t.children.push(n)),this.stack.push(n)}function m(e){const t=this.stack.pop();t.value+=this.sliceSerialize(e),t.position.end=s(e.end)}function E(){i("atHardBreak",!0)}function g(e){i("characterReferenceType",e.type)}function T(){return{type:"code",lang:null,meta:null,value:""}}function A(){return{type:"heading",depth:void 0,children:[]}}function C(){return{type:"break"}}function _(){return{type:"html",value:""}}function D(){return{type:"link",title:null,url:"",children:[]}}function k(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(r)(function(e){for(;!oe(e););return e}(function(t={}){const n={defined:[],lazy:{},constructs:B([e].concat(t.extensions||[])),content:r(te),document:r(ne),flow:r(ce),string:r(pe),text:r(he)};return n;function r(e){return function(t){return ge(n,e,t)}}}(r).document().write(function(){let e,t=1,n="",r=!0;return function(i,o,s){const a=[];let u,c,l,p,h;for(i=n+i.toString(o),l=0,n="",r&&(65279===i.charCodeAt(0)&&l++,r=void 0);l<i.length;){if(ft.lastIndex=l,u=ft.exec(i),p=u&&void 0!==u.index?u.index:i.length,h=i.charCodeAt(p),!u){n=i.slice(l);break}if(10===h&&l===p&&e)a.push(-3),e=void 0;else switch(e&&(a.push(-5),e=void 0),l<p&&(a.push(i.slice(l,p)),t+=p-l),h){case 0:a.push(65533),t++;break;case 9:for(c=4*Math.ceil(t/4),a.push(-2);t++<c;)a.push(-1);break;case 10:a.push(-4),t=1;break;default:e=!0,t=1}l=p+1}return s&&(e&&a.push(-5),n&&a.push(n),a.push(null)),a}}()(t,n,!0))))};function Ct(e,t){let n=-1;for(;++n<t.length;){const r=t[n];Array.isArray(r)?Ct(e,r):_t(e,r)}return e}function _t(e,t){let n;for(n in t)if(Tt.call(t,n)){const r="canContainEols"===n||"transforms"===n,i=(Tt.call(e,n)?e[n]:void 0)||(e[n]=r?[]:{}),o=t[n];o&&(r?e[n]=[...i,...o]:Object.assign(i,o))}}function Dt(e,t){throw e?new Error("Cannot close `"+e.type+"` ("+c({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+c({start:t.start,end:t.end})+") is open"):new Error("Cannot close document, a token (`"+t.type+"`, "+c({start:t.start,end:t.end})+") is still open")}var kt=function(e,t,n){var r={type:String(e)};return null!=n||"string"!=typeof t&&!Array.isArray(t)?Object.assign(r,t):n=t,Array.isArray(n)?r.children=n:null!=n&&(r.value=String(n)),r};const Nt=function(e){if(null==e)return bt;if("string"==typeof e)return t=e,yt((function(e){return e&&e.type===t}));var t;if("object"==typeof e)return Array.isArray(e)?function(e){const t=[];let n=-1;for(;++n<e.length;)t[n]=Nt(e[n]);return yt((function(...e){let n=-1;for(;++n<t.length;)if(t[n].call(this,...e))return!0;return!1}))}(e):function(e){return yt((function(t){let n;for(n in e)if(t[n]!==e[n])return!1;return!0}))}(e);if("function"==typeof e)return yt(e);throw new Error("Expected function, string, or object as test")};function yt(e){return function(...t){return Boolean(e.call(this,...t))}}function bt(){return!0}const St="skip",xt=!1,Ot=function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null);const i=Nt(t),o=r?-1:1;!function e(s,a,u){const c="object"==typeof s&&null!==s?s:{};let l;var p;return"string"==typeof c.type&&(l="string"==typeof c.tagName?c.tagName:"string"==typeof c.name?c.name:void 0,Object.defineProperty(h,"name",{value:"node ("+(p=c.type+(l?"<"+l+">":""),"[33m"+p+"[39m)")})),h;function h(){let c,l,p,h=[];if((!t||i(s,a,u[u.length-1]||null))&&(h=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(n(s,u)),h[0]===xt))return h;if(s.children&&h[0]!==St)for(l=(r?s.children.length:-1)+o,p=u.concat(s);l>-1&&l<s.children.length;){if(c=e(s.children[l],l,p)(),c[0]===xt)return c;l="number"==typeof c[1]?c[1]:l+o}return h}}(e,null,[])()},Ft=function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null),Ot(e,t,(function(e,t){const r=t[t.length-1];return n(e,r?r.children.indexOf(e):null,r)}),r)};var It=Lt("start"),vt=Lt("end");function Lt(e){return function(t){var n=t&&t.position&&t.position[e]||{};return{line:n.line||null,column:n.column||null,offset:n.offset>-1?n.offset:null}}}const Rt={}.hasOwnProperty;function Mt(e){const t=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");var n,r,i;return r=function(e){const n=Pt(e.identifier);n&&!Rt.call(t,n)&&(t[n]=e)},"function"==typeof(n="definition")&&"function"!=typeof r&&(i=r,r=n,n=null),function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null);var i=Nt(t),o=r?-1:1;!function e(s,a,u){var c,l,p="object"==typeof s&&null!==s?s:{};return"string"==typeof p.type&&(c="string"==typeof p.tagName?p.tagName:"string"==typeof p.name?p.name:void 0,Object.defineProperty(h,"name",{value:"node ("+(l=p.type+(c?"<"+c+">":""),"[33m"+l+"[39m)")})),h;function h(){var c,l,p,h=[];if((!t||i(s,a,u[u.length-1]||null))&&(h=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(n(s,u)),!1===h[0]))return h;if(s.children&&"skip"!==h[0])for(l=(r?s.children.length:-1)+o,p=u.concat(s);l>-1&&l<s.children.length;){if(!1===(c=e(s.children[l],l,p)())[0])return c;l="number"==typeof c[1]?c[1]:l+o}return h}}(e,null,[])()}(e,n,(function(e,t){var n=t[t.length-1];return r(e,n?n.children.indexOf(e):null,n)}),i),function(e){const n=Pt(e);return n&&Rt.call(t,n)?t[n]:null}}function Pt(e){return String(e||"").toUpperCase()}const wt={}.hasOwnProperty;function Bt(e,t){const n=t.data||{};return"value"in t&&!(wt.call(n,"hName")||wt.call(n,"hProperties")||wt.call(n,"hChildren"))?e.augment(t,kt("text",t.value)):e(t,"div",Gt(e,t))}function Ht(e,t,n){const r=t&&t.type;let i;if(!r)throw new Error("Expected node, got `"+t+"`");return i=wt.call(e.handlers,r)?e.handlers[r]:e.passThrough&&e.passThrough.includes(r)?Ut:e.unknownHandler,("function"==typeof i?i:Bt)(e,t,n)}function Ut(e,t){return"children"in t?{...t,children:Gt(e,t)}:t}function Gt(e,t){const n=[];if("children"in t){const r=t.children;let i=-1;for(;++i<r.length;){const o=Ht(e,r[i],t);if(o){if(i&&"break"===r[i-1].type&&(Array.isArray(o)||"text"!==o.type||(o.value=o.value.replace(/^\s+/,"")),!Array.isArray(o)&&"element"===o.type)){const e=o.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(o)?n.push(...o):n.push(o)}}}return n}const qt={'"':"quot","&":"amp","<":"lt",">":"gt"};function Kt(e,t){const n=function(e){return e.replace(/["&<>]/g,(function(e){return"&"+qt[e]+";"}))}(function(e){const t=[];let n=-1,r=0,i=0;for(;++n<e.length;){const o=e.charCodeAt(n);let s="";if(37===o&&z(e.charCodeAt(n+1))&&z(e.charCodeAt(n+2)))i=2;else if(o<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(o))||(s=String.fromCharCode(o));else if(o>55295&&o<57344){const t=e.charCodeAt(n+1);o<56320&&t>56319&&t<57344?(s=String.fromCharCode(o,t),i=1):s="�"}else s=String.fromCharCode(o);s&&(t.push(e.slice(r,n),encodeURIComponent(s)),r=n+i+1,s=""),i&&(n+=i,i=0)}return t.join("")+e.slice(r)}(e||""));if(!t)return n;const r=n.indexOf(":"),i=n.indexOf("?"),o=n.indexOf("#"),s=n.indexOf("/");return r<0||s>-1&&r>s||i>-1&&r>i||o>-1&&r>o||t.test(n.slice(0,r))?n:""}function zt(e,t){const n=[];let r=-1;for(t&&n.push(kt("text","\n"));++r<e.length;)r&&n.push(kt("text","\n")),n.push(e[r]);return t&&e.length>0&&n.push(kt("text","\n")),n}function jt(e,t){const n=String(t.identifier),r=Kt(n.toLowerCase()),i=e.footnoteOrder.indexOf(n);let o;-1===i?(e.footnoteOrder.push(n),e.footnoteCounts[n]=1,o=e.footnoteOrder.length):(e.footnoteCounts[n]++,o=i+1);const s=e.footnoteCounts[n];return e(t,"sup",[e(t.position,"a",{href:"#"+e.clobberPrefix+"fn-"+r,id:e.clobberPrefix+"fnref-"+r+(s>1?"-"+s:""),dataFootnoteRef:!0,ariaDescribedBy:"footnote-label"},[kt("text",String(o))])])}var Vt=n(729);function Yt(e,t){const n=t.referenceType;let r="]";if("collapsed"===n?r+="[]":"full"===n&&(r+="["+(t.label||t.identifier)+"]"),"imageReference"===t.type)return kt("text","!["+t.alt+r);const i=Gt(e,t),o=i[0];o&&"text"===o.type?o.value="["+o.value:i.unshift(kt("text","["));const s=i[i.length-1];return s&&"text"===s.type?s.value+=r:i.push(kt("text",r)),i}function Qt(e){const t=e.spread;return null==t?e.children.length>1:t}const Wt={blockquote:function(e,t){return e(t,"blockquote",zt(Gt(e,t),!0))},break:function(e,t){return[e(t,"br"),kt("text","\n")]},code:function(e,t){const n=t.value?t.value+"\n":"",r=t.lang&&t.lang.match(/^[^ \t]+(?=[ \t]|$)/),i={};r&&(i.className=["language-"+r]);const o=e(t,"code",i,[kt("text",n)]);return t.meta&&(o.data={meta:t.meta}),e(t.position,"pre",[o])},delete:function(e,t){return e(t,"del",Gt(e,t))},emphasis:function(e,t){return e(t,"em",Gt(e,t))},footnoteReference:jt,footnote:function(e,t){const n=e.footnoteById;let r=1;for(;r in n;)r++;const i=String(r);return n[i]={type:"footnoteDefinition",identifier:i,children:[{type:"paragraph",children:t.children}],position:t.position},jt(e,{type:"footnoteReference",identifier:i,position:t.position})},heading:function(e,t){return e(t,"h"+t.depth,Gt(e,t))},html:function(e,t){return e.dangerous?e.augment(t,kt("raw",t.value)):null},imageReference:function(e,t){const n=e.definition(t.identifier);if(!n)return Yt(e,t);const r={src:Vt(n.url||""),alt:t.alt};return null!==n.title&&void 0!==n.title&&(r.title=n.title),e(t,"img",r)},image:function(e,t){const n={src:Vt(t.url),alt:t.alt};return null!==t.title&&void 0!==t.title&&(n.title=t.title),e(t,"img",n)},inlineCode:function(e,t){return e(t,"code",[kt("text",t.value.replace(/\r?\n|\r/g," "))])},linkReference:function(e,t){const n=e.definition(t.identifier);if(!n)return Yt(e,t);const r={href:Vt(n.url||"")};return null!==n.title&&void 0!==n.title&&(r.title=n.title),e(t,"a",r,Gt(e,t))},link:function(e,t){const n={href:Vt(t.url)};return null!==t.title&&void 0!==t.title&&(n.title=t.title),e(t,"a",n,Gt(e,t))},listItem:function(e,t,n){const r=Gt(e,t),i=n?function(e){let t=e.spread;const n=e.children;let r=-1;for(;!t&&++r<n.length;)t=Qt(n[r]);return Boolean(t)}(n):Qt(t),o={},s=[];if("boolean"==typeof t.checked){let n;r[0]&&"element"===r[0].type&&"p"===r[0].tagName?n=r[0]:(n=e(null,"p",[]),r.unshift(n)),n.children.length>0&&n.children.unshift(kt("text"," ")),n.children.unshift(e(null,"input",{type:"checkbox",checked:t.checked,disabled:!0})),o.className=["task-list-item"]}let a=-1;for(;++a<r.length;){const e=r[a];(i||0!==a||"element"!==e.type||"p"!==e.tagName)&&s.push(kt("text","\n")),"element"!==e.type||"p"!==e.tagName||i?s.push(e):s.push(...e.children)}const u=r[r.length-1];return!u||!i&&"tagName"in u&&"p"===u.tagName||s.push(kt("text","\n")),e(t,"li",o,s)},list:function(e,t){const n={},r=t.ordered?"ol":"ul",i=Gt(e,t);let o=-1;for("number"==typeof t.start&&1!==t.start&&(n.start=t.start);++o<i.length;){const e=i[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){n.className=["contains-task-list"];break}}return e(t,r,n,zt(i,!0))},paragraph:function(e,t){return e(t,"p",Gt(e,t))},root:function(e,t){return e.augment(t,kt("root",zt(Gt(e,t))))},strong:function(e,t){return e(t,"strong",Gt(e,t))},table:function(e,t){const n=t.children;let r=-1;const i=t.align||[],o=[];for(;++r<n.length;){const s=n[r].children,a=0===r?"th":"td";let u=t.align?i.length:s.length;const c=[];for(;u--;){const t=s[u];c[u]=e(t,a,{align:i[u]},t?Gt(e,t):[])}o[r]=e(n[r],"tr",zt(c,!0))}return e(t,"table",zt([e(o[0].position,"thead",zt([o[0]],!0))].concat(o[1]?e({start:It(o[1]),end:vt(o[o.length-1])},"tbody",zt(o.slice(1),!0)):[]),!0))},text:function(e,t){return e.augment(t,kt("text",String(t.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g,"$1")))},thematicBreak:function(e,t){return e(t,"hr")},toml:Xt,yaml:Xt,definition:Xt,footnoteDefinition:Xt};function Xt(){return null}const $t={}.hasOwnProperty;function Zt(e,t){const n=function(e,t){const n=t||{},r=n.allowDangerousHtml||!1,i={};return s.dangerous=r,s.clobberPrefix=void 0===n.clobberPrefix||null===n.clobberPrefix?"user-content-":n.clobberPrefix,s.footnoteLabel=n.footnoteLabel||"Footnotes",s.footnoteBackLabel=n.footnoteBackLabel||"Back to content",s.definition=Mt(e),s.footnoteById=i,s.footnoteOrder=[],s.footnoteCounts={},s.augment=o,s.handlers={...Wt,...n.handlers},s.unknownHandler=n.unknownHandler,s.passThrough=n.passThrough,Ft(e,"footnoteDefinition",(e=>{const t=String(e.identifier).toUpperCase();$t.call(i,t)||(i[t]=e)})),s;function o(e,t){if(e&&"data"in e&&e.data){const n=e.data;n.hName&&("element"!==t.type&&(t={type:"element",tagName:"",properties:{},children:[]}),t.tagName=n.hName),"element"===t.type&&n.hProperties&&(t.properties={...t.properties,...n.hProperties}),"children"in t&&t.children&&n.hChildren&&(t.children=n.hChildren)}if(e){const r="type"in e?e:{position:e};(n=r)&&n.position&&n.position.start&&n.position.start.line&&n.position.start.column&&n.position.end&&n.position.end.line&&n.position.end.column&&(t.position={start:It(r),end:vt(r)})}var n;return t}function s(e,t,n,r){return Array.isArray(n)&&(r=n,n={}),o(e,{type:"element",tagName:t,properties:n||{},children:r||[]})}}(e,t),r=Ht(n,e,null),i=function(e){let t=-1;const n=[];for(;++t<e.footnoteOrder.length;){const r=e.footnoteById[e.footnoteOrder[t].toUpperCase()];if(!r)continue;const i=Gt(e,r),o=String(r.identifier),s=Kt(o.toLowerCase());let a=0;const u=[];for(;++a<=e.footnoteCounts[o];){const t={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fnref-"+s+(a>1?"-"+a:""),dataFootnoteBackref:!0,className:["data-footnote-backref"],ariaLabel:e.footnoteBackLabel},children:[{type:"text",value:"↩"}]};a>1&&t.children.push({type:"element",tagName:"sup",children:[{type:"text",value:String(a)}]}),u.length>0&&u.push({type:"text",value:" "}),u.push(t)}const c=i[i.length-1];if(c&&"element"===c.type&&"p"===c.tagName){const e=c.children[c.children.length-1];e&&"text"===e.type?e.value+=" ":c.children.push({type:"text",value:" "}),c.children.push(...u)}else i.push(...u);const l={type:"element",tagName:"li",properties:{id:e.clobberPrefix+"fn-"+s},children:zt(i,!0)};r.position&&(l.position=r.position),n.push(l)}return 0===n.length?null:{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:"h2",properties:{id:"footnote-label",className:["sr-only"]},children:[kt("text",e.footnoteLabel)]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:zt(n,!0)},{type:"text",value:"\n"}]}}(n);return i&&r.children.push(kt("text","\n"),i),Array.isArray(r)?{type:"root",children:r}:r}const Jt={strip:["script"],clobberPrefix:"user-content-",clobber:["name","id"],ancestors:{tbody:["table"],tfoot:["table"],thead:["table"],td:["table"],th:["table"],tr:["table"]},protocols:{href:["http","https","mailto","xmpp","irc","ircs"],cite:["http","https"],src:["http","https"],longDesc:["http","https"]},tagNames:["h1","h2","h3","h4","h5","h6","br","b","i","strong","em","a","pre","code","img","tt","div","ins","del","sup","sub","p","ol","ul","table","thead","tbody","tfoot","blockquote","dl","dt","dd","kbd","q","samp","var","hr","ruby","rt","rp","li","tr","td","th","s","strike","summary","details","caption","figure","figcaption","abbr","bdo","cite","dfn","mark","small","span","time","wbr","input"],attributes:{a:["href"],img:["src","longDesc"],input:[["type","checkbox"],["disabled",!0]],li:[["className","task-list-item"]],div:["itemScope","itemType"],blockquote:["cite"],del:["cite"],ins:["cite"],q:["cite"],"*":["abbr","accept","acceptCharset","accessKey","action","align","alt","ariaDescribedBy","ariaHidden","ariaLabel","ariaLabelledBy","axis","border","cellPadding","cellSpacing","char","charOff","charSet","checked","clear","cols","colSpan","color","compact","coords","dateTime","dir","disabled","encType","htmlFor","frame","headers","height","hrefLang","hSpace","isMap","id","label","lang","maxLength","media","method","multiple","name","noHref","noShade","noWrap","open","prompt","readOnly","rel","rev","rows","rowSpan","rules","scope","selected","shape","size","span","start","summary","tabIndex","target","title","type","useMap","vAlign","value","vSpace","width","itemProp"]},required:{input:{type:"checkbox",disabled:!0}}};var en={}.hasOwnProperty,tn=[].push,nn={root:{children:on},doctype:function(e){return e.allowDoctypes?{name:sn}:null},comment:function(e){return e.allowComments?{value:un}:null},element:{tagName:an,properties:function(e,t,n,r){var i,o,s,a,u=an(e,n.tagName,0,r),c=e.required||{},l=t||{},p=Object.assign({},hn(e.attributes["*"]),hn(u&&en.call(e.attributes,u)?e.attributes[u]:[])),h={};for(s in l)if(en.call(l,s)){if(en.call(p,s))i=p[s];else{if(!((a=s).length>4&&"data"===a.slice(0,4).toLowerCase()&&en.call(p,"data*")))continue;i=p["data*"]}o=l[s],null!=(o=Array.isArray(o)?ln(e,o,s,i):pn(e,o,s,i))&&(h[s]=o)}if(u&&en.call(c,u))for(s in c[u])en.call(h,s)||(h[s]=c[u][s]);return h},children:on},text:{value:function(e,t){return"string"==typeof t?t:""}},"*":{data:cn,position:cn}};function rn(e,t,n){var r,i,o,s,a,u=t&&t.type,c={type:t.type};if(en.call(nn,u)&&("function"==typeof(i=nn[u])&&(i=i(e,t)),i))for(a in r=!0,o=Object.assign({},i,nn["*"]))en.call(o,a)&&(!1===(s=o[a](e,t[a],t,n))?(r=null,c[a]=t[a]):null!=s&&(c[a]=s));return r?c:"element"!==c.type||e.strip.includes(c.tagName)?null:c.children}function on(e,t,n,r){var i,o=[],s=-1;if(Array.isArray(t)){for("element"===n.type&&r.push(n.tagName);++s<t.length;)(i=rn(e,t[s],r))&&("length"in i?tn.apply(o,i):o.push(i));"element"===n.type&&r.pop()}return o}function sn(){return"html"}function an(e,t,n,r){var i="string"==typeof t?t:"",o=-1;if(!i||"*"===i||!e.tagNames.includes(i))return!1;if(en.call(e.ancestors,i)){for(;++o<e.ancestors[i].length;)if(r.includes(e.ancestors[i][o]))return i;return!1}return i}function un(e,t){var n="string"==typeof t?t:"",r=n.indexOf("--\x3e");return r<0?n:n.slice(0,r)}function cn(e,t){return t}function ln(e,t,n,r){for(var i,o=-1,s=[];++o<t.length;)null!=(i=pn(e,t[o],n,r))&&s.push(i);return s}function pn(e,t,n,r){if(("boolean"==typeof t||"number"==typeof t||"string"==typeof t)&&function(e,t,n){var r=String(t),i=r.indexOf(":"),o=r.indexOf("?"),s=r.indexOf("#"),a=r.indexOf("/"),u=en.call(e.protocols,n)?e.protocols[n].concat():[],c=-1;if(0===u.length||i<0||a>-1&&i>a||o>-1&&i>o||s>-1&&i>s)return!0;for(;++c<u.length;)if(i===u[c].length&&r.slice(0,u[c].length)===u[c])return!0;return!1}(e,t,n)&&(0===r.length||r.includes(t)))return e.clobber.includes(n)?e.clobberPrefix+t:t}function hn(e){for(var t,n={},r=-1;++r<e.length;)t=e[r],Array.isArray(t)?n[t[0]]=t.slice(1):n[t]=[];return n}var fn={}.hasOwnProperty;function dn(e,t){var n=t||{};function r(t){var n=r.invalid,i=r.handlers;if(t&&fn.call(t,e)&&(n=fn.call(i,t[e])?i[t[e]]:r.unknown),n)return n.apply(this,arguments)}return r.handlers=n.handlers||{},r.invalid=n.invalid,r.unknown=n.unknown,r}function mn(e,t){let n,r=-1;if(t.extensions)for(;++r<t.extensions.length;)mn(e,t.extensions[r]);for(n in t)"extensions"===n||("unsafe"===n||"join"===n?e[n]=[...e[n]||[],...t[n]||[]]:"handlers"===n?e[n]=Object.assign(e[n],t[n]||{}):e.options[n]=t[n]);return e}function En(e,t){const n=t.indexStack,r=e.children||[],i=[];let o=-1;for(n.push(-1);++o<r.length;){const a=r[o];n[n.length-1]=o,i.push(t.handle(a,e,t,{before:"\n",after:"\n"})),"list"!==a.type&&(t.bulletLastUsed=void 0),o<r.length-1&&i.push(s(a,r[o+1]))}return n.pop(),i.join("");function s(n,r){let i=t.join.length;for(;i--;){const o=t.join[i](n,r,e,t);if(!0===o||1===o)break;if("number"==typeof o)return"\n".repeat(1+o);if(!1===o)return"\n\n\x3c!----\x3e\n\n"}return"\n\n"}}const gn=/\r?\n|\r/g;function Tn(e,t){const n=[];let r,i=0,o=0;for(;r=gn.exec(e);)s(e.slice(i,r.index)),n.push(r[0]),i=r.index+r[0].length,o++;return s(e.slice(i)),n.join("");function s(e){n.push(t(e,o,!e))}}function An(e,t,n){return">"+(n?"":" ")+e}function Cn(e,t){return _n(e,t.inConstruct,!0)&&!_n(e,t.notInConstruct,!1)}function _n(e,t,n){if(!t)return n;"string"==typeof t&&(t=[t]);let r=-1;for(;++r<t.length;)if(e.includes(t[r]))return!0;return!1}function Dn(e,t,n,r){let i=-1;for(;++i<n.unsafe.length;)if("\n"===n.unsafe[i].character&&Cn(n.stack,n.unsafe[i]))return/[ \t]/.test(r.before)?"":" ";return"\\\n"}function kn(e,t){return Boolean(!t.options.fences&&e.value&&!e.lang&&/[^ \r\n]/.test(e.value)&&!/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(e.value))}function Nn(e){if(!e._compiled){const t=(e.atBreak?"[\\r\\n][\\t ]*":"")+(e.before?"(?:"+e.before+")":"");e._compiled=new RegExp((t?"("+t+")":"")+(/[|\\{}()[\]^$+*?.-]/.test(e.character)?"\\":"")+e.character+(e.after?"(?:"+e.after+")":""),"g")}return e._compiled}function yn(e,t,n){const r=(n.before||"")+(t||"")+(n.after||""),i=[],o=[],s={};let a=-1;for(;++a<e.unsafe.length;){const t=e.unsafe[a];if(!Cn(e.stack,t))continue;const n=Nn(t);let o;for(;o=n.exec(r);){const e="before"in t||Boolean(t.atBreak),n="after"in t,r=o.index+(e?o[1].length:0);i.includes(r)?(s[r].before&&!e&&(s[r].before=!1),s[r].after&&!n&&(s[r].after=!1)):(i.push(r),s[r]={before:e,after:n})}}i.sort(bn);let u=n.before?n.before.length:0;const c=r.length-(n.after?n.after.length:0);for(a=-1;++a<i.length;){const e=i[a];e<u||e>=c||e+1<c&&i[a+1]===e+1&&s[e].after&&!s[e+1].before&&!s[e+1].after||i[a-1]===e-1&&s[e].before&&!s[e-1].before&&!s[e-1].after||(u!==e&&o.push(Sn(r.slice(u,e),"\\")),u=e,!/[!-/:-@[-`{-~]/.test(r.charAt(e))||n.encode&&n.encode.includes(r.charAt(e))?(o.push("&#x"+r.charCodeAt(e).toString(16).toUpperCase()+";"),u++):o.push("\\"))}return o.push(Sn(r.slice(u,c),n.after)),o.join("")}function bn(e,t){return e-t}function Sn(e,t){const n=/\\(?=[!-/:-@[-`{-~])/g,r=[],i=[],o=e+t;let s,a=-1,u=0;for(;s=n.exec(o);)r.push(s.index);for(;++a<r.length;)u!==r[a]&&i.push(e.slice(u,r[a])),i.push("\\"),u=r[a];return i.push(e.slice(u)),i.join("")}function xn(e,t,n){return(n?"":"    ")+e}function On(e){return e.label||!e.identifier?e.label||"":Et(e.identifier)}function Fn(e){const t=e.options.quote||'"';if('"'!==t&&"'"!==t)throw new Error("Cannot serialize title with `"+t+"` for `options.quote`, expected `\"`, or `'`");return t}function In(e,t,n){const r=t.indexStack,i=e.children||[],o=[];let s=-1,a=n.before;for(r.push(-1);++s<i.length;){const u=i[s];let c;if(r[r.length-1]=s,s+1<i.length){let n=t.handle.handlers[i[s+1].type];n&&n.peek&&(n=n.peek),c=n?n(i[s+1],e,t,{before:"",after:""}).charAt(0):""}else c=n.after;o.length>0&&("\r"===a||"\n"===a)&&"html"===u.type&&(o[o.length-1]=o[o.length-1].replace(/(\r?\n|\r)$/," "),a=" "),o.push(t.handle(u,e,t,{before:a,after:c})),a=o[o.length-1].slice(-1)}return r.pop(),o.join("")}function vn(e,t,n){const r=function(e){const t=e.options.emphasis||"*";if("*"!==t&&"_"!==t)throw new Error("Cannot serialize emphasis with `"+t+"` for `options.emphasis`, expected `*`, or `_`");return t}(n),i=n.enter("emphasis"),o=In(e,n,{before:r,after:r});return i(),r+o+r}function Ln(e,t){let n=!1;return Ft(e,(e=>{if("value"in e&&/\r?\n|\r/.test(e.value)||"break"===e.type)return n=!0,xt})),Boolean((!e.depth||e.depth<3)&&v(e)&&(t.options.setext||n))}function Rn(e){return e.value||""}function Mn(e,t,n){const r=Fn(n),i='"'===r?"Quote":"Apostrophe",o=n.enter("image");let s=n.enter("label"),a="!["+yn(n,e.alt,{before:"[",after:"]"})+"](";return s(),!e.url&&e.title||/[\0- \u007F]/.test(e.url)?(s=n.enter("destinationLiteral"),a+="<"+yn(n,e.url,{before:"<",after:">"})+">"):(s=n.enter("destinationRaw"),a+=yn(n,e.url,{before:"(",after:e.title?" ":")"})),s(),e.title&&(s=n.enter("title"+i),a+=" "+r+yn(n,e.title,{before:r,after:r})+r,s()),a+=")",o(),a}function Pn(e,t,n){const r=e.referenceType,i=n.enter("imageReference");let o=n.enter("label");const s=yn(n,e.alt,{before:"[",after:"]"});let a="!["+s+"]";o();const u=n.stack;n.stack=[],o=n.enter("reference");const c=yn(n,On(e),{before:"[",after:"]"});return o(),n.stack=u,i(),"full"!==r&&s&&s===c?"shortcut"!==r&&(a+="[]"):a+="["+c+"]",a}function wn(e,t,n){let r=e.value||"",i="`",o=-1;for(;new RegExp("(^|[^`])"+i+"([^`]|$)").test(r);)i+="`";for(/[^ \r\n]/.test(r)&&(/^[ \r\n]/.test(r)&&/[ \r\n]$/.test(r)||/^`|`$/.test(r))&&(r=" "+r+" ");++o<n.unsafe.length;){const e=n.unsafe[o],t=Nn(e);let i;if(e.atBreak)for(;i=t.exec(r);){let e=i.index;10===r.charCodeAt(e)&&13===r.charCodeAt(e-1)&&e--,r=r.slice(0,e)+" "+r.slice(i.index+1)}}return i+r+i}function Bn(e,t){const n=v(e);return Boolean(!t.options.resourceLink&&e.url&&!e.title&&e.children&&1===e.children.length&&"text"===e.children[0].type&&(n===e.url||"mailto:"+n===e.url)&&/^[a-z][a-z+.-]+:/i.test(e.url)&&!/[\0- <>\u007F]/.test(e.url))}function Hn(e,t,n){const r=Fn(n),i='"'===r?"Quote":"Apostrophe";let o,s,a;if(Bn(e,n)){const t=n.stack;return n.stack=[],o=n.enter("autolink"),a="<"+In(e,n,{before:"<",after:">"})+">",o(),n.stack=t,a}return o=n.enter("link"),s=n.enter("label"),a="["+In(e,n,{before:"[",after:"]"})+"](",s(),!e.url&&e.title||/[\0- \u007F]/.test(e.url)?(s=n.enter("destinationLiteral"),a+="<"+yn(n,e.url,{before:"<",after:">"})+">"):(s=n.enter("destinationRaw"),a+=yn(n,e.url,{before:"(",after:e.title?" ":")"})),s(),e.title&&(s=n.enter("title"+i),a+=" "+r+yn(n,e.title,{before:r,after:r})+r,s()),a+=")",o(),a}function Un(e,t,n){const r=e.referenceType,i=n.enter("linkReference");let o=n.enter("label");const s=In(e,n,{before:"[",after:"]"});let a="["+s+"]";o();const u=n.stack;n.stack=[],o=n.enter("reference");const c=yn(n,On(e),{before:"[",after:"]"});return o(),n.stack=u,i(),"full"!==r&&s&&s===c?"shortcut"!==r&&(a+="[]"):a+="["+c+"]",a}function Gn(e){const t=e.options.bullet||"*";if("*"!==t&&"+"!==t&&"-"!==t)throw new Error("Cannot serialize items with `"+t+"` for `options.bullet`, expected `*`, `+`, or `-`");return t}function qn(e){const t=e.options.bulletOrdered||".";if("."!==t&&")"!==t)throw new Error("Cannot serialize items with `"+t+"` for `options.bulletOrdered`, expected `.` or `)`");return t}function Kn(e){const t=e.options.rule||"*";if("*"!==t&&"-"!==t&&"_"!==t)throw new Error("Cannot serialize rules with `"+t+"` for `options.rule`, expected `*`, `-`, or `_`");return t}function zn(e,t,n){const r=function(e){const t=e.options.listItemIndent||"tab";if(1===t||"1"===t)return"one";if("tab"!==t&&"one"!==t&&"mixed"!==t)throw new Error("Cannot serialize items with `"+t+"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");return t}(n);let i=n.bulletCurrent||Gn(n);t&&"list"===t.type&&t.ordered&&(i=("number"==typeof t.start&&t.start>-1?t.start:1)+(!1===n.options.incrementListMarker?0:t.children.indexOf(e))+i);let o=i.length+1;("tab"===r||"mixed"===r&&(t&&"list"===t.type&&t.spread||e.spread))&&(o=4*Math.ceil(o/4));const s=n.enter("listItem"),a=Tn(En(e,n),(function(e,t,n){return t?(n?"":" ".repeat(o))+e:(n?i:i+" ".repeat(o-i.length))+e}));return s(),a}function jn(e,t,n){const r=function(e){const t=e.options.strong||"*";if("*"!==t&&"_"!==t)throw new Error("Cannot serialize strong with `"+t+"` for `options.strong`, expected `*`, or `_`");return t}(n),i=n.enter("strong"),o=In(e,n,{before:r,after:r});return i(),r+r+o+r+r}vn.peek=function(e,t,n){return n.options.emphasis||"*"},Rn.peek=function(){return"<"},Mn.peek=function(){return"!"},Pn.peek=function(){return"!"},wn.peek=function(){return"`"},Hn.peek=function(e,t,n){return Bn(e,n)?"<":"["},Un.peek=function(){return"["},jn.peek=function(e,t,n){return n.options.strong||"*"};const Vn={blockquote:function(e,t,n){const r=n.enter("blockquote"),i=Tn(En(e,n),An);return r(),i},break:Dn,code:function(e,t,n){const r=function(e){const t=e.options.fence||"`";if("`"!==t&&"~"!==t)throw new Error("Cannot serialize code with `"+t+"` for `options.fence`, expected `` ` `` or `~`");return t}(n),i=e.value||"",o="`"===r?"GraveAccent":"Tilde";let s,a;if(kn(e,n))a=n.enter("codeIndented"),s=Tn(i,xn);else{const t=r.repeat(Math.max(function(e,t){const n=String(e);let r=n.indexOf(t),i=r,o=0,s=0;if("string"!=typeof t||1!==t.length)throw new Error("Expected character");for(;-1!==r;)r===i?++o>s&&(s=o):o=1,i=r+1,r=n.indexOf(t,i);return s}(i,r)+1,3));let u;a=n.enter("codeFenced"),s=t,e.lang&&(u=n.enter("codeFencedLang"+o),s+=yn(n,e.lang,{before:"`",after:" ",encode:["`"]}),u()),e.lang&&e.meta&&(u=n.enter("codeFencedMeta"+o),s+=" "+yn(n,e.meta,{before:" ",after:"\n",encode:["`"]}),u()),s+="\n",i&&(s+=i+"\n"),s+=t}return a(),s},definition:function(e,t,n){const r=Fn(n),i='"'===r?"Quote":"Apostrophe",o=n.enter("definition");let s=n.enter("label"),a="["+yn(n,On(e),{before:"[",after:"]"})+"]: ";return s(),!e.url||/[\0- \u007F]/.test(e.url)?(s=n.enter("destinationLiteral"),a+="<"+yn(n,e.url,{before:"<",after:">"})+">"):(s=n.enter("destinationRaw"),a+=yn(n,e.url,{before:" ",after:" "})),s(),e.title&&(s=n.enter("title"+i),a+=" "+r+yn(n,e.title,{before:r,after:r})+r,s()),o(),a},emphasis:vn,hardBreak:Dn,heading:function(e,t,n){const r=Math.max(Math.min(6,e.depth||1),1);if(Ln(e,n)){const t=n.enter("headingSetext"),i=n.enter("phrasing"),o=In(e,n,{before:"\n",after:"\n"});return i(),t(),o+"\n"+(1===r?"=":"-").repeat(o.length-(Math.max(o.lastIndexOf("\r"),o.lastIndexOf("\n"))+1))}const i="#".repeat(r),o=n.enter("headingAtx"),s=n.enter("phrasing");let a=In(e,n,{before:"# ",after:"\n"});return/^[\t ]/.test(a)&&(a="&#x"+a.charCodeAt(0).toString(16).toUpperCase()+";"+a.slice(1)),a=a?i+" "+a:i,n.options.closeAtx&&(a+=" "+i),s(),o(),a},html:Rn,image:Mn,imageReference:Pn,inlineCode:wn,link:Hn,linkReference:Un,list:function(e,t,n){const r=n.enter("list"),i=n.bulletCurrent;let o=e.ordered?qn(n):Gn(n);const s=e.ordered?function(e){const t=qn(e),n=e.options.bulletOrderedOther;if(!n)return"."===t?")":".";if("."!==n&&")"!==n)throw new Error("Cannot serialize items with `"+n+"` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`");if(n===t)throw new Error("Expected `bulletOrdered` (`"+t+"`) and `bulletOrderedOther` (`"+n+"`) to be different");return n}(n):function(e){const t=Gn(e),n=e.options.bulletOther;if(!n)return"*"===t?"-":"*";if("*"!==n&&"+"!==n&&"-"!==n)throw new Error("Cannot serialize items with `"+n+"` for `options.bulletOther`, expected `*`, `+`, or `-`");if(n===t)throw new Error("Expected `bullet` (`"+t+"`) and `bulletOther` (`"+n+"`) to be different");return n}(n),a=n.bulletLastUsed;let u=!1;if(t&&(e.ordered?n.options.bulletOrderedOther:n.options.bulletOther)&&a&&o===a&&(u=!0),!e.ordered){const t=e.children?e.children[0]:void 0;if("*"!==o&&"-"!==o||!t||t.children&&t.children[0]||"list"!==n.stack[n.stack.length-1]||"listItem"!==n.stack[n.stack.length-2]||"list"!==n.stack[n.stack.length-3]||"listItem"!==n.stack[n.stack.length-4]||0!==n.indexStack[n.indexStack.length-1]||0!==n.indexStack[n.indexStack.length-2]||0!==n.indexStack[n.indexStack.length-3]||(u=!0),Kn(n)===o&&t){let t=-1;for(;++t<e.children.length;){const n=e.children[t];if(n&&"listItem"===n.type&&n.children&&n.children[0]&&"thematicBreak"===n.children[0].type){u=!0;break}}}}u&&(o=s),n.bulletCurrent=o;const c=En(e,n);return n.bulletLastUsed=o,n.bulletCurrent=i,r(),c},listItem:zn,paragraph:function(e,t,n){const r=n.enter("paragraph"),i=n.enter("phrasing"),o=In(e,n,{before:"\n",after:"\n"});return i(),r(),o},root:function(e,t,n){return En(e,n)},strong:jn,text:function(e,t,n,r){return yn(n,e.value,r)},thematicBreak:function(e,t,n){const r=(Kn(n)+(n.options.ruleSpaces?" ":"")).repeat(function(e){const t=e.options.ruleRepetition||3;if(t<3)throw new Error("Cannot serialize rules with repetition `"+t+"` for `options.ruleRepetition`, expected `3` or more");return t}(n));return n.options.ruleSpaces?r.slice(0,-1):r}},Yn=[function(e,t,n,r){if("code"===t.type&&kn(t,r)&&("list"===e.type||e.type===t.type&&kn(e,r)))return!1;if("list"===e.type&&e.type===t.type&&Boolean(e.ordered)===Boolean(t.ordered)&&!(e.ordered?r.options.bulletOrderedOther:r.options.bulletOther))return!1;if("spread"in n&&"boolean"==typeof n.spread){if("paragraph"===e.type&&(e.type===t.type||"definition"===t.type||"heading"===t.type&&Ln(t,r)))return;return n.spread?1:0}}],Qn=["autolink","destinationLiteral","destinationRaw","reference","titleQuote","titleApostrophe"],Wn=[{character:"\t",after:"[\\r\\n]",inConstruct:"phrasing"},{character:"\t",before:"[\\r\\n]",inConstruct:"phrasing"},{character:"\t",inConstruct:["codeFencedLangGraveAccent","codeFencedLangTilde"]},{character:"\r",inConstruct:["codeFencedLangGraveAccent","codeFencedLangTilde","codeFencedMetaGraveAccent","codeFencedMetaTilde","destinationLiteral","headingAtx"]},{character:"\n",inConstruct:["codeFencedLangGraveAccent","codeFencedLangTilde","codeFencedMetaGraveAccent","codeFencedMetaTilde","destinationLiteral","headingAtx"]},{character:" ",after:"[\\r\\n]",inConstruct:"phrasing"},{character:" ",before:"[\\r\\n]",inConstruct:"phrasing"},{character:" ",inConstruct:["codeFencedLangGraveAccent","codeFencedLangTilde"]},{character:"!",after:"\\[",inConstruct:"phrasing",notInConstruct:Qn},{character:'"',inConstruct:"titleQuote"},{atBreak:!0,character:"#"},{character:"#",inConstruct:"headingAtx",after:"(?:[\r\n]|$)"},{character:"&",after:"[#A-Za-z]",inConstruct:"phrasing"},{character:"'",inConstruct:"titleApostrophe"},{character:"(",inConstruct:"destinationRaw"},{before:"\\]",character:"(",inConstruct:"phrasing",notInConstruct:Qn},{atBreak:!0,before:"\\d+",character:")"},{character:")",inConstruct:"destinationRaw"},{atBreak:!0,character:"*"},{character:"*",inConstruct:"phrasing",notInConstruct:Qn},{atBreak:!0,character:"+"},{atBreak:!0,character:"-"},{atBreak:!0,before:"\\d+",character:".",after:"(?:[ \t\r\n]|$)"},{atBreak:!0,character:"<",after:"[!/?A-Za-z]"},{character:"<",after:"[!/?A-Za-z]",inConstruct:"phrasing",notInConstruct:Qn},{character:"<",inConstruct:"destinationLiteral"},{atBreak:!0,character:"="},{atBreak:!0,character:">"},{character:">",inConstruct:"destinationLiteral"},{atBreak:!0,character:"["},{character:"[",inConstruct:"phrasing",notInConstruct:Qn},{character:"[",inConstruct:["label","reference"]},{character:"\\",after:"[\\r\\n]",inConstruct:"phrasing"},{character:"]",inConstruct:["label","reference"]},{atBreak:!0,character:"_"},{character:"_",inConstruct:"phrasing",notInConstruct:Qn},{atBreak:!0,character:"`"},{character:"`",inConstruct:["codeFencedLangGraveAccent","codeFencedMetaGraveAccent"]},{character:"`",inConstruct:"phrasing",notInConstruct:Qn},{atBreak:!0,character:"~"}];function Xn(e,t={}){const n={enter:function(e){return n.stack.push(e),function(){n.stack.pop()}},stack:[],unsafe:[],join:[],handlers:{},options:{},indexStack:[]};mn(n,{unsafe:Wn,join:Yn,handlers:Vn}),mn(n,t),n.options.tightDefinitions&&mn(n,{join:[Jn]}),n.handle=dn("type",{invalid:$n,unknown:Zn,handlers:n.handlers});let r=n.handle(e,null,n,{before:"\n",after:"\n"});return r&&10!==r.charCodeAt(r.length-1)&&13!==r.charCodeAt(r.length-1)&&(r+="\n"),r}function $n(e){throw new Error("Cannot handle value `"+e+"`, expected node")}function Zn(e){throw new Error("Cannot handle unknown node `"+e.type+"`")}function Jn(e,t){if("definition"===e.type&&e.type===t.type)return 0}var er=n(291);const tr=Object.assign(nr(Error),{eval:nr(EvalError),range:nr(RangeError),reference:nr(ReferenceError),syntax:nr(SyntaxError),type:nr(TypeError),uri:nr(URIError)});function nr(e){return t.displayName=e.displayName||e.name,t;function t(t,...n){const r=t?er(t,...n):t;return new e(r)}}const rr={}.hasOwnProperty,ir={yaml:"-",toml:"+"};function or(e="yaml"){const t=[];let n=-1;for(Array.isArray(e)||(e=[e]);++n<e.length;)t[n]=sr(e[n]);return t}function sr(e){let t=e;if("string"==typeof t){if(!rr.call(ir,t))throw tr("Missing matter definition for `%s`",t);t={type:t,marker:ir[t]}}else if("object"!=typeof t)throw tr("Expected matter to be an object, not `%j`",t);if(!rr.call(t,"type"))throw tr("Missing `type` in matter `%j`",t);if(!rr.call(t,"fence")&&!rr.call(t,"marker"))throw tr("Missing `marker` or `fence` in matter `%j`",t);return t}function ar(e){const t=or(e),n={};let r,i,o=-1;for(;++o<t.length;)r=t[o],i=cr(r,"open").charCodeAt(0),i in n?n[i].push(ur(r)):n[i]=[ur(r)];return{flow:n}}function ur(e){const t=e.type,n=e.anywhere,r=t+"Value",i=t+"Fence",o=i+"Sequence",s={tokenize:function(e,t,n){let r=0;return function(t){return t===a.charCodeAt(r)?(e.enter(i),e.enter(o),s(t)):n(t)};function s(t){return r===a.length?(e.exit(o),X(t)?(e.enter("whitespace"),u(t)):c(t)):t===a.charCodeAt(r++)?(e.consume(t),s):n(t)}function u(t){return X(t)?(e.consume(t),u):(e.exit("whitespace"),c(t))}function c(r){return null===r||W(r)?(e.exit(i),t(r)):n(r)}},partial:!0};let a;return{tokenize:function(i,o,u){const c=this;return function(r){const o=c.now();return 1!==o.column||!n&&1!==o.line?u(r):(i.enter(t),a=cr(e,"open"),i.attempt(s,l,u)(r))};function l(t){return a=cr(e,"close"),f(t)}function p(e){return null===e||W(e)?f(e):(i.enter(r),h(e))}function h(e){return null===e||W(e)?(i.exit(r),f(e)):(i.consume(e),h)}function f(e){return null===e?u(e):(i.enter("lineEnding"),i.consume(e),i.exit("lineEnding"),i.attempt(s,d,p))}function d(e){return i.exit(t),o(e)}},concrete:!0}}function cr(e,t){return e.marker?lr(e.marker,t).repeat(3):lr(e.fence,t)}function lr(e,t){return"string"==typeof e?e:e[t]}function pr(e){const t=or(e),n={},r={};let i=-1;for(;++i<t.length;){const e=t[i];n[e.type]=hr(e),r[e.type]=fr,r[e.type+"Value"]=dr}return{enter:n,exit:r}}function hr(e){return function(t){this.enter({type:e.type,value:""},t),this.buffer()}}function fr(e){const t=this.resume();this.exit(e).value=t.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,"")}function dr(e){this.config.enter.data.call(this,e),this.config.exit.data.call(this,e)}function mr(e){const t=[],n={},r=or(e);let i=-1;for(;++i<r.length;){const e=r[i];n[e.type]=Er(e),t.push({atBreak:!0,character:gr(e,"open").charAt(0)})}return{unsafe:t,handlers:n}}function Er(e){const t=gr(e,"open"),n=gr(e,"close");return function(e){return t+(e.value?"\n"+e.value:"")+"\n"+n}}function gr(e,t){return e.marker?Tr(e.marker,t).repeat(3):Tr(e.fence,t)}function Tr(e,t){return"string"==typeof e?e:e[t]}var Ar=n(671);function Cr(e){return new RegExp("^("+e+")$","i")}const _r=new Ar;function Dr(e,t,n){const r=n.skip&&Cr(n.skip),i=Nt(n.parents||(t=>t===e)),o=[];let s,a,u;var c,l,p;return _r.reset(),l=function(e,c,l){const p=v(e,{includeImageAlt:!1}),h=e.data&&e.data.hProperties&&e.data.hProperties.id,f=_r.slug(h||p);if(i(l)){if(null!==c&&t&&!s&&t.test(p))return s=c+1,void(u=e);null!==c&&u&&!a&&e.depth<=u.depth&&(a=c),!a&&t||n.maxDepth&&!(e.depth<=n.maxDepth)||r&&r.test(p)||o.push({depth:e.depth,children:e.children,id:f})}},"function"==typeof(c="heading")&&"function"!=typeof l&&(p=l,l=c,c=null),function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null);var i=Nt(t),o=r?-1:1;!function e(s,a,u){var c,l,p="object"==typeof s&&null!==s?s:{};return"string"==typeof p.type&&(c="string"==typeof p.tagName?p.tagName:"string"==typeof p.name?p.name:void 0,Object.defineProperty(h,"name",{value:"node ("+(l=p.type+(c?"<"+c+">":""),"[33m"+l+"[39m)")})),h;function h(){var c,l,p,h=[];if((!t||i(s,a,u[u.length-1]||null))&&(h=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(n(s,u)),!1===h[0]))return h;if(s.children&&"skip"!==h[0])for(l=(r?s.children.length:-1)+o,p=u.concat(s);l>-1&&l<s.children.length;){if(!1===(c=e(s.children[l],l,p)())[0])return c;l="number"==typeof c[1]?c[1]:l+o}return h}}(e,null,[])()}(e,c,(function(e,t){var n=t[t.length-1];return l(e,n?n.children.indexOf(e):null,n)}),p),{index:s||-1,endIndex:s?a||e.children.length:-1,map:o}}function kr(e,t){const{ordered:n=!1,tight:r=!1,prefix:i=null}=t,o={type:"list",ordered:n,spread:!1,children:[]};let s=Number.POSITIVE_INFINITY,a=-1;for(;++a<e.length;)e[a].depth<s&&(s=e[a].depth);for(a=-1;++a<e.length;)e[a].depth-=s-1;for(a=-1;++a<e.length;)Nr(e[a],o,{ordered:n,tight:r,prefix:i});return o}function Nr(e,t,n){let r=-1;if("list"===t.type)if(1===e.depth)t.children.push({type:"listItem",spread:!1,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#"+(n.prefix||"")+e.id,children:yr(e.children)}]}]});else if(t.children.length>0)Nr(e,t.children[t.children.length-1],n);else{const r={type:"listItem",spread:!1,children:[]};t.children.push(r),Nr(e,r,n)}else if(t.children[t.children.length-1]&&"list"===t.children[t.children.length-1].type)e.depth--,Nr(e,t.children[t.children.length-1],n);else{const r={type:"list",ordered:n.ordered,spread:!1,children:[]};t.children.push(r),e.depth--,Nr(e,r,n)}if("list"!==t.type||n.tight)t.spread=!n.tight;else for(t.spread=!1;++r<t.children.length;)if(t.children[r].children.length>1){t.spread=!0;break}}function yr(e){let t=[],n=-1;if(e)for(;++n<e.length;)t=t.concat(br(e[n]));return t}function br(e){if("link"===e.type||"linkReference"===e.type||"footnote"===e.type||"footnoteReference"===e.type)return yr(e.children);if("children"in e){const{children:t,position:n,...r}=e;return Object.assign(s(!0,{},r),{children:yr(e.children)})}const{position:t,...n}=e;return s(!0,{},n)}const Sr={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(t){return 87===t||119===t?(e.consume(t),i):n(t)}function i(t){return 87===t||119===t?(e.consume(t),o):n(t)}function o(t){return 46===t?(e.consume(t),s):n(t)}function s(e){return null===e||W(e)?n(e):t(e)}},partial:!0},xr={tokenize:function(e,t,n){let r,i;return o;function o(t){return 38===t?e.check(Ir,a,s)(t):46===t||95===t?e.check(Fr,a,s)(t):null===t||Y(t)||$(t)||45!==t&&Z(t)?a(t):(e.consume(t),o)}function s(t){return 46===t?(i=r,r=void 0,e.consume(t),o):(95===t&&(r=!0),e.consume(t),o)}function a(e){return i||r?n(e):t(e)}},partial:!0},Or={tokenize:function(e,t){let n=0;return r;function r(s){return 38===s?e.check(Ir,t,i)(s):(40===s&&n++,41===s?e.check(Fr,o,i)(s):Hr(s)?t(s):Br(s)?e.check(Fr,t,i)(s):(e.consume(s),r))}function i(t){return e.consume(t),r}function o(e){return n--,n<0?t(e):i(e)}},partial:!0},Fr={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(i){return Br(i)?(e.consume(i),r):Hr(i)?t(i):n(i)}},partial:!0},Ir={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(t){return G(t)?(e.consume(t),r):59===t?(e.consume(t),i):n(t)}function i(e){return Hr(e)?t(e):n(e)}},partial:!0},vr={tokenize:function(e,t,n){const r=this;return function(t){return 87!==t&&119!==t||!Gr(r.previous)||zr(r.events)?n(t):(e.enter("literalAutolink"),e.enter("literalAutolinkWww"),e.check(Sr,e.attempt(xr,e.attempt(Or,i),n),n)(t))};function i(n){return e.exit("literalAutolinkWww"),e.exit("literalAutolink"),t(n)}},previous:Gr},Lr={tokenize:function(e,t,n){const r=this;return function(t){return 72!==t&&104!==t||!qr(r.previous)||zr(r.events)?n(t):(e.enter("literalAutolink"),e.enter("literalAutolinkHttp"),e.consume(t),i)};function i(t){return 84===t||116===t?(e.consume(t),o):n(t)}function o(t){return 84===t||116===t?(e.consume(t),s):n(t)}function s(t){return 80===t||112===t?(e.consume(t),a):n(t)}function a(t){return 83===t||115===t?(e.consume(t),u):u(t)}function u(t){return 58===t?(e.consume(t),c):n(t)}function c(t){return 47===t?(e.consume(t),l):n(t)}function l(t){return 47===t?(e.consume(t),p):n(t)}function p(t){return null===t||Y(t)||$(t)||Z(t)?n(t):e.attempt(xr,e.attempt(Or,h),n)(t)}function h(n){return e.exit("literalAutolinkHttp"),e.exit("literalAutolink"),t(n)}},previous:qr},Rr={tokenize:function(e,t,n){const r=this;let i,o;return function(t){return Ur(t)&&Kr(r.previous)&&!zr(r.events)?(e.enter("literalAutolink"),e.enter("literalAutolinkEmail"),s(t)):n(t)};function s(t){return Ur(t)?(e.consume(t),s):64===t?(e.consume(t),a):n(t)}function a(t){return 46===t?e.check(Fr,p,u)(t):45===t||95===t?e.check(Fr,n,c)(t):z(t)?(!o&&q(t)&&(o=!0),e.consume(t),a):p(t)}function u(t){return e.consume(t),i=!0,o=void 0,a}function c(t){return e.consume(t),l}function l(t){return 46===t?e.check(Fr,n,u)(t):a(t)}function p(r){return i&&!o?(e.exit("literalAutolinkEmail"),e.exit("literalAutolink"),t(r)):n(r)}},previous:Kr},Mr={},Pr={text:Mr};let wr=48;for(;wr<123;)Mr[wr]=Rr,wr++,58===wr?wr=65:91===wr&&(wr=97);function Br(e){return 33===e||34===e||39===e||41===e||42===e||44===e||46===e||58===e||59===e||60===e||63===e||95===e||126===e}function Hr(e){return null===e||60===e||Q(e)}function Ur(e){return 43===e||45===e||46===e||95===e||z(e)}function Gr(e){return null===e||40===e||42===e||95===e||126===e||Q(e)}function qr(e){return null===e||!G(e)}function Kr(e){return 47!==e&&qr(e)}function zr(e){let t=e.length,n=!1;for(;t--;){const r=e[t][1];if(("labelLink"===r.type||"labelImage"===r.type)&&!r._balanced){n=!0;break}if(r._gfmAutolinkLiteralWalkedInto){n=!1;break}}return e.length>0&&!n&&(e[e.length-1][1]._gfmAutolinkLiteralWalkedInto=!0),n}Mr[43]=Rr,Mr[45]=Rr,Mr[46]=Rr,Mr[95]=Rr,Mr[72]=[Rr,Lr],Mr[104]=[Rr,Lr],Mr[87]=[Rr,vr],Mr[119]=[Rr,vr];const jr={tokenize:function(e,t,n){const r=this;return ee(e,(function(e){const i=r.events[r.events.length-1];return i&&"gfmFootnoteDefinitionIndent"===i[1].type&&4===i[2].sliceSerialize(i[1],!0).length?t(e):n(e)}),"gfmFootnoteDefinitionIndent",5)},partial:!0};function Vr(e,t,n){const r=this;let i=r.events.length;const o=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let s;for(;i--;){const e=r.events[i][1];if("labelImage"===e.type){s=e;break}if("gfmFootnoteCall"===e.type||"labelLink"===e.type||"label"===e.type||"image"===e.type||"link"===e.type)break}return function(i){if(!s||!s._balanced)return n(i);const a=Se(r.sliceSerialize({start:s.end,end:r.now()}));return 94===a.charCodeAt(0)&&o.includes(a.slice(1))?(e.enter("gfmFootnoteCallLabelMarker"),e.consume(i),e.exit("gfmFootnoteCallLabelMarker"),t(i)):n(i)}}function Yr(e,t){let n,r=e.length;for(;r--;)if("labelImage"===e[r][1].type&&"enter"===e[r][0]){n=e[r][1];break}e[r+1][1].type="data",e[r+3][1].type="gfmFootnoteCallLabelMarker";const i={type:"gfmFootnoteCall",start:Object.assign({},e[r+3][1].start),end:Object.assign({},e[e.length-1][1].end)},o={type:"gfmFootnoteCallMarker",start:Object.assign({},e[r+3][1].end),end:Object.assign({},e[r+3][1].end)};o.end.column++,o.end.offset++,o.end._bufferIndex++;const s={type:"gfmFootnoteCallString",start:Object.assign({},o.end),end:Object.assign({},e[e.length-1][1].start)},a={type:"chunkString",contentType:"string",start:Object.assign({},s.start),end:Object.assign({},s.end)},u=[e[r+1],e[r+2],["enter",i,t],e[r+3],e[r+4],["enter",o,t],["exit",o,t],["enter",s,t],["enter",a,t],["exit",a,t],["exit",s,t],e[e.length-2],e[e.length-1],["exit",i,t]];return e.splice(r,e.length-r+1,...u),e}function Qr(e,t,n){const r=this,i=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let o,s=0;return function(t){return e.enter("gfmFootnoteCall"),e.enter("gfmFootnoteCallLabelMarker"),e.consume(t),e.exit("gfmFootnoteCallLabelMarker"),a};function a(t){return 94!==t?n(t):(e.enter("gfmFootnoteCallMarker"),e.consume(t),e.exit("gfmFootnoteCallMarker"),e.enter("gfmFootnoteCallString"),e.enter("chunkString").contentType="string",u)}function u(a){let l;return null===a||91===a||s++>999?n(a):93===a?o?(e.exit("chunkString"),l=e.exit("gfmFootnoteCallString"),i.includes(Se(r.sliceSerialize(l)))?function(n){return e.enter("gfmFootnoteCallLabelMarker"),e.consume(n),e.exit("gfmFootnoteCallLabelMarker"),e.exit("gfmFootnoteCall"),t}(a):n(a)):n(a):(e.consume(a),Q(a)||(o=!0),92===a?c:u)}function c(t){return 91===t||92===t||93===t?(e.consume(t),s++,u):u(t)}}function Wr(e,t,n){const r=this,i=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let o,s,a=0;return function(t){return e.enter("gfmFootnoteDefinition")._container=!0,e.enter("gfmFootnoteDefinitionLabel"),e.enter("gfmFootnoteDefinitionLabelMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionLabelMarker"),u};function u(t){return 94===t?(e.enter("gfmFootnoteDefinitionMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionMarker"),e.enter("gfmFootnoteDefinitionLabelString"),c):n(t)}function c(t){let i;return null===t||91===t||a>999?n(t):93===t?s?(i=e.exit("gfmFootnoteDefinitionLabelString"),o=Se(r.sliceSerialize(i)),e.enter("gfmFootnoteDefinitionLabelMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionLabelMarker"),e.exit("gfmFootnoteDefinitionLabel"),h):n(t):W(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),a++,c):(e.enter("chunkString").contentType="string",l(t))}function l(t){return null===t||W(t)||91===t||93===t||a>999?(e.exit("chunkString"),c(t)):(Q(t)||(s=!0),a++,e.consume(t),92===t?p:l)}function p(t){return 91===t||92===t||93===t?(e.consume(t),a++,l):l(t)}function h(t){return 58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),ee(e,f,"gfmFootnoteDefinitionWhitespace")):n(t)}function f(e){return i.includes(o)||i.push(o),t(e)}}function Xr(e,t,n){return e.check(ie,t,e.attempt(jr,t,n))}function $r(e){e.exit("gfmFootnoteDefinition")}function Zr(e={}){let t=e.singleTilde;const n={tokenize:function(e,n,r){const i=this.previous,o=this.events;let s=0;return function(t){return 126===i&&"characterEscape"!==o[o.length-1][1].type?r(t):(e.enter("strikethroughSequenceTemporary"),a(t))};function a(o){const u=Xe(i);if(126===o)return s>1?r(o):(e.consume(o),s++,a);if(s<2&&!t)return r(o);const c=e.exit("strikethroughSequenceTemporary"),l=Xe(o);return c._open=!l||2===l&&Boolean(u),c._close=!u||2===u&&Boolean(l),n(o)}},resolveAll:function(e,t){let n=-1;for(;++n<e.length;)if("enter"===e[n][0]&&"strikethroughSequenceTemporary"===e[n][1].type&&e[n][1]._close){let r=n;for(;r--;)if("exit"===e[r][0]&&"strikethroughSequenceTemporary"===e[r][1].type&&e[r][1]._open&&e[n][1].end.offset-e[n][1].start.offset==e[r][1].end.offset-e[r][1].start.offset){e[n][1].type="strikethroughSequence",e[r][1].type="strikethroughSequence";const i={type:"strikethrough",start:Object.assign({},e[r][1].start),end:Object.assign({},e[n][1].end)},o={type:"strikethroughText",start:Object.assign({},e[r][1].end),end:Object.assign({},e[n][1].start)},s=[["enter",i,t],["enter",e[r][1],t],["exit",e[r][1],t],["enter",o,t]];M(s,s.length,0,Ee(t.parser.constructs.insideSpan.null,e.slice(r+1,n),t)),M(s,s.length,0,[["exit",o,t],["enter",e[n][1],t],["exit",e[n][1],t],["exit",i,t]]),M(e,r-1,n-r+3,s),n=r+s.length-2;break}}for(n=-1;++n<e.length;)"strikethroughSequenceTemporary"===e[n][1].type&&(e[n][1].type="data");return e}};return null==t&&(t=!0),{text:{126:n},insideSpan:{null:[n]},attentionMarkers:{null:[126]}}}const Jr={flow:{null:{tokenize:function(e,t,n){const r=this,i=[];let o,s,a=0;return function(t){return e.enter("table")._align=i,e.enter("tableHead"),e.enter("tableRow"),124===t?u(t):(a++,e.enter("temporaryTableCellContent"),p(t))};function u(t){return e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),o=!0,c}function c(t){return null===t||W(t)?function(t){if(null===t)return n(t);e.exit("tableRow"),e.exit("tableHead");const i=r.interrupt;return r.interrupt=!0,e.attempt({tokenize:x,partial:!0},(function(t){return r.interrupt=i,e.enter("tableDelimiterRow"),f(t)}),(function(e){return r.interrupt=i,n(e)}))(t)}(t):X(t)?(e.enter("whitespace"),e.consume(t),l):(o&&(o=void 0,a++),124===t?u(t):(e.enter("temporaryTableCellContent"),p(t)))}function l(t){return X(t)?(e.consume(t),l):(e.exit("whitespace"),c(t))}function p(t){return null===t||124===t||Q(t)?(e.exit("temporaryTableCellContent"),c(t)):(e.consume(t),92===t?h:p)}function h(t){return 92===t||124===t?(e.consume(t),p):p(t)}function f(t){return null===t||W(t)?T(t):X(t)?(e.enter("whitespace"),e.consume(t),d):45===t?(e.enter("tableDelimiterFiller"),e.consume(t),s=!0,i.push("none"),m):58===t?(e.enter("tableDelimiterAlignment"),e.consume(t),e.exit("tableDelimiterAlignment"),i.push("left"),E):124===t?(e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),f):n(t)}function d(t){return X(t)?(e.consume(t),d):(e.exit("whitespace"),f(t))}function m(t){return 45===t?(e.consume(t),m):(e.exit("tableDelimiterFiller"),58===t?(e.enter("tableDelimiterAlignment"),e.consume(t),e.exit("tableDelimiterAlignment"),i[i.length-1]="left"===i[i.length-1]?"center":"right",g):f(t))}function E(t){return 45===t?(e.enter("tableDelimiterFiller"),e.consume(t),s=!0,m):n(t)}function g(t){return null===t||W(t)?T(t):X(t)?(e.enter("whitespace"),e.consume(t),d):124===t?(e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),f):n(t)}function T(t){return e.exit("tableDelimiterRow"),s&&a===i.length?null===t?A(t):e.check(ei,A,e.attempt({tokenize:x,partial:!0},ee(e,C,"linePrefix",4),A))(t):n(t)}function A(n){return e.exit("table"),t(n)}function C(t){return e.enter("tableBody"),_(t)}function _(t){return e.enter("tableRow"),124===t?D(t):(e.enter("temporaryTableCellContent"),y(t))}function D(t){return e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),k}function k(t){return null===t||W(t)?function(t){return e.exit("tableRow"),null===t?S(t):e.check(ei,S,e.attempt({tokenize:x,partial:!0},ee(e,_,"linePrefix",4),S))(t)}(t):X(t)?(e.enter("whitespace"),e.consume(t),N):124===t?D(t):(e.enter("temporaryTableCellContent"),y(t))}function N(t){return X(t)?(e.consume(t),N):(e.exit("whitespace"),k(t))}function y(t){return null===t||124===t||Q(t)?(e.exit("temporaryTableCellContent"),k(t)):(e.consume(t),92===t?b:y)}function b(t){return 92===t||124===t?(e.consume(t),y):y(t)}function S(t){return e.exit("tableBody"),A(t)}function x(e,t,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ee(e,i,"linePrefix")};function i(i){if(r.parser.lazy[r.now().line]||null===i||W(i))return n(i);const o=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?n(i):(r._gfmTableDynamicInterruptHack=!0,e.check(r.parser.constructs.flow,(function(e){return r._gfmTableDynamicInterruptHack=!1,n(e)}),(function(e){return r._gfmTableDynamicInterruptHack=!1,t(e)}))(i))}}},resolve:function(e,t){let n,r,i,o,s,a,u,c=-1;for(;++c<e.length;){const l=e[c][1];if(i&&("temporaryTableCellContent"===l.type&&(o=o||c,s=c),("tableCellDivider"===l.type||"tableRow"===l.type)&&s)){const n={type:"tableContent",start:e[o][1].start,end:e[s][1].end},r={type:"chunkText",start:n.start,end:n.end,contentType:"text"};e.splice(o,s-o+1,["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]),c-=s-o-3,o=void 0,s=void 0}if("exit"===e[c][0]&&void 0!==a&&a+(u?0:1)<c&&("tableCellDivider"===l.type||"tableRow"===l.type&&(a+3<c||"whitespace"!==e[a][1].type))){const i={type:r?"tableDelimiter":n?"tableHeader":"tableData",start:e[a][1].start,end:e[c][1].end};e.splice(c+("tableCellDivider"===l.type?1:0),0,["exit",i,t]),e.splice(a,0,["enter",i,t]),c+=2,a=c+1,u=!0}"tableRow"===l.type&&(i="enter"===e[c][0],i&&(a=c+1,u=!1)),"tableDelimiterRow"===l.type&&(r="enter"===e[c][0],r&&(a=c+1,u=!1)),"tableHead"===l.type&&(n="enter"===e[c][0])}return e}}}},ei={tokenize:function(e,t,n){let r=0;return function(t){return e.enter("check"),e.consume(t),i};function i(o){return-1===o||32===o?(e.consume(o),r++,4===r?t:i):null===o||Q(o)?t(o):n(o)}},partial:!0},ti={tokenize:function(e,t,n){const r=this;return function(t){return null===r.previous&&r._gfmTasklistFirstContentOfListItem?(e.enter("taskListCheck"),e.enter("taskListCheckMarker"),e.consume(t),e.exit("taskListCheckMarker"),i):n(t)};function i(t){return Q(t)?(e.enter("taskListCheckValueUnchecked"),e.consume(t),e.exit("taskListCheckValueUnchecked"),o):88===t||120===t?(e.enter("taskListCheckValueChecked"),e.consume(t),e.exit("taskListCheckValueChecked"),o):n(t)}function o(r){return 93===r?(e.enter("taskListCheckMarker"),e.consume(r),e.exit("taskListCheckMarker"),e.exit("taskListCheck"),e.check({tokenize:ri},t,n)):n(r)}}},ni={text:{91:ti}};function ri(e,t,n){const r=this;return ee(e,(function(e){const i=r.events[r.events.length-1];return(i&&"whitespace"===i[1].type||W(e))&&null!==e?t(e):n(e)}),"whitespace")}function ii(e){return B([Pr,{document:{91:{tokenize:Wr,continuation:{tokenize:Xr},exit:$r}},text:{91:{tokenize:Qr},93:{add:"after",tokenize:Vr,resolveTo:Yr}}},Zr(e),Jr,ni])}function oi(e,t){const n=String(e);if("string"!=typeof t)throw new TypeError("Expected character");let r=0,i=n.indexOf(t);for(;-1!==i;)r++,i=n.indexOf(t,i+t.length);return r}const si=function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null);var i=Nt(t),o=r?-1:1;!function e(s,a,u){var c,l,p="object"==typeof s&&null!==s?s:{};return"string"==typeof p.type&&(c="string"==typeof p.tagName?p.tagName:"string"==typeof p.name?p.name:void 0,Object.defineProperty(h,"name",{value:"node ("+(l=p.type+(c?"<"+c+">":""),"[33m"+l+"[39m)")})),h;function h(){var c,l,p,h=[];if((!t||i(s,a,u[u.length-1]||null))&&(h=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(n(s,u)),!1===h[0]))return h;if(s.children&&"skip"!==h[0])for(l=(r?s.children.length:-1)+o,p=u.concat(s);l>-1&&l<s.children.length;){if(!1===(c=e(s.children[l],l,p)())[0])return c;l="number"==typeof c[1]?c[1]:l+o}return h}}(e,null,[])()},ai={}.hasOwnProperty;function ui(e){return"string"==typeof e?new RegExp(function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(e),"g"):e}function ci(e){return"function"==typeof e?e:()=>e}const li="phrasing",pi=["autolink","link","image","label"],hi={transforms:[function(e){!function(e,t,n,r){let i,o;"string"==typeof t||t instanceof RegExp?(o=[[t,n]],i=r):(o=t,i=n),i||(i={});const s=Nt(i.ignore||[]),a=function(e){const t=[];if("object"!=typeof e)throw new TypeError("Expected array or object as schema");if(Array.isArray(e)){let n=-1;for(;++n<e.length;)t.push([ui(e[n][0]),ci(e[n][1])])}else{let n;for(n in e)ai.call(e,n)&&t.push([ui(n),ci(e[n])])}return t}(o);let u=-1;for(;++u<a.length;)si(e,"text",c);return e;function c(e,t){let n,r=-1;for(;++r<t.length;){const e=t[r];if(s(e,n?n.children.indexOf(e):void 0,n))return;n=e}if(n)return function(e,t){const n=a[u][0],r=a[u][1];let i,o=0,s=t.children.indexOf(e),c=[];n.lastIndex=0;let l=n.exec(e.value);for(;l;){i=l.index;let t=r(...l,{index:l.index,input:l.input});if("string"==typeof t&&(t=t.length>0?{type:"text",value:t}:void 0),!1!==t&&(o!==i&&c.push({type:"text",value:e.value.slice(o,i)}),Array.isArray(t)?c.push(...t):t&&c.push(t),o=i+l[0].length),!n.global)break;l=n.exec(e.value)}return void 0===i?(c=[e],s--):(o<e.value.length&&c.push({type:"text",value:e.value.slice(o)}),t.children.splice(s,1,...c)),s+c.length+1}(e,n)}}(e,[[/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi,mi],[/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g,Ei]],{ignore:["link","linkReference"]})}],enter:{literalAutolink:function(e){this.enter({type:"link",title:null,url:"",children:[]},e)},literalAutolinkEmail:di,literalAutolinkHttp:di,literalAutolinkWww:di},exit:{literalAutolink:function(e){this.exit(e)},literalAutolinkEmail:function(e){this.config.exit.autolinkEmail.call(this,e)},literalAutolinkHttp:function(e){this.config.exit.autolinkProtocol.call(this,e)},literalAutolinkWww:function(e){this.config.exit.data.call(this,e),this.stack[this.stack.length-1].url="http://"+this.sliceSerialize(e)}}},fi={unsafe:[{character:"@",before:"[+\\-.\\w]",after:"[\\-.\\w]",inConstruct:li,notInConstruct:pi},{character:".",before:"[Ww]",after:"[\\-.\\w]",inConstruct:li,notInConstruct:pi},{character:":",before:"[ps]",after:"\\/",inConstruct:li,notInConstruct:pi}]};function di(e){this.config.enter.autolinkProtocol.call(this,e)}function mi(e,t,n,r,i){let o="";if(!gi(i))return!1;if(/^w/i.test(t)&&(n=t+n,t="",o="http://"),!function(e){const t=e.split(".");return!(t.length<2||t[t.length-1]&&(/_/.test(t[t.length-1])||!/[a-zA-Z\d]/.test(t[t.length-1]))||t[t.length-2]&&(/_/.test(t[t.length-2])||!/[a-zA-Z\d]/.test(t[t.length-2])))}(n))return!1;const s=function(e){const t=/[!"&'),.:;<>?\]}]+$/.exec(e);let n,r,i,o;if(t)for(e=e.slice(0,t.index),o=t[0],n=o.indexOf(")"),r=oi(e,"("),i=oi(e,")");-1!==n&&r>i;)e+=o.slice(0,n+1),o=o.slice(n+1),n=o.indexOf(")"),i++;return[e,o]}(n+r);if(!s[0])return!1;const a={type:"link",title:null,url:o+t+s[0],children:[{type:"text",value:t+s[0]}]};return s[1]?[a,{type:"text",value:s[1]}]:a}function Ei(e,t,n,r){return!(!gi(r,!0)||/[_-\d]$/.test(n))&&{type:"link",title:null,url:"mailto:"+t+"@"+n,children:[{type:"text",value:t+"@"+n}]}}function gi(e,t){const n=e.input.charCodeAt(e.index-1);return(0===e.index||$(n)||Z(n))&&(!t||47!==n)}let Ti=!1,Ai=!1;function Ci(){return e.peek=function(){return"["},{unsafe:[{character:"[",inConstruct:["phrasing","label","reference"]}],handlers:{footnoteDefinition:function(e,t,n){const r=n.enter("footnoteDefinition"),i=n.enter("label"),o=yn(n,On(e),{before:"^",after:"]"}),s="[^"+o+"]:";i();const a=Tn(En(e,n),(function(e,t,n){return t?(n?"":"    ")+e:(n?s:s+" ")+e}));return r(),!Ti&&o.includes(":")&&(console.warn("[mdast-util-gfm-footnote] Warning: Found a colon in footnote identifier `"+o+"`. GitHub currently crahes on colons in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)"),Ti=!0),Ai||Ft(e,"list",(()=>(console.warn("[mdast-util-gfm-footnote] Warning: Found a list in a footnote definition. GitHub currently crahes on lists in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)"),Ai=!0,xt))),a},footnoteReference:e}};function e(e,t,n){const r=n.enter("footnoteReference"),i=n.enter("reference"),o=yn(n,On(e),{before:"^",after:"]"});return i(),r(),"[^"+o+"]"}}const _i={canContainEols:["delete"],enter:{strikethrough:function(e){this.enter({type:"delete",children:[]},e)}},exit:{strikethrough:function(e){this.exit(e)}}},Di={unsafe:[{character:"~",inConstruct:"phrasing"}],handlers:{delete:ki}};function ki(e,t,n){const r=n.enter("emphasis"),i=In(e,n,{before:"~",after:"~"});return r(),"~~"+i+"~~"}function Ni(e){return null==e?"":String(e)}function yi(e){return e.length}function bi(e){const t="string"==typeof e?e.codePointAt(0):0;return 67===t||99===t?99:76===t||108===t?108:82===t||114===t?114:0}ki.peek=function(){return"~"};const Si={enter:{table:function(e){const t=e._align;this.enter({type:"table",align:t.map((e=>"none"===e?null:e)),children:[]},e),this.setData("inTable",!0)},tableData:Oi,tableHeader:Oi,tableRow:function(e){this.enter({type:"tableRow",children:[]},e)}},exit:{codeText:function(e){let t=this.resume();this.getData("inTable")&&(t=t.replace(/\\([\\|])/g,Fi)),this.stack[this.stack.length-1].value=t,this.exit(e)},table:function(e){this.exit(e),this.setData("inTable")},tableData:xi,tableHeader:xi,tableRow:xi}};function xi(e){this.exit(e)}function Oi(e){this.enter({type:"tableCell",children:[]},e)}function Fi(e,t){return"|"===t?t:e}function Ii(e){const t=e||{},n=t.tableCellPadding,r=t.tablePipeAlign,i=t.stringLength,o=n?" ":"|";return{unsafe:[{character:"\r",inConstruct:"tableCell"},{character:"\n",inConstruct:"tableCell"},{atBreak:!0,character:"|",after:"[\t :-]"},{character:"|",inConstruct:"tableCell"},{atBreak:!0,character:":",after:"-"},{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{table:function(e,t,n){return a(function(e,t){const n=e.children;let r=-1;const i=[],o=t.enter("table");for(;++r<n.length;)i[r]=u(n[r],t);return o(),i}(e,n),e.align)},tableRow:function(e,t,n){const r=a([u(e,n)]);return r.slice(0,r.indexOf("\n"))},tableCell:s,inlineCode:function(e,t,n){let r=wn(e,0,n);return n.stack.includes("tableCell")&&(r=r.replace(/\|/g,"\\$&")),r}}};function s(e,t,n){const r=n.enter("tableCell"),i=n.enter("phrasing"),s=In(e,n,{before:o,after:o});return i(),r(),s}function a(e,t){return function(e,t={}){const n=(t.align||[]).concat(),r=t.stringLength||yi,i=[],o=[],s=[],a=[];let u=0,c=-1;for(;++c<e.length;){const n=[],i=[];let l=-1;for(e[c].length>u&&(u=e[c].length);++l<e[c].length;){const o=Ni(e[c][l]);if(!1!==t.alignDelimiters){const e=r(o);i[l]=e,(void 0===a[l]||e>a[l])&&(a[l]=e)}n.push(o)}o[c]=n,s[c]=i}let l=-1;if("object"==typeof n&&"length"in n)for(;++l<u;)i[l]=bi(n[l]);else{const e=bi(n);for(;++l<u;)i[l]=e}l=-1;const p=[],h=[];for(;++l<u;){const e=i[l];let n="",r="";99===e?(n=":",r=":"):108===e?n=":":114===e&&(r=":");let o=!1===t.alignDelimiters?1:Math.max(1,a[l]-n.length-r.length);const s=n+"-".repeat(o)+r;!1!==t.alignDelimiters&&(o=n.length+o+r.length,o>a[l]&&(a[l]=o),h[l]=o),p[l]=s}o.splice(1,0,p),s.splice(1,0,h),c=-1;const f=[];for(;++c<o.length;){const e=o[c],n=s[c];l=-1;const r=[];for(;++l<u;){const o=e[l]||"";let s="",c="";if(!1!==t.alignDelimiters){const e=a[l]-(n[l]||0),t=i[l];114===t?s=" ".repeat(e):99===t?e%2?(s=" ".repeat(e/2+.5),c=" ".repeat(e/2-.5)):(s=" ".repeat(e/2),c=s):c=" ".repeat(e)}!1===t.delimiterStart||l||r.push("|"),!1===t.padding||!1===t.alignDelimiters&&""===o||!1===t.delimiterStart&&!l||r.push(" "),!1!==t.alignDelimiters&&r.push(s),r.push(o),!1!==t.alignDelimiters&&r.push(c),!1!==t.padding&&r.push(" "),!1===t.delimiterEnd&&l===u-1||r.push("|")}f.push(!1===t.delimiterEnd?r.join("").replace(/ +$/,""):r.join(""))}return f.join("\n")}(e,{align:t,alignDelimiters:r,padding:n,stringLength:i})}function u(e,t){const n=e.children;let r=-1;const i=[],o=t.enter("tableRow");for(;++r<n.length;)i[r]=s(n[r],0,t);return o(),i}}const vi={exit:{taskListCheckValueChecked:Ri,taskListCheckValueUnchecked:Ri,paragraph:function(e){const t=this.stack[this.stack.length-2],n=this.stack[this.stack.length-1],r=t.children,i=n.children[0];let o,s=-1;if(t&&"listItem"===t.type&&"boolean"==typeof t.checked&&i&&"text"===i.type){for(;++s<r.length;){const e=r[s];if("paragraph"===e.type){o=e;break}}o===n&&(i.value=i.value.slice(1),0===i.value.length?n.children.shift():(i.position.start.column++,i.position.start.offset++,n.position.start=Object.assign({},i.position.start)))}this.exit(e)}}},Li={unsafe:[{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{listItem:function(e,t,n){const r=e.children[0];let i=zn(e,t,n);return"boolean"==typeof e.checked&&r&&"paragraph"===r.type&&(i=i.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/,(function(t){return t+"["+(e.checked?"x":" ")+"] "}))),i}}};function Ri(e){this.stack[this.stack.length-2].checked="taskListCheckValueChecked"===e.type}function Mi(){return[hi,{enter:{gfmFootnoteDefinition:function(e){this.enter({type:"footnoteDefinition",identifier:"",label:"",children:[]},e)},gfmFootnoteDefinitionLabelString:function(){this.buffer()},gfmFootnoteCall:function(e){this.enter({type:"footnoteReference",identifier:"",label:""},e)},gfmFootnoteCallString:function(){this.buffer()}},exit:{gfmFootnoteDefinition:function(e){this.exit(e)},gfmFootnoteDefinitionLabelString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Se(this.sliceSerialize(e)).toLowerCase()},gfmFootnoteCall:function(e){this.exit(e)},gfmFootnoteCallString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Se(this.sliceSerialize(e)).toLowerCase()}}},_i,Si,vi]}function Pi(e){return{extensions:[fi,Ci(),Di,Ii(e),Li]}}function wi(e,t,n,r,i,o,s,a,u,c,l,p,h,f,d){let m,E;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),g};function g(t){return 35===t?(m=s,T(t)):46===t?(m=a,T(t)):58===t||95===t||G(t)?(e.enter(o),e.enter(u),e.consume(t),_):d&&X(t)?ee(e,g,"whitespace")(t):!d&&Q(t)?be(e,g)(t):O(t)}function T(t){return e.enter(o),e.enter(m),e.enter(m+"Marker"),e.consume(t),e.exit(m+"Marker"),A}function A(t){return null===t||34===t||35===t||39===t||46===t||60===t||61===t||62===t||96===t||125===t||Q(t)?n(t):(e.enter(m+"Value"),e.consume(t),C)}function C(t){return null===t||34===t||39===t||60===t||61===t||62===t||96===t?n(t):35===t||46===t||125===t||Q(t)?(e.exit(m+"Value"),e.exit(m),e.exit(o),g(t)):(e.consume(t),C)}function _(t){return 45===t||46===t||58===t||95===t||z(t)?(e.consume(t),_):(e.exit(u),d&&X(t)?ee(e,D,"whitespace")(t):!d&&Q(t)?be(e,D)(t):D(t))}function D(t){return 61===t?(e.enter(c),e.consume(t),e.exit(c),k):(e.exit(o),g(t))}function k(t){return null===t||60===t||61===t||62===t||96===t||125===t||d&&W(t)?n(t):34===t||39===t?(e.enter(l),e.enter(h),e.consume(t),e.exit(h),E=t,y):d&&X(t)?ee(e,k,"whitespace")(t):!d&&Q(t)?be(e,k)(t):(e.enter(p),e.enter(f),e.consume(t),E=void 0,N)}function N(t){return null===t||34===t||39===t||60===t||61===t||62===t||96===t?n(t):125===t||Q(t)?(e.exit(f),e.exit(p),e.exit(o),g(t)):(e.consume(t),N)}function y(t){return t===E?(e.enter(h),e.consume(t),e.exit(h),e.exit(l),e.exit(o),x):(e.enter(p),b(t))}function b(t){return t===E?(e.exit(p),y(t)):null===t?n(t):W(t)?d?n(t):be(e,b)(t):(e.enter(f),e.consume(t),S)}function S(t){return t===E||null===t||W(t)?(e.exit(f),b(t)):(e.consume(t),S)}function x(e){return 125===e||Q(e)?g(e):O(e)}function O(o){return 125===o?(e.enter(i),e.consume(o),e.exit(i),e.exit(r),t):n(o)}}function Bi(e,t,n,r,i,o,s){let a,u=0,c=0;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),l};function l(n){return 93===n?(e.enter(i),e.consume(n),e.exit(i),e.exit(r),t):(e.enter(o),p(n))}function p(t){if(93===t&&!c)return d(t);const n=e.enter("chunkText",{contentType:"text",previous:a});return a&&(a.next=n),a=n,h(t)}function h(t){return null===t||u>999||91===t&&++c>32?n(t):93!==t||c--?W(t)?s?n(t):(e.consume(t),e.exit("chunkText"),p):(e.consume(t),92===t?f:h):(e.exit("chunkText"),d(t))}function f(t){return 91===t||92===t||93===t?(e.consume(t),u++,h):h(t)}function d(n){return e.exit(o),e.enter(i),e.consume(n),e.exit(i),e.exit(r),t}}function Hi(e,t,n,r){const i=this;return function(t){return G(t)?(e.enter(r),e.consume(t),o):n(t)};function o(s){return 45===s||95===s||z(s)?(e.consume(s),o):(e.exit(r),45===i.previous||95===i.previous?n(s):t(s))}}const Ui={tokenize:function(e,t,n){const r=this,i=r.events[r.events.length-1],o=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0;let s,a=0;return function(t){return e.enter("directiveContainer"),e.enter("directiveContainerFence"),e.enter("directiveContainerSequence"),u(t)};function u(t){return 58===t?(e.consume(t),a++,u):a<3?n(t):(e.exit("directiveContainerSequence"),Hi.call(r,e,c,n,"directiveContainerName")(t))}function c(t){return 91===t?e.attempt(Gi,l,l)(t):l(t)}function l(t){return 123===t?e.attempt(qi,p,p)(t):p(t)}function p(t){return ee(e,h,"whitespace")(t)}function h(i){return e.exit("directiveContainerFence"),null===i?f(i):W(i)?r.interrupt?t(i):e.attempt(Ki,d,f)(i):n(i)}function f(n){return e.exit("directiveContainer"),t(n)}function d(n){return null===n?(e.exit("directiveContainer"),t(n)):(e.enter("directiveContainerContent"),m(n))}function m(t){return null===t?C(t):e.attempt({tokenize:_,partial:!0},C,o?ee(e,E,"linePrefix",o+1):E)(t)}function E(t){if(null===t)return C(t);const n=e.enter("chunkDocument",{contentType:"document",previous:s});return s&&(s.next=n),s=n,g(t)}function g(t){if(null===t){const n=e.exit("chunkDocument");return r.parser.lazy[n.start.line]=!1,C(t)}return W(t)?e.check(Ki,T,A)(t):(e.consume(t),g)}function T(t){e.consume(t);const n=e.exit("chunkDocument");return r.parser.lazy[n.start.line]=!1,m}function A(t){const n=e.exit("chunkDocument");return r.parser.lazy[n.start.line]=!1,C(t)}function C(n){return e.exit("directiveContainerContent"),e.exit("directiveContainer"),t(n)}function _(e,t,n){let r=0;return ee(e,(function(t){return e.enter("directiveContainerFence"),e.enter("directiveContainerSequence"),i(t)}),"linePrefix",4);function i(t){return 58===t?(e.consume(t),r++,i):r<a?n(t):(e.exit("directiveContainerSequence"),ee(e,o,"whitespace")(t))}function o(r){return null===r||W(r)?(e.exit("directiveContainerFence"),t(r)):n(r)}}},concrete:!0},Gi={tokenize:function(e,t,n){return Bi(e,t,n,"directiveContainerLabel","directiveContainerLabelMarker","directiveContainerLabelString",!0)},partial:!0},qi={tokenize:function(e,t,n){return wi(e,t,n,"directiveContainerAttributes","directiveContainerAttributesMarker","directiveContainerAttribute","directiveContainerAttributeId","directiveContainerAttributeClass","directiveContainerAttributeName","directiveContainerAttributeInitializerMarker","directiveContainerAttributeValueLiteral","directiveContainerAttributeValue","directiveContainerAttributeValueMarker","directiveContainerAttributeValueData",!0)},partial:!0},Ki={tokenize:function(e,t,n){const r=this;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),i};function i(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0},zi={tokenize:function(e,t,n){const r=this;return function(t){return e.enter("directiveLeaf"),e.enter("directiveLeafSequence"),e.consume(t),i};function i(t){return 58===t?(e.consume(t),e.exit("directiveLeafSequence"),Hi.call(r,e,o,n,"directiveLeafName")):n(t)}function o(t){return 91===t?e.attempt(ji,s,s)(t):s(t)}function s(t){return 123===t?e.attempt(Vi,a,a)(t):a(t)}function a(t){return ee(e,u,"whitespace")(t)}function u(r){return null===r||W(r)?(e.exit("directiveLeaf"),t(r)):n(r)}}},ji={tokenize:function(e,t,n){return Bi(e,t,n,"directiveLeafLabel","directiveLeafLabelMarker","directiveLeafLabelString",!0)},partial:!0},Vi={tokenize:function(e,t,n){return wi(e,t,n,"directiveLeafAttributes","directiveLeafAttributesMarker","directiveLeafAttribute","directiveLeafAttributeId","directiveLeafAttributeClass","directiveLeafAttributeName","directiveLeafAttributeInitializerMarker","directiveLeafAttributeValueLiteral","directiveLeafAttributeValue","directiveLeafAttributeValueMarker","directiveLeafAttributeValueData",!0)},partial:!0},Yi={tokenize:function(e,t,n){const r=this;return function(t){return e.enter("directiveText"),e.enter("directiveTextMarker"),e.consume(t),e.exit("directiveTextMarker"),Hi.call(r,e,i,n,"directiveTextName")};function i(t){return 58===t?n(t):91===t?e.attempt(Qi,o,o)(t):o(t)}function o(t){return 123===t?e.attempt(Wi,s,s)(t):s(t)}function s(n){return e.exit("directiveText"),t(n)}},previous:function(e){return 58!==e||"characterEscape"===this.events[this.events.length-1][1].type}},Qi={tokenize:function(e,t,n){return Bi(e,t,n,"directiveTextLabel","directiveTextLabelMarker","directiveTextLabelString")},partial:!0},Wi={tokenize:function(e,t,n){return wi(e,t,n,"directiveTextAttributes","directiveTextAttributesMarker","directiveTextAttribute","directiveTextAttributeId","directiveTextAttributeClass","directiveTextAttributeName","directiveTextAttributeInitializerMarker","directiveTextAttributeValueLiteral","directiveTextAttributeValue","directiveTextAttributeValueMarker","directiveTextAttributeValueData")},partial:!0};function Xi(){return{text:{58:Yi},flow:{58:[Ui,zi]}}}const $i=["AElig","AMP","Aacute","Acirc","Agrave","Aring","Atilde","Auml","COPY","Ccedil","ETH","Eacute","Ecirc","Egrave","Euml","GT","Iacute","Icirc","Igrave","Iuml","LT","Ntilde","Oacute","Ocirc","Ograve","Oslash","Otilde","Ouml","QUOT","REG","THORN","Uacute","Ucirc","Ugrave","Uuml","Yacute","aacute","acirc","acute","aelig","agrave","amp","aring","atilde","auml","brvbar","ccedil","cedil","cent","copy","curren","deg","divide","eacute","ecirc","egrave","eth","euml","frac12","frac14","frac34","gt","iacute","icirc","iexcl","igrave","iquest","iuml","laquo","lt","macr","micro","middot","nbsp","not","ntilde","oacute","ocirc","ograve","ordf","ordm","oslash","otilde","ouml","para","plusmn","pound","quot","raquo","reg","sect","shy","sup1","sup2","sup3","szlig","thorn","times","uacute","ucirc","ugrave","uml","uuml","yacute","yen","yuml"],Zi={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"};function Ji(e){const t="string"==typeof e?e.charCodeAt(0):e;return t>=48&&t<=57}function eo(e){const t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=102||t>=65&&t<=70||t>=48&&t<=57}function to(e){return function(e){const t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=122||t>=65&&t<=90}(e)||Ji(e)}const no=String.fromCharCode,ro=["","Named character references must be terminated by a semicolon","Numeric character references must be terminated by a semicolon","Named character references cannot be empty","Numeric character references cannot be empty","Named character references must be known","Numeric character references cannot be disallowed","Numeric character references cannot be outside the permissible Unicode range"];function io(e,t={}){const n="string"==typeof t.additional?t.additional.charCodeAt(0):t.additional,r=[];let i,o,s=0,a=-1,u="";t.position&&("start"in t.position||"indent"in t.position?(o=t.position.indent,i=t.position.start):i=t.position);let c,l=(i?i.line:0)||1,p=(i?i.column:0)||1,h=d();for(s--;++s<=e.length;)if(10===c&&(p=(o?o[a]:0)||1),c=e.charCodeAt(s),38===c){const i=e.charCodeAt(s+1);if(9===i||10===i||12===i||32===i||38===i||60===i||Number.isNaN(i)||n&&i===n){u+=no(c),p++;continue}const o=s+1;let a,l=o,g=o;if(35===i){g=++l;const t=e.charCodeAt(g);88===t||120===t?(a="hexadecimal",g=++l):a="decimal"}else a="named";let T="",A="",C="";const _="named"===a?to:"decimal"===a?Ji:eo;for(g--;++g<=e.length;){const t=e.charCodeAt(g);if(!_(t))break;C+=no(t),"named"===a&&$i.includes(C)&&(T=C,A=Ge(C))}let D=59===e.charCodeAt(g);if(D){g++;const e="named"===a&&Ge(C);e&&(T=C,A=e)}let k=1+g-o,N="";if(D||!1!==t.nonTerminated)if(C)if("named"===a){if(D&&!A)m(5,1);else if(T!==C&&(g=l+T.length,k=1+g-l,D=!1),!D){const n=T?1:3;if(t.attribute){const t=e.charCodeAt(g);61===t?(m(n,k),A=""):to(t)?A="":m(n,k)}else m(n,k)}N=A}else{D||m(2,k);let e=Number.parseInt(C,"hexadecimal"===a?16:10);if((f=e)>=55296&&f<=57343||f>1114111)m(7,k),N=no(65533);else if(e in Zi)m(6,k),N=Zi[e];else{let t="";oo(e)&&m(6,k),e>65535&&(e-=65536,t+=no(e>>>10|55296),e=56320|1023&e),N=t+no(e)}}else"named"!==a&&m(4,k);if(N){E(),h=d(),s=g-1,p+=g-o+1,r.push(N);const n=d();n.offset++,t.reference&&t.reference.call(t.referenceContext,N,{start:h,end:n},e.slice(o-1,g)),h=n}else C=e.slice(o-1,g),u+=C,p+=C.length,s=g-1}else 10===c&&(l++,a++,p=0),Number.isNaN(c)?E():(u+=no(c),p++);var f;return r.join("");function d(){return{line:l,column:p,offset:s+((i?i.offset:0)||0)}}function m(e,n){let r;t.warning&&(r=d(),r.column+=n,r.offset+=n,t.warning.call(t.warningContext,ro[e],r,e))}function E(){u&&(r.push(u),t.text&&t.text.call(t.textContext,u,{start:h,end:d()}),u="")}}function oo(e){return e>=1&&e<=8||11===e||e>=13&&e<=31||e>=127&&e<=159||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)}function so(e,t){return e=e.replace(t.subset?function(e){const t=[];let n=-1;for(;++n<e.length;)t.push(e[n].replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"));return new RegExp("(?:"+t.join("|")+")","g")}(t.subset):/["&'<>`]/g,n),t.subset||t.escapeOnly?e:e.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,(function(e,n,r){return t.format(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)-56320+65536,r.charCodeAt(n+2),t)})).replace(/[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,n);function n(e,n,r){return t.format(e.charCodeAt(0),r.charCodeAt(n+1),t)}}const ao={nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",fnof:"ƒ",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",bull:"•",hellip:"…",prime:"′",Prime:"″",oline:"‾",frasl:"⁄",weierp:"℘",image:"ℑ",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",lang:"〈",rang:"〉",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",quot:'"',amp:"&",lt:"<",gt:">",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",circ:"ˆ",tilde:"˜",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",permil:"‰",lsaquo:"‹",rsaquo:"›",euro:"€"},uo=["cent","copy","divide","gt","lt","not","para","times"],co={}.hasOwnProperty,lo={};let po;for(po in ao)co.call(ao,po)&&(lo[ao[po]]=po);function ho(e,t,n){let r,i=function(e,t,n){const r="&#x"+e.toString(16).toUpperCase();return n&&t&&!/[\dA-Fa-f]/.test(String.fromCharCode(t))?r:r+";"}(e,t,n.omitOptionalSemicolons);if((n.useNamedReferences||n.useShortestReferences)&&(r=function(e,t,n,r){const i=String.fromCharCode(e);if(co.call(lo,i)){const e=lo[i],o="&"+e;return n&&$i.includes(e)&&!uo.includes(e)&&(!r||t&&61!==t&&/[^\da-z]/i.test(String.fromCharCode(t)))?o:o+";"}return""}(e,t,n.omitOptionalSemicolons,n.attribute)),(n.useShortestReferences||!r)&&n.useShortestReferences){const r=function(e,t,n){const r="&#"+String(e);return n&&t&&!/\d/.test(String.fromCharCode(t))?r:r+";"}(e,t,n.omitOptionalSemicolons);r.length<i.length&&(i=r)}return r&&(!n.useShortestReferences||r.length<i.length)?r:i}function fo(e){return"&#x"+e.toString(16).toUpperCase()+";"}function mo(e,t){return so(e,Object.assign({format:ho},t))}const Eo={}.hasOwnProperty,go=/^[^\t\n\r "#'.<=>`}]+$/;Oo.peek=function(){return":"};const To={canContainEols:["textDirective"],enter:{directiveContainer:function(e){Co.call(this,"containerDirective",e)},directiveContainerAttributes:Do,directiveContainerLabel:function(e){this.enter({type:"paragraph",data:{directiveLabel:!0},children:[]},e)},directiveLeaf:function(e){Co.call(this,"leafDirective",e)},directiveLeafAttributes:Do,directiveText:function(e){Co.call(this,"textDirective",e)},directiveTextAttributes:Do},exit:{directiveContainer:xo,directiveContainerAttributeClassValue:No,directiveContainerAttributeIdValue:ko,directiveContainerAttributeName:bo,directiveContainerAttributeValue:yo,directiveContainerAttributes:So,directiveContainerLabel:function(e){this.exit(e)},directiveContainerName:_o,directiveLeaf:xo,directiveLeafAttributeClassValue:No,directiveLeafAttributeIdValue:ko,directiveLeafAttributeName:bo,directiveLeafAttributeValue:yo,directiveLeafAttributes:So,directiveLeafName:_o,directiveText:xo,directiveTextAttributeClassValue:No,directiveTextAttributeIdValue:ko,directiveTextAttributeName:bo,directiveTextAttributeValue:yo,directiveTextAttributes:So,directiveTextName:_o}},Ao={unsafe:[{character:"\r",inConstruct:["leafDirectiveLabel","containerDirectiveLabel"]},{character:"\n",inConstruct:["leafDirectiveLabel","containerDirectiveLabel"]},{before:"[^:]",character:":",after:"[A-Za-z]",inConstruct:["phrasing"]},{atBreak:!0,character:":",after:":"}],handlers:{containerDirective:Oo,leafDirective:Oo,textDirective:Oo}};function Co(e,t){this.enter({type:e,name:"",attributes:{},children:[]},t)}function _o(e){this.stack[this.stack.length-1].name=this.sliceSerialize(e)}function Do(){this.setData("directiveAttributes",[]),this.buffer()}function ko(e){this.getData("directiveAttributes").push(["id",io(this.sliceSerialize(e))])}function No(e){this.getData("directiveAttributes").push(["class",io(this.sliceSerialize(e))])}function yo(e){const t=this.getData("directiveAttributes");t[t.length-1][1]=io(this.sliceSerialize(e))}function bo(e){this.getData("directiveAttributes").push([this.sliceSerialize(e),""])}function So(){const e=this.getData("directiveAttributes"),t={};let n=-1;for(;++n<e.length;){const r=e[n];"class"===r[0]&&t.class?t.class+=" "+r[1]:t[r[0]]=r[1]}this.setData("directiveAttributes"),this.resume(),this.stack[this.stack.length-1].attributes=t}function xo(e){this.exit(e)}function Oo(e,t,n){const r=function(e){let t=0;return"containerDirective"===e.type?(Ot(e,"containerDirective",(function(e,n){let r=n.length,i=0;for(;r--;)"containerDirective"===n[r].type&&i++;i>t&&(t=i)})),t+=3):t="leafDirective"===e.type?2:1,":".repeat(t)}(e),i=n.enter(e.type);let o=r+(e.name||"")+function(e,t){let n=e;if("containerDirective"===e.type){const t=(e.children||[])[0];if(!Fo(t))return"";n=t}const r=t.enter("label"),i=t.enter(e.type+"Label"),o=In(n,t,{before:"[",after:"]"});return i(),r(),o?"["+o+"]":""}(e,n)+function(e,t){const n=Fn(t),r="textDirective"===e.type?[n]:[n,"\n","\r"],i=e.attributes||{},o=[];let s,a,u,c;for(c in i)if(Eo.call(i,c)&&void 0!==i[c]&&null!==i[c]){const e=String(i[c]);if("id"===c)u=go.test(e)?"#"+e:l("id",e);else if("class"===c){const t=e.split(/[\t\n\r ]+/g),n=[],r=[];let i=-1;for(;++i<t.length;)(go.test(t[i])?r:n).push(t[i]);s=n.length>0?l("class",n.join(" ")):"",a=r.length>0?"."+r.join("."):""}else o.push(l(c,e))}return s&&o.unshift(s),a&&o.unshift(a),u&&o.unshift(u),o.length>0?"{"+o.join(" ")+"}":"";function l(e,t){return e+(t?"="+n+function(e,t){return so(e,Object.assign({format:fo},t))}(t,{subset:r})+n:"")}}(e,n);if("containerDirective"===e.type){const t=function(e,t){return Fo((e.children||[])[0])&&(e=Object.assign({},e,{children:e.children.slice(1)})),En(e,t)}(e,n);t&&(o+="\n"+t),o+="\n"+r}return i(),o}function Fo(e){return Boolean(e&&"paragraph"===e.type&&e.data&&e.data.directiveLabel)}const Io=[];function vo(e){return function(e,t,n){const r=Nt((e=>Boolean("paragraph"===e.type&&e.children.every((e=>"text"===e.type&&/^\s*$/.test(e.value)))))||t),i=null==t.cascade||t.cascade;return function e(t,n,o){const s=t.children||Io;let a=-1,u=0;if(r(t,n,o))return null;if(s.length>0){for(;++a<s.length;)e(s[a],a,t)&&(s[u++]=s[a]);if(i&&!u)return null;s.length=u}return t}(e)}(e,{cascade:!1})}var Lo=n(45);class Ro{constructor(e,t,n){this.property=e,this.normal=t,n&&(this.space=n)}}function Mo(e,t){const n={},r={};let i=-1;for(;++i<e.length;)Object.assign(n,e[i].property),Object.assign(r,e[i].normal);return new Ro(n,r,t)}function Po(e){return e.toLowerCase()}Ro.prototype.property={},Ro.prototype.normal={},Ro.prototype.space=null;class wo{constructor(e,t){this.property=e,this.attribute=t}}wo.prototype.space=null,wo.prototype.boolean=!1,wo.prototype.booleanish=!1,wo.prototype.overloadedBoolean=!1,wo.prototype.number=!1,wo.prototype.commaSeparated=!1,wo.prototype.spaceSeparated=!1,wo.prototype.commaOrSpaceSeparated=!1,wo.prototype.mustUseProperty=!1,wo.prototype.defined=!1;let Bo=0;const Ho=Vo(),Uo=Vo(),Go=Vo(),qo=Vo(),Ko=Vo(),zo=Vo(),jo=Vo();function Vo(){return 2**++Bo}const Yo=Object.keys(t);class Qo extends wo{constructor(e,n,r,i){let o=-1;if(super(e,n),Wo(this,"space",i),"number"==typeof r)for(;++o<Yo.length;){const e=Yo[o];Wo(this,Yo[o],(r&t[e])===t[e])}}}function Wo(e,t,n){n&&(e[t]=n)}Qo.prototype.defined=!0;const Xo={}.hasOwnProperty;function $o(e){const t={},n={};let r;for(r in e.properties)if(Xo.call(e.properties,r)){const i=e.properties[r],o=new Qo(r,e.transform(e.attributes||{},r),i,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(o.mustUseProperty=!0),t[r]=o,n[Po(r)]=r,n[Po(o.attribute)]=r}return new Ro(t,n,e.space)}const Zo=$o({space:"xlink",transform:(e,t)=>"xlink:"+t.slice(5).toLowerCase(),properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),Jo=$o({space:"xml",transform:(e,t)=>"xml:"+t.slice(3).toLowerCase(),properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function es(e,t){return t in e?e[t]:t}function ts(e,t){return es(e,t.toLowerCase())}const ns=$o({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:ts,properties:{xmlns:null,xmlnsXLink:null}}),rs=$o({transform:(e,t)=>"role"===t?t:"aria-"+t.slice(4).toLowerCase(),properties:{ariaActiveDescendant:null,ariaAtomic:Uo,ariaAutoComplete:null,ariaBusy:Uo,ariaChecked:Uo,ariaColCount:qo,ariaColIndex:qo,ariaColSpan:qo,ariaControls:Ko,ariaCurrent:null,ariaDescribedBy:Ko,ariaDetails:null,ariaDisabled:Uo,ariaDropEffect:Ko,ariaErrorMessage:null,ariaExpanded:Uo,ariaFlowTo:Ko,ariaGrabbed:Uo,ariaHasPopup:null,ariaHidden:Uo,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:Ko,ariaLevel:qo,ariaLive:null,ariaModal:Uo,ariaMultiLine:Uo,ariaMultiSelectable:Uo,ariaOrientation:null,ariaOwns:Ko,ariaPlaceholder:null,ariaPosInSet:qo,ariaPressed:Uo,ariaReadOnly:Uo,ariaRelevant:null,ariaRequired:Uo,ariaRoleDescription:Ko,ariaRowCount:qo,ariaRowIndex:qo,ariaRowSpan:qo,ariaSelected:Uo,ariaSetSize:qo,ariaSort:null,ariaValueMax:qo,ariaValueMin:qo,ariaValueNow:qo,ariaValueText:null,role:null}}),is=$o({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:ts,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:zo,acceptCharset:Ko,accessKey:Ko,action:null,allow:null,allowFullScreen:Ho,allowPaymentRequest:Ho,allowUserMedia:Ho,alt:null,as:null,async:Ho,autoCapitalize:null,autoComplete:Ko,autoFocus:Ho,autoPlay:Ho,capture:Ho,charSet:null,checked:Ho,cite:null,className:Ko,cols:qo,colSpan:null,content:null,contentEditable:Uo,controls:Ho,controlsList:Ko,coords:qo|zo,crossOrigin:null,data:null,dateTime:null,decoding:null,default:Ho,defer:Ho,dir:null,dirName:null,disabled:Ho,download:Go,draggable:Uo,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:Ho,formTarget:null,headers:Ko,height:qo,hidden:Ho,high:qo,href:null,hrefLang:null,htmlFor:Ko,httpEquiv:Ko,id:null,imageSizes:null,imageSrcSet:null,inputMode:null,integrity:null,is:null,isMap:Ho,itemId:null,itemProp:Ko,itemRef:Ko,itemScope:Ho,itemType:Ko,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:Ho,low:qo,manifest:null,max:null,maxLength:qo,media:null,method:null,min:null,minLength:qo,multiple:Ho,muted:Ho,name:null,nonce:null,noModule:Ho,noValidate:Ho,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:Ho,optimum:qo,pattern:null,ping:Ko,placeholder:null,playsInline:Ho,poster:null,preload:null,readOnly:Ho,referrerPolicy:null,rel:Ko,required:Ho,reversed:Ho,rows:qo,rowSpan:qo,sandbox:Ko,scope:null,scoped:Ho,seamless:Ho,selected:Ho,shape:null,size:qo,sizes:null,slot:null,span:qo,spellCheck:Uo,src:null,srcDoc:null,srcLang:null,srcSet:null,start:qo,step:null,style:null,tabIndex:qo,target:null,title:null,translate:null,type:null,typeMustMatch:Ho,useMap:null,value:Uo,width:qo,wrap:null,align:null,aLink:null,archive:Ko,axis:null,background:null,bgColor:null,border:qo,borderColor:null,bottomMargin:qo,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:Ho,declare:Ho,event:null,face:null,frame:null,frameBorder:null,hSpace:qo,leftMargin:qo,link:null,longDesc:null,lowSrc:null,marginHeight:qo,marginWidth:qo,noResize:Ho,noHref:Ho,noShade:Ho,noWrap:Ho,object:null,profile:null,prompt:null,rev:null,rightMargin:qo,rules:null,scheme:null,scrolling:Uo,standby:null,summary:null,text:null,topMargin:qo,valueType:null,version:null,vAlign:null,vLink:null,vSpace:qo,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:Ho,disableRemotePlayback:Ho,prefix:null,property:null,results:qo,security:null,unselectable:null}}),os=$o({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:es,properties:{about:jo,accentHeight:qo,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:qo,amplitude:qo,arabicForm:null,ascent:qo,attributeName:null,attributeType:null,azimuth:qo,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:qo,by:null,calcMode:null,capHeight:qo,className:Ko,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:qo,diffuseConstant:qo,direction:null,display:null,dur:null,divisor:qo,dominantBaseline:null,download:Ho,dx:null,dy:null,edgeMode:null,editable:null,elevation:qo,enableBackground:null,end:null,event:null,exponent:qo,externalResourcesRequired:null,fill:null,fillOpacity:qo,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:zo,g2:zo,glyphName:zo,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:qo,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:qo,horizOriginX:qo,horizOriginY:qo,id:null,ideographic:qo,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:qo,k:qo,k1:qo,k2:qo,k3:qo,k4:qo,kernelMatrix:jo,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:qo,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:qo,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:qo,overlineThickness:qo,paintOrder:null,panose1:null,path:null,pathLength:qo,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:Ko,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:qo,pointsAtY:qo,pointsAtZ:qo,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:jo,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:jo,rev:jo,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:jo,requiredFeatures:jo,requiredFonts:jo,requiredFormats:jo,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:qo,specularExponent:qo,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:qo,strikethroughThickness:qo,string:null,stroke:null,strokeDashArray:jo,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:qo,strokeOpacity:qo,strokeWidth:null,style:null,surfaceScale:qo,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:jo,tabIndex:qo,tableValues:null,target:null,targetX:qo,targetY:qo,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:jo,to:null,transform:null,u1:null,u2:null,underlinePosition:qo,underlineThickness:qo,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:qo,values:null,vAlphabetic:qo,vMathematical:qo,vectorEffect:null,vHanging:qo,vIdeographic:qo,version:null,vertAdvY:qo,vertOriginX:qo,vertOriginY:qo,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:qo,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),ss=Mo([Jo,Zo,ns,rs,is],"html"),as=Mo([Jo,Zo,ns,rs,os],"svg"),us=/^data[-\w.:]+$/i,cs=/-[a-z]/g,ls=/[A-Z]/g;function ps(e,t){const n=Po(t);let r=t,i=wo;if(n in e.normal)return e.property[e.normal[n]];if(n.length>4&&"data"===n.slice(0,4)&&us.test(t)){if("-"===t.charAt(4)){const e=t.slice(5).replace(cs,fs);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=t.slice(4);if(!cs.test(e)){let n=e.replace(ls,hs);"-"!==n.charAt(0)&&(n="-"+n),t="data"+n}}i=Qo}return new i(r,t)}function hs(e){return"-"+e.toLowerCase()}function fs(e){return e.charAt(1).toUpperCase()}var ds=/[#.]/g;function ms(e){const t=String(e||"").trim();return t?t.split(/[ \t\n\r\f]+/g):[]}function Es(e){return e.join(" ").trim()}function gs(e){for(var t,n,r=[],i=String(e||""),o=i.indexOf(","),s=0;!t;)-1===o&&(o=i.length,t=!0),!(n=i.slice(s,o).trim())&&t||r.push(n),s=o+1,o=i.indexOf(",",s);return r}function Ts(e,t){var n=t||{};return""===e[e.length-1]&&(e=e.concat("")),e.join((n.padRight?" ":"")+","+(!1===n.padLeft?"":" ")).trim()}const As=new Set(["menu","submit","reset","button"]),Cs={}.hasOwnProperty;function _s(e,t,n){const r=n&&function(e){const t={};let n=-1;for(;++n<e.length;)t[e[n].toLowerCase()]=e[n];return t}(n);return function(n,i,...o){let s,a=-1;if(null==n)s={type:"root",children:[]},o.unshift(i);else if(s=function(e,t="div"){for(var n,r,i,o=e||"",s={},a=0;a<o.length;)ds.lastIndex=a,i=ds.exec(o),(n=o.slice(a,i?i.index:o.length))&&(r?"#"===r?s.id=n:Array.isArray(s.className)?s.className.push(n):s.className=[n]:t=n,a+=n.length),i&&(r=i[0],a++);return{type:"element",tagName:t,properties:s,children:[]}}(n,t),s.tagName=s.tagName.toLowerCase(),r&&Cs.call(r,s.tagName)&&(s.tagName=r[s.tagName]),function(e,t){return null!=e&&"object"==typeof e&&!Array.isArray(e)&&("input"===t||!e.type||"string"!=typeof e.type||(!("children"in e)||!Array.isArray(e.children))&&("button"===t?As.has(e.type.toLowerCase()):!("value"in e)))}(i,s.tagName)){let t;for(t in i)Cs.call(i,t)&&Ds(e,s.properties,t,i[t])}else o.unshift(i);for(;++a<o.length;)ks(s.children,o[a]);return"element"===s.type&&"template"===s.tagName&&(s.content={type:"root",children:s.children},s.children=[]),s}}function Ds(e,t,n,r){const i=ps(e,n);let o,s=-1;if(null!=r){if("number"==typeof r){if(Number.isNaN(r))return;o=r}else o="boolean"==typeof r?r:"string"==typeof r?i.spaceSeparated?ms(r):i.commaSeparated?gs(r):i.commaOrSpaceSeparated?ms(gs(r).join(" ")):Ns(i,i.property,r):Array.isArray(r)?r.concat():"style"===i.property?function(e){const t=[];let n;for(n in e)Cs.call(e,n)&&t.push([n,e[n]].join(": "));return t.join("; ")}(r):String(r);if(Array.isArray(o)){const e=[];for(;++s<o.length;)e[s]=Ns(i,i.property,o[s]);o=e}"className"===i.property&&Array.isArray(t.className)&&(o=t.className.concat(o)),t[i.property]=o}}function ks(e,t){let n=-1;if(null==t);else if("string"==typeof t||"number"==typeof t)e.push({type:"text",value:String(t)});else if(Array.isArray(t))for(;++n<t.length;)ks(e,t[n]);else{if("object"!=typeof t||!("type"in t))throw new Error("Expected node, nodes, or string, got `"+t+"`");"root"===t.type?ks(e,t.children):e.push(t)}}function Ns(e,t,n){if("string"==typeof n){if(e.number&&n&&!Number.isNaN(Number(n)))return Number(n);if((e.boolean||e.overloadedBoolean)&&(""===n||Po(n)===Po(t)))return!0}return n}const ys=_s(as,"g",["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","solidColor","textArea","textPath"]),bs=_s(ss,"div"),Ss={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},xs={}.hasOwnProperty,Os={"#document":vs,"#document-fragment":vs,"#text":function(e,t){return{type:"text",value:t.value}},"#comment":function(e,t){return{type:"comment",value:t.data}},"#documentType":function(){return{type:"doctype"}}};function Fs(e,t={}){let n,r;return function(e){return"messages"in e}(t)?(r=t,n={}):(r=t.file,n=t),Is({schema:"svg"===n.space?as:ss,file:r,verbose:n.verbose,location:!1},e)}function Is(e,t){const n=e.schema,r=xs.call(Os,t.nodeName)?Os[t.nodeName]:Ls;let i;"tagName"in t&&(e.schema=t.namespaceURI===Ss.svg?as:ss),"childNodes"in t&&(i=function(e,t){let n=-1;const r=[];for(;++n<t.length;)r[n]=Is(e,t[n]);return r}(e,t.childNodes));const o=r(e,t,i);if("sourceCodeLocation"in t&&t.sourceCodeLocation&&e.file){const n=function(e,t,n){const r=Rs(n);if("element"===t.type){const i=t.children[t.children.length-1];if(r&&!n.endTag&&i&&i.position&&i.position.end&&(r.end=Object.assign({},i.position.end)),e.verbose){const r={};let i;for(i in n.attrs)xs.call(n.attrs,i)&&(r[ps(e.schema,i).property]=Rs(n.attrs[i]));t.data={position:{opening:Rs(n.startTag),closing:n.endTag?Rs(n.endTag):null,properties:r}}}}return r}(e,o,t.sourceCodeLocation);n&&(e.location=!0,o.position=n)}return e.schema=n,o}function vs(e,t,n){const r={type:"root",children:n,data:{quirksMode:"quirks"===t.mode||"limited-quirks"===t.mode}};if(e.file&&e.location){const t=String(e.file),n=function(e){for(var t=String(e),n=[],r=/\r?\n|\r/g;r.test(t);)n.push(r.lastIndex);return n.push(t.length+1),{toPoint:function(e){var t=-1;if(e>-1&&e<n[n.length-1])for(;++t<n.length;)if(n[t]>e)return{line:t+1,column:e-(n[t-1]||0)+1,offset:e};return{line:void 0,column:void 0,offset:void 0}},toOffset:function(e){var t,r=e&&e.line,i=e&&e.column;return"number"!=typeof r||"number"!=typeof i||Number.isNaN(r)||Number.isNaN(i)||!(r-1 in n)||(t=(n[r-2]||0)+i-1||0),t>-1&&t<n[n.length-1]?t:-1}}}(t);r.position={start:n.toPoint(0),end:n.toPoint(t.length)}}return r}function Ls(e,t,n){const r="svg"===e.schema.space?ys:bs;let i=-1;const o={};for(;++i<t.attrs.length;){const e=t.attrs[i];o[(e.prefix?e.prefix+":":"")+e.name]=e.value}const s=r(t.tagName,o,n);if("template"===s.tagName&&"content"in t){const n=t.sourceCodeLocation,r=n&&n.startTag&&Rs(n.startTag),i=n&&n.endTag&&Rs(n.endTag),o=Is(e,t.content);r&&i&&e.file&&(o.position={start:r.end,end:i.start}),s.content=o}return s}function Rs(e){const t=Ms({line:e.startLine,column:e.startCol,offset:e.startOffset}),n=Ms({line:e.endLine,column:e.endCol,offset:e.endOffset});return t||n?{start:t,end:n}:null}function Ms(e){return e.line&&e.column?e:null}const Ps={abandonedHeadElementChild:{reason:"Unexpected metadata element after head",description:"Unexpected element after head. Expected the element before `</head>`",url:!1},abruptClosingOfEmptyComment:{reason:"Unexpected abruptly closed empty comment",description:"Unexpected `>` or `->`. Expected `--\x3e` to close comments"},abruptDoctypePublicIdentifier:{reason:"Unexpected abruptly closed public identifier",description:"Unexpected `>`. Expected a closing `\"` or `'` after the public identifier"},abruptDoctypeSystemIdentifier:{reason:"Unexpected abruptly closed system identifier",description:"Unexpected `>`. Expected a closing `\"` or `'` after the identifier identifier"},absenceOfDigitsInNumericCharacterReference:{reason:"Unexpected non-digit at start of numeric character reference",description:"Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references"},cdataInHtmlContent:{reason:"Unexpected CDATA section in HTML",description:"Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead"},characterReferenceOutsideUnicodeRange:{reason:"Unexpected too big numeric character reference",description:"Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)"},closingOfElementWithOpenChildElements:{reason:"Unexpected closing tag with open child elements",description:"Unexpectedly closing tag. Expected other tags to be closed first",url:!1},controlCharacterInInputStream:{reason:"Unexpected control character",description:"Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace"},controlCharacterReference:{reason:"Unexpected control character reference",description:"Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace"},disallowedContentInNoscriptInHead:{reason:"Disallowed content inside `<noscript>` in `<head>`",description:"Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`",url:!1},duplicateAttribute:{reason:"Unexpected duplicate attribute",description:"Unexpectedly double attribute. Expected attributes to occur only once"},endTagWithAttributes:{reason:"Unexpected attribute on closing tag",description:"Unexpected attribute. Expected `>` instead"},endTagWithTrailingSolidus:{reason:"Unexpected slash at end of closing tag",description:"Unexpected `%c-1`. Expected `>` instead"},endTagWithoutMatchingOpenElement:{reason:"Unexpected unopened end tag",description:"Unexpected end tag. Expected no end tag or another end tag",url:!1},eofBeforeTagName:{reason:"Unexpected end of file",description:"Unexpected end of file. Expected tag name instead"},eofInCdata:{reason:"Unexpected end of file in CDATA",description:"Unexpected end of file. Expected `]]>` to close the CDATA"},eofInComment:{reason:"Unexpected end of file in comment",description:"Unexpected end of file. Expected `--\x3e` to close the comment"},eofInDoctype:{reason:"Unexpected end of file in doctype",description:"Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)"},eofInElementThatCanContainOnlyText:{reason:"Unexpected end of file in element that can only contain text",description:"Unexpected end of file. Expected text or a closing tag",url:!1},eofInScriptHtmlCommentLikeText:{reason:"Unexpected end of file in comment inside script",description:"Unexpected end of file. Expected `--\x3e` to close the comment"},eofInTag:{reason:"Unexpected end of file in tag",description:"Unexpected end of file. Expected `>` to close the tag"},incorrectlyClosedComment:{reason:"Incorrectly closed comment",description:"Unexpected `%c-1`. Expected `--\x3e` to close the comment"},incorrectlyOpenedComment:{reason:"Incorrectly opened comment",description:"Unexpected `%c`. Expected `\x3c!--` to open the comment"},invalidCharacterSequenceAfterDoctypeName:{reason:"Invalid sequence after doctype name",description:"Unexpected sequence at `%c`. Expected `public` or `system`"},invalidFirstCharacterOfTagName:{reason:"Invalid first character in tag name",description:"Unexpected `%c`. Expected an ASCII letter instead"},misplacedDoctype:{reason:"Misplaced doctype",description:"Unexpected doctype. Expected doctype before head",url:!1},misplacedStartTagForHeadElement:{reason:"Misplaced `<head>` start tag",description:"Unexpected start tag `<head>`. Expected `<head>` directly after doctype",url:!1},missingAttributeValue:{reason:"Missing attribute value",description:"Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead"},missingDoctype:{reason:"Missing doctype before other content",description:"Expected a `<!doctype html>` before anything else",url:!1},missingDoctypeName:{reason:"Missing doctype name",description:"Unexpected doctype end at `%c`. Expected `html` instead"},missingDoctypePublicIdentifier:{reason:"Missing public identifier in doctype",description:"Unexpected `%c`. Expected identifier for `public` instead"},missingDoctypeSystemIdentifier:{reason:"Missing system identifier in doctype",description:'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'},missingEndTagName:{reason:"Missing name in end tag",description:"Unexpected `%c`. Expected an ASCII letter instead"},missingQuoteBeforeDoctypePublicIdentifier:{reason:"Missing quote before public identifier in doctype",description:"Unexpected `%c`. Expected `\"` or `'` instead"},missingQuoteBeforeDoctypeSystemIdentifier:{reason:"Missing quote before system identifier in doctype",description:"Unexpected `%c`. Expected `\"` or `'` instead"},missingSemicolonAfterCharacterReference:{reason:"Missing semicolon after character reference",description:"Unexpected `%c`. Expected `;` instead"},missingWhitespaceAfterDoctypePublicKeyword:{reason:"Missing whitespace after public identifier in doctype",description:"Unexpected `%c`. Expected ASCII whitespace instead"},missingWhitespaceAfterDoctypeSystemKeyword:{reason:"Missing whitespace after system identifier in doctype",description:"Unexpected `%c`. Expected ASCII whitespace instead"},missingWhitespaceBeforeDoctypeName:{reason:"Missing whitespace before doctype name",description:"Unexpected `%c`. Expected ASCII whitespace instead"},missingWhitespaceBetweenAttributes:{reason:"Missing whitespace between attributes",description:"Unexpected `%c`. Expected ASCII whitespace instead"},missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:{reason:"Missing whitespace between public and system identifiers in doctype",description:"Unexpected `%c`. Expected ASCII whitespace instead"},nestedComment:{reason:"Unexpected nested comment",description:"Unexpected `\x3c!--`. Expected `--\x3e`"},nestedNoscriptInHead:{reason:"Unexpected nested `<noscript>` in `<head>`",description:"Unexpected `<noscript>`. Expected a closing tag or a meta element",url:!1},nonConformingDoctype:{reason:"Unexpected non-conforming doctype declaration",description:'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',url:!1},nonVoidHtmlElementStartTagWithTrailingSolidus:{reason:"Unexpected trailing slash on start tag of non-void element",description:"Unexpected `/`. Expected `>` instead"},noncharacterCharacterReference:{reason:"Unexpected noncharacter code point referenced by character reference",description:"Unexpected code point. Do not use noncharacters in HTML"},noncharacterInInputStream:{reason:"Unexpected noncharacter character",description:"Unexpected code point `%x`. Do not use noncharacters in HTML"},nullCharacterReference:{reason:"Unexpected NULL character referenced by character reference",description:"Unexpected code point. Do not use NULL characters in HTML"},openElementsLeftAfterEof:{reason:"Unexpected end of file",description:"Unexpected end of file. Expected closing tag instead",url:!1},surrogateCharacterReference:{reason:"Unexpected surrogate character referenced by character reference",description:"Unexpected code point. Do not use lone surrogate characters in HTML"},surrogateInInputStream:{reason:"Unexpected surrogate character",description:"Unexpected code point `%x`. Do not use lone surrogate characters in HTML"},unexpectedCharacterAfterDoctypeSystemIdentifier:{reason:"Invalid character after system identifier in doctype",description:"Unexpected character at `%c`. Expected `>`"},unexpectedCharacterInAttributeName:{reason:"Unexpected character in attribute name",description:"Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter"},unexpectedCharacterInUnquotedAttributeValue:{reason:"Unexpected character in unquoted attribute value",description:"Unexpected `%c`. Quote the attribute value to include it"},unexpectedEqualsSignBeforeAttributeName:{reason:"Unexpected equals sign before attribute name",description:"Unexpected `%c`. Add an attribute name before it"},unexpectedNullCharacter:{reason:"Unexpected NULL character",description:"Unexpected code point `%x`. Do not use NULL characters in HTML"},unexpectedQuestionMarkInsteadOfTagName:{reason:"Unexpected question mark instead of tag name",description:"Unexpected `%c`. Expected an ASCII letter instead"},unexpectedSolidusInTag:{reason:"Unexpected slash in tag",description:"Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value"},unknownNamedCharacterReference:{reason:"Unexpected unknown named character reference",description:"Unexpected character reference. Expected known named character references"}},ws={2:!0,1:!1,0:null},Bs=["area","base","basefont","bgsound","br","col","command","embed","frame","hr","image","img","input","isindex","keygen","link","menuitem","meta","nextid","param","source","track","wbr"],Hs=function(e,t,n,r,i){const o=Us(t);if(null!=n&&("number"!=typeof n||n<0||n===Number.POSITIVE_INFINITY))throw new Error("Expected positive finite index for child node");if(!(null==r||r.type&&r.children))throw new Error("Expected parent node");if(!e||!e.type||"string"!=typeof e.type)return!1;if(null==r!=(null==n))throw new Error("Expected both parent and index");return o.call(i,e,n,r)},Us=function(e){if(null==e)return qs;if("string"==typeof e)return t=e,function(e){return qs(e)&&e.tagName===t};var t;if("object"==typeof e)return function(e){const t=[];let n=-1;for(;++n<e.length;)t[n]=Us(e[n]);return Gs((function(...e){let n=-1;for(;++n<t.length;)if(t[n].call(this,...e))return!0;return!1}))}(e);if("function"==typeof e)return Gs(e);throw new Error("Expected function, string, or array as test")};function Gs(e){return function(t,...n){return qs(t)&&Boolean(e.call(this,t,...n))}}function qs(e){return Boolean(e&&"object"==typeof e&&"element"===e.type&&"string"==typeof e.tagName)}const Ks=Nt("comment");function zs(e){var t=e&&"object"==typeof e&&"text"===e.type?e.value||"":e;return"string"==typeof t&&""===t.replace(/[ \t\n\f\r]/g,"")}const js=Ys(1),Vs=Ys(-1);function Ys(e){return function(t,n,r){const i=t&&t.children;let o=n+e,s=i&&i[o];if(!r)for(;s&&zs(s);)o+=e,s=i[o];return s}}const Qs=Nt("text");function Ws(e){return Qs(e)&&zs(e.value.charAt(0))}const Xs={}.hasOwnProperty;function $s(e){return function(t,n,r){return Xs.call(e,t.tagName)&&e[t.tagName](t,n,r)}}const Zs=$s({html:function(e,t,n){const r=js(n,t);return!r||!Ks(r)},head:Js,body:function(e,t,n){const r=js(n,t);return!r||!Ks(r)},p:function(e,t,n){const r=js(n,t);return r?Hs(r,["address","article","aside","blockquote","details","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","main","menu","nav","ol","p","pre","section","table","ul"]):!n||!Hs(n,["a","audio","del","ins","map","noscript","video"])},li:function(e,t,n){const r=js(n,t);return!r||Hs(r,"li")},dt:function(e,t,n){const r=js(n,t);return r&&Hs(r,["dt","dd"])},dd:function(e,t,n){const r=js(n,t);return!r||Hs(r,["dt","dd"])},rt:ea,rp:ea,optgroup:function(e,t,n){const r=js(n,t);return!r||Hs(r,"optgroup")},option:function(e,t,n){const r=js(n,t);return!r||Hs(r,["option","optgroup"])},menuitem:function(e,t,n){const r=js(n,t);return!r||Hs(r,["menuitem","hr","menu"])},colgroup:Js,caption:Js,thead:function(e,t,n){const r=js(n,t);return r&&Hs(r,["tbody","tfoot"])},tbody:function(e,t,n){const r=js(n,t);return!r||Hs(r,["tbody","tfoot"])},tfoot:function(e,t,n){return!js(n,t)},tr:function(e,t,n){const r=js(n,t);return!r||Hs(r,"tr")},td:ta,th:ta});function Js(e,t,n){const r=js(n,t,!0);return!r||!Ks(r)&&!Ws(r)}function ea(e,t,n){const r=js(n,t);return!r||Hs(r,["rp","rt"])}function ta(e,t,n){const r=js(n,t);return!r||Hs(r,["td","th"])}const na=$s({html:function(e){const t=js(e,-1);return!t||!Ks(t)},head:function(e){const t=e.children,n=[];let r,i=-1;for(;++i<t.length;)if(r=t[i],Hs(r,["title","base"])){if(n.includes(r.tagName))return!1;n.push(r.tagName)}return t.length>0},body:function(e){const t=js(e,-1,!0);return!t||!Ks(t)&&!Ws(t)&&!Hs(t,["meta","link","script","style","template"])},colgroup:function(e,t,n){const r=Vs(n,t),i=js(e,-1,!0);return(!Hs(r,"colgroup")||!Zs(r,n.children.indexOf(r),n))&&(i&&Hs(i,"col"))},tbody:function(e,t,n){const r=Vs(n,t),i=js(e,-1);return(!Hs(r,["thead","tbody"])||!Zs(r,n.children.indexOf(r),n))&&(i&&Hs(i,"tr"))}}),ra={opening:na,closing:Zs},ia={name:[["\t\n\f\r &/=>".split(""),"\t\n\f\r \"&'/=>`".split("")],["\0\t\n\f\r \"&'/<=>".split(""),"\0\t\n\f\r \"&'/<=>`".split("")]],unquoted:[["\t\n\f\r &>".split(""),"\0\t\n\f\r \"&'<=>`".split("")],["\0\t\n\f\r \"&'<=>`".split(""),"\0\t\n\f\r \"&'<=>`".split("")]],single:[["&'".split(""),"\"&'`".split("")],["\0&'".split(""),"\0\"&'`".split("")]],double:[['"&'.split(""),"\"&'`".split("")],['\0"&'.split(""),"\0\"&'`".split("")]]};function oa(e,t,n,r){return!r||"element"!==r.type||"script"!==r.tagName&&"style"!==r.tagName?mo(t.value,Object.assign({},e.entities,{subset:["<","&"]})):t.value}const sa={comment:function(e,t){return e.bogusComments?"<?"+mo(t.value,Object.assign({},e.entities,{subset:[">"]}))+">":"\x3c!--"+t.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g,(function(t){return mo(t,Object.assign({},e.entities,{subset:["<",">"]}))}))+"--\x3e"},doctype:function(e){return"<!"+(e.upperDoctype?"DOCTYPE":"doctype")+(e.tightDoctype?"":" ")+"html>"},element:function(e,t,n,r){const i=e.schema,o="svg"===i.space?void 0:e.omit;let s="svg"===i.space?e.closeEmpty:e.voids.includes(t.tagName.toLowerCase());const a=[];let u;"html"===i.space&&"svg"===t.tagName&&(e.schema=as);const c=function(e,t){const n=[];let r,i,o,s=-1;for(r in t)void 0!==t[r]&&null!==t[r]&&(i=la(e,r,t[r]),i&&n.push(i));for(;++s<n.length;)o=e.tight?n[s].charAt(n[s].length-1):null,s!==n.length-1&&'"'!==o&&"'"!==o&&(n[s]+=" ");return n.join("")}(e,t.properties),l=ca(e,"html"===i.space&&"template"===t.tagName?t.content:t);return e.schema=i,l&&(s=!1),!c&&o&&o.opening(t,n,r)||(a.push("<",t.tagName,c?" "+c:""),s&&("svg"===i.space||e.close)&&(u=c.charAt(c.length-1),(!e.tightClose||"/"===u||u&&'"'!==u&&"'"!==u)&&a.push(" "),a.push("/")),a.push(">")),a.push(l),s||o&&o.closing(t,n,r)||a.push("</"+t.tagName+">"),a.join("")},raw:function(e,t,n,r){return e.dangerous?t.value:oa(e,t,0,r)},root:ca,text:oa},aa={}.hasOwnProperty;function ua(e,t,n,r){if(!t||!t.type)throw new Error("Expected node, not `"+t+"`");if(!aa.call(sa,t.type))throw new Error("Cannot compile unknown node `"+t.type+"`");return sa[t.type](e,t,n,r)}function ca(e,t){const n=[],r=t&&t.children||[];let i=-1;for(;++i<r.length;)n[i]=ua(e,r[i],i,t);return n.join("")}function la(e,t,n){const r=ps(e.schema,t);let i,o=e.quote;if(!r.overloadedBoolean||n!==r.attribute&&""!==n?(r.boolean||r.overloadedBoolean&&"string"!=typeof n)&&(n=Boolean(n)):n=!0,null==n||!1===n||"number"==typeof n&&Number.isNaN(n))return"";const s=mo(r.attribute,Object.assign({},e.entities,{subset:ia.name["html"===e.schema.space?e.valid:1][e.safe]}));return!0===n?s:(n="object"==typeof n&&"length"in n?(r.commaSeparated?Ts:Es)(n,{padLeft:!e.tightLists}):String(n),e.collapseEmpty&&!n?s:(e.unquoted&&(i=mo(n,Object.assign({},e.entities,{subset:ia.unquoted[e.valid][e.safe],attribute:!0}))),i!==n&&(e.smart&&oi(n,o)>oi(n,e.alternative)&&(o=e.alternative),i=o+mo(n,Object.assign({},e.entities,{subset:("'"===o?ia.single:ia.double)["html"===e.schema.space?e.valid:1][e.safe],attribute:!0}))+o),s+(i?"="+i:i)))}var pa=n(848);const ha=Ss,fa={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"},da={}.hasOwnProperty,ma=Nt("root"),Ea=Nt("element"),ga=Nt("text");function Ta(e,t,n){if("function"!=typeof e)throw new TypeError("h is not a function");const r=function(e){const t=e("div",{});return Boolean(t&&("_owner"in t||"_store"in t)&&(void 0===t.key||null===t.key))}(e),i=function(e){const t=e("div",{});return Boolean(t&&t.context&&t.context._isVue)}(e),o=function(e){return"VirtualNode"===e("div",{}).type}(e);let s,a;if("string"==typeof n||"boolean"==typeof n?(s=n,n={}):(n||(n={}),s=n.prefix),ma(t))a=1===t.children.length&&Ea(t.children[0])?t.children[0]:{type:"element",tagName:"div",properties:{},children:t.children};else{if(!Ea(t))throw new Error("Expected root or element, not `"+(t&&t.type||t)+"`");a=t}return Aa(e,a,{schema:"svg"===n.space?as:ss,prefix:null==s?r||i||o?"h-":null:"string"==typeof s?s:s?"h-":null,key:0,react:r,vue:i,vdom:o,hyperscript:_a(e)})}function Aa(e,t,n){const r=n.schema;let i=r,o=t.tagName;const s={},a=[];let u,c=-1;for(u in"html"===r.space&&"svg"===o.toLowerCase()&&(i=as,n.schema=i),t.properties)t.properties&&da.call(t.properties,u)&&Ca(s,u,t.properties[u],n,o);if(n.vdom&&("html"===i.space?o=o.toUpperCase():i.space&&(s.namespace=ha[i.space])),n.prefix&&(n.key++,s.key=n.prefix+n.key),t.children)for(;++c<t.children.length;){const r=t.children[c];Ea(r)?a.push(Aa(e,r,n)):ga(r)&&a.push(r.value)}return n.schema=r,a.length>0?e.call(t,o,s,a):e.call(t,o,s)}function Ca(e,t,n,r,i){const o=ps(r.schema,t);let s;null==n||"number"==typeof n&&Number.isNaN(n)||!1===n&&(r.vue||r.vdom||r.hyperscript)||!n&&o.boolean&&(r.vue||r.vdom||r.hyperscript)||(Array.isArray(n)&&(n=o.commaSeparated?Ts(n):Es(n)),o.boolean&&r.hyperscript&&(n=""),"style"===o.property&&"string"==typeof n&&(r.react||r.vue||r.vdom)&&(n=function(e,t){const n={};try{pa(e,((e,t)=>{"-ms-"===e.slice(0,4)&&(e="ms-"+e.slice(4)),n[e.replace(/-([a-z])/g,((e,t)=>t.toUpperCase()))]=t}))}catch(e){throw e.message=t+"[style]"+e.message.slice("undefined".length),e}return n}(n,i)),r.vue?"style"!==o.property&&(s="attrs"):o.mustUseProperty||(r.vdom?"style"!==o.property&&(s="attributes"):r.hyperscript&&(s="attrs")),s?e[s]=Object.assign(e[s]||{},{[o.attribute]:n}):o.space&&r.react?e[fa[o.property]||o.property]=n:e[o.attribute]=n)}function _a(e){return"context"in e&&"cleanup"in e}var Da={}.hasOwnProperty,ka=dn("type",{handlers:{root:function(e,t){var n={nodeName:"#document",mode:(e.data||{}).quirksMode?"quirks":"no-quirks",childNodes:[]};return n.childNodes=Na(e.children,n,t),ya(e,n)},element:function(e,t){var n=t.space;return Ta((function(n,r){var i,o,s,a,u,c=[];for(s in r)Da.call(r,s)&&!1!==r[s]&&((i=ps(t,s)).boolean&&!r[s]||(o={name:s,value:!0===r[s]?"":String(r[s])},i.space&&"html"!==i.space&&"svg"!==i.space&&((a=s.indexOf(":"))<0?o.prefix="":(o.name=s.slice(a+1),o.prefix=s.slice(0,a)),o.namespace=Ss[i.space]),c.push(o)));return"html"===t.space&&"svg"===e.tagName&&(t=as),(u=ya(e,{nodeName:n,tagName:n,attrs:c,namespaceURI:Ss[t.space],childNodes:[],parentNode:void 0})).childNodes=Na(e.children,u,t),"template"===n&&(u.content=function(e,t){var n={nodeName:"#document-fragment",childNodes:[]};return n.childNodes=Na(e.children,n,t),ya(e,n)}(e.content,t)),u}),Object.assign({},e,{children:[]}),{space:n})},text:function(e){return ya(e,{nodeName:"#text",value:e.value,parentNode:void 0})},comment:function(e){return ya(e,{nodeName:"#comment",data:e.value,parentNode:void 0})},doctype:function(e){return ya(e,{nodeName:"#documentType",name:"html",publicId:"",systemId:"",parentNode:void 0})}}});function Na(e,t,n){var r,i=-1,o=[];if(e)for(;++i<e.length;)(r=ka(e[i],n)).parentNode=t,o.push(r);return o}function ya(e,t){var n=e.position;return n&&n.start&&n.end&&(t.sourceCodeLocation={startLine:n.start.line,startCol:n.start.column,startOffset:n.start.offset,endLine:n.end.line,endCol:n.end.column,endOffset:n.end.offset}),t}const ba={sourceCodeLocationInfo:!0,scriptingEnabled:!1},Sa=function(e,t,n){let r=-1;const i=new Lo(ba),o=dn("type",{handlers:{root:function(e){h(e.children)},element:function(e){m(),i._processToken(function(e){const t=Object.assign(Fa(e));return t.startTag=Object.assign({},t),{type:"START_TAG_TOKEN",tagName:e.tagName,selfClosing:!1,attrs:xa(e),location:t}}(e),Ss.html),h(e.children),Bs.includes(e.tagName)||(m(),i._processToken(function(e){const t=Object.assign(Fa(e));return t.startTag=Object.assign({},t),{type:"END_TAG_TOKEN",tagName:e.tagName,attrs:[],location:t}}(e)))},text:function(e){m(),i._processToken({type:"CHARACTER_TOKEN",chars:e.value,location:Fa(e)})},comment:f,doctype:function(e){m(),i._processToken({type:"DOCTYPE_TOKEN",name:"html",forceQuirks:!1,publicId:"",systemId:"",location:Fa(e)})},raw:function(e){const t=It(e),n=t.line||1,r=t.column||1,o=t.offset||0;if(!u)throw new Error("Expected `preprocessor`");if(!a)throw new Error("Expected `tokenizer`");if(!c)throw new Error("Expected `posTracker`");if(!l)throw new Error("Expected `locationTracker`");u.html=void 0,u.pos=-1,u.lastGapPos=-1,u.lastCharPos=-1,u.gapStack=[],u.skipNextNewLine=!1,u.lastChunkWritten=!1,u.endOfChunkHit=!1,c.isEol=!1,c.lineStartPos=1-r,c.droppedBufferSize=o,c.offset=0,c.col=1,c.line=n,l.currentAttrLocation=void 0,l.ctLoc=Fa(e),a.write(e.value),i._runParsingLoop(null),("NAMED_CHARACTER_REFERENCE_STATE"===a.state||"NUMERIC_CHARACTER_REFERENCE_END_STATE"===a.state)&&(u.lastChunkWritten=!0,a[a.state](a._consume()));const s=a.currentCharacterToken;s&&(s.location.endLine=c.line,s.location.endCol=c.col+1,s.location.endOffset=c.offset+1,i._processToken(s))}},unknown:Oa});let s,a,u,c,l;if(function(e){return Boolean(e&&!("message"in e&&"messages"in e))}(t)&&(n=t,t=void 0),n&&n.passThrough)for(;++r<n.passThrough.length;)o.handlers[n.passThrough[r]]=d;const p=Fs(function(e){const t="root"===e.type?e.children[0]:e;return Boolean(t&&("doctype"===t.type||"element"===t.type&&"html"===t.tagName))}(e)?function(){const t=i.treeAdapter.createDocument();if(i._bootstrap(t,void 0),a=i.tokenizer,!a)throw new Error("Expected `tokenizer`");return u=a.preprocessor,l=a.__mixins[0],c=l.posTracker,o(e),t}():function(){const t={nodeName:"template",tagName:"template",attrs:[],namespaceURI:Ss.html,childNodes:[]},n={nodeName:"documentmock",tagName:"documentmock",attrs:[],namespaceURI:Ss.html,childNodes:[]},r={nodeName:"#document-fragment",childNodes:[]};if(i._bootstrap(n,t),i._pushTmplInsertionMode("IN_TEMPLATE_MODE"),i._initTokenizerForFragmentParsing(),i._insertFakeRootElement(),i._resetInsertionMode(),i._findFormInFragmentContext(),a=i.tokenizer,!a)throw new Error("Expected `tokenizer`");return u=a.preprocessor,l=a.__mixins[0],c=l.posTracker,o(e),i._adoptNodes(n.childNodes[0],r),r}(),t);return s&&Ft(p,"comment",((e,t,n)=>{const r=e;if(r.value.stitch&&null!==n&&null!==t)return n.children[t]=r.value.stitch,t})),"root"!==e.type&&"root"===p.type&&1===p.children.length?p.children[0]:p;function h(e){let t=-1;if(e)for(;++t<e.length;)o(e[t])}function f(e){m(),i._processToken({type:"COMMENT_TOKEN",data:e.value,location:Fa(e)})}function d(e){let r;s=!0,r="children"in e?{...e,children:Sa({type:"root",children:e.children},t,n).children}:{...e},f({type:"comment",value:{stitch:r}})}function m(){if(!a)throw new Error("Expected `tokenizer`");a.tokenQueue=[],a.state="DATA_STATE",a.returnState="",a.charRefCode=-1,a.tempBuff=[],a.lastStartTagName="",a.consumedAfterSnapshot=-1,a.active=!1,a.currentCharacterToken=void 0,a.currentToken=void 0,a.currentAttr=void 0}};function xa(e){return(t={tagName:e.tagName,type:"element",properties:e.properties,children:[]},ka(t,ss)).attrs;var t}function Oa(e){throw new Error("Cannot compile `"+e.type+"` node")}function Fa(e){const t=It(e),n=vt(e);return{startLine:t.line,startCol:t.column,startOffset:t.offset,endLine:n.line,endCol:n.column,endOffset:n.offset}}const Ia=Us(["audio","canvas","embed","iframe","img","math","object","picture","svg","video"]),va=["address","article","aside","blockquote","body","br","caption","center","col","colgroup","dd","dialog","dir","div","dl","dt","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","legend","li","li","listing","main","menu","nav","ol","optgroup","option","p","plaintext","pre","section","summary","table","tbody","td","td","tfoot","th","th","thead","tr","ul","wbr","xmp"],La=["button","input","select","textarea"],Ra=["area","base","basefont","dialog","datalist","head","link","meta","noembed","noframes","param","rp","script","source","style","template","track","title"],Ma=Nt(["doctype","comment"]);function Pa(e={}){const t=function(e){return function(t){return String(t).replace(/[\t\n\v\f\r ]+/g,e)}}(e.newlines?za:ja);return e=>{wa(e,{collapse:t,whitespace:"normal"})}}function wa(e,t){if("children"in e){const n=Object.assign({},t);return("root"===e.type||Ga(e))&&(n.before=!0,n.after=!0),n.whitespace=function(e,t){if("tagName"in e&&e.properties)switch(e.tagName){case"listing":case"plaintext":case"xmp":return"pre";case"nobr":return"nowrap";case"pre":return e.properties.wrap?"pre-wrap":"pre";case"td":case"th":return e.properties.noWrap?"nowrap":t.whitespace;case"textarea":return"pre-wrap"}return t.whitespace}(e,t),function(e,t){let n=t.before;const r=t.after,i=e.children;let o=i.length,s=-1;for(;++s<o;){const e=wa(i[s],Object.assign({},t,{before:n,after:Ba(i,s,r)}));e.remove?(i.splice(s,1),s--,o--):e.ignore||(n=e.stripAtStart),Ua(i[s])&&(n=!1)}return{remove:!1,ignore:!1,stripAtStart:Boolean(n||r)}}(e,n)}if("text"===e.type){if("normal"===t.whitespace)return function(e,t){const n=t.collapse(e.value),r={remove:!1,ignore:!1,stripAtStart:!1};let i=0,o=n.length;return t.before&&Ka(n.charAt(0))&&i++,i!==o&&Ka(n.charAt(o-1))&&(t.after?o--:r.stripAtStart=!0),i===o?r.remove=!0:e.value=n.slice(i,o),r}(e,t);"nowrap"===t.whitespace&&(e.value=t.collapse(e.value))}return{remove:!1,ignore:Ma(e),stripAtStart:!1}}function Ba(e,t,n){for(;++t<e.length;){const n=e[t];let r=Ha(n);if(void 0===r&&"children"in n&&!qa(n)&&(r=Ba(n.children,-1)),"boolean"==typeof r)return r}return n}function Ha(e){if("element"===e.type){if(Ua(e))return!1;if(Ga(e))return!0}else if("text"===e.type){if(!zs(e))return!1}else if(!Ma(e))return!1}function Ua(e){return Ia(e)||Hs(e,La)}function Ga(e){return Hs(e,va)}function qa(e){return Boolean("properties"in e&&e.properties&&e.properties.hidden)||Ma(e)||Hs(e,Ra)}function Ka(e){return" "===e||"\n"===e}function za(e){const t=/\r?\n|\r/.exec(e);return t?t[0]:" "}function ja(){return" "}function Va(e,t){const n=t.children||[],r=[];let i=-1,o=n.length,s=n[i+1];for(;s&&"element"===s.type&&"br"===s.tagName;)i++,s=n[i+1];for(s=n[o-1];o-1>i&&s&&"element"===s.type&&"br"===s.tagName;)o--,s=n[o-1];for(;++i<o;){const o=Wa(e,n[i],t);Array.isArray(o)?r.push(...o):o&&r.push(o)}return r}const Ya={}.hasOwnProperty;function Qa(e,t){return e.wrapText?t:t.replace(/\r?\n|\r/g," ")}function Wa(e,t,n){let r;if("element"===t.type){if(t.properties&&"ignore"===t.properties.dataMdast)return;Ya.call(e.handlers,t.tagName)&&(r=e.handlers[t.tagName])}else Ya.call(e.handlers,t.type)&&(r=e.handlers[t.type]);return"function"==typeof r?r(e,t,n):function(e,t){return"string"==typeof t.value?e(t,"text",Qa(e,t.value)):Va(e,t)}(e,t)}const Xa=Nt(["break","delete","emphasis","footnote","footnoteReference","image","imageReference","inlineCode","link","linkReference","strong","text"]);function $a(e){return Ja(e,(function(e){const t=e[0];return 1!==e.length||"text"!==t.type||" "!==t.value&&"\n"!==t.value?{type:"paragraph",children:e}:[]}))}function Za(e){let t,n=-1;for(;++n<e.length;)if(t=e[n],!Xa(t)||"children"in t&&Za(t.children))return!0;return!1}function Ja(e,t,n){const r=n||tu,i=function(e){let t,n=[],r=-1;for(;++r<e.length;)t=e[r],"delete"!==t.type&&"link"!==t.type||!Za(t.children)?n.push(t):n=n.concat(eu(t));return n}(e);let o,s,a=[],u=-1;for(;++u<i.length;)s=i[u],Xa(s)?(o||(o=[]),o.push(s)):(o&&(a=a.concat(t(o)),o=void 0),a=a.concat(r(s)));return o&&(a=a.concat(t(o))),a}function eu(e){return Ja(e.children,(function(t){const{children:n,...r}=e;return{...s(!0,{},r),children:t}}),(function(t){if("children"in t&&"children"in e){const{children:n,...r}=e;return{...t,children:[{...s(!0,{},r),children:t.children}]}}return{...t}}))}function tu(e){return e}function nu(e,t){return $a(Va(e,t))}const ru=require("url");function iu(e,t){return null==t?"":e.frozenBaseUrl?String(new ru.URL(t,e.frozenBaseUrl)):t}var ou=function(e,t,n){var r=Nt(n);if(!e||!e.type||!e.children)throw new Error("Expected parent node");if("number"==typeof t){if(t<0||t===Number.POSITIVE_INFINITY)throw new Error("Expected positive finite number as index")}else if((t=e.children.indexOf(t))<0)throw new Error("Expected child node or index");for(;++t<e.children.length;)if(r(e.children[t],t,e))return e.children[t];return null};const su=/\n/g,au=/[\t ]+/g,uu=Us("br"),cu=Us("p"),lu=Us(["th","td"]),pu=Us("tr"),hu=Us(["datalist","head","noembed","noframes","noscript","rp","script","style","template","title",function(e){return Boolean((e.properties||{}).hidden)},function(e){return"dialog"===e.tagName&&!(e.properties||{}).open}]),fu=Us(["address","article","aside","blockquote","body","caption","center","dd","dialog","dir","dl","dt","div","figure","figcaption","footer","form,","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","legend","listing","main","menu","nav","ol","p","plaintext","pre","section","ul","xmp"]);function du(e,t={}){const n=e.children||[],r=fu(e),i=Au(e,{whitespace:t.whitespace||"normal",breakBefore:!1,breakAfter:!1});let o,s,a,u=-1;if("text"===e.type||"comment"===e.type)return Eu(e,{whitespace:i,breakBefore:!0,breakAfter:!0});for(o=[];++u<n.length;)o=o.concat(mu(n[u],e,{whitespace:i,breakBefore:u?null:r,breakAfter:u<n.length-1?uu(n[u+1]):r}));u=-1;const c=[];for(;++u<o.length;)s=o[u],"number"==typeof s?void 0!==a&&s>a&&(a=s):s&&(a&&c.push("\n".repeat(a)),a=0,c.push(s));return c.join("")}function mu(e,t,n){return"element"===e.type?function(e,t,n){const r=Au(e,n),i=e.children||[];let o,s,a=-1,u=[];if(hu(e))return u;for(uu(e)||pu(e)&&ou(t,e,pu)?s="\n":cu(e)?(o=2,s=2):fu(e)&&(o=1,s=1);++a<i.length;)u=u.concat(mu(i[a],e,{whitespace:r,breakBefore:a?void 0:o,breakAfter:a<i.length-1?uu(i[a+1]):s}));return lu(e)&&ou(t,e,lu)&&u.push("\t"),o&&u.unshift(o),s&&u.push(s),u}(e,t,n):"text"===e.type?["normal"===n.whitespace?Eu(e,n):gu(e)]:[]}function Eu(e,t){const n=String(e.value),r=[],i=[];let o,s,a,u=0,c=-1;for(;u<n.length;)su.lastIndex=u,o=su.exec(n),s=o?o.index:n.length,r.push(Tu(n.slice(u,s).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g,""),t.breakBefore,t.breakAfter)),u=s+1;for(;++c<r.length;)8203===r[c].charCodeAt(r[c].length-1)||c<r.length-1&&8203===r[c+1].charCodeAt(0)?(i.push(r[c]),a=""):r[c]&&(a&&i.push(a),i.push(r[c]),a=" ");return i.join("")}function gu(e){return String(e.value)}function Tu(e,t,n){const r=[];let i,o,s=0;for(;s<e.length;)au.lastIndex=s,i=au.exec(e),o=i?i.index:e.length,s||o||!i||t||r.push(""),s!==o&&r.push(e.slice(s,o)),s=i?o+i[0].length:o;return s===o||n||r.push(""),r.join(" ")}function Au(e,t){let n;if("element"===e.type)switch(n=e.properties||{},e.tagName){case"listing":case"plaintext":case"xmp":return"pre";case"nobr":return"nowrap";case"pre":return n.wrap?"pre-wrap":"pre";case"td":case"th":return n.noWrap?"nowrap":t.whitespace;case"textarea":return"pre-wrap"}return t.whitespace}const Cu="language-",_u=Us("pre"),Du=Us("code");function ku(e,t){const n=t.children;let r,i,o=-1;if(_u(t))for(;++o<n.length;){const e=n[o];if(Du(e)&&e.properties&&e.properties.className&&Array.isArray(e.properties.className)){r=e.properties.className;break}}if(r)for(o=-1;++o<r.length;)if(String(r[o]).slice(0,Cu.length)===Cu){i=String(r[o]).slice(Cu.length);break}return e(t,"code",{lang:i||null,meta:null},function(e){return String(e).replace(/\n+$/,"")}(Qa(e,du(t))))}function Nu(e,t){return e(t,"delete",Va(e,t))}function yu(e){let t=-1;if(e.length>1)for(;++t<e.length;)if(e[t].spread)return!0;return!1}function bu(e,t){const n=Va(e,t);let r=-1;for(;++r<n.length;){const e=n[r];"listItem"!==e.type&&(n[r]={type:"listItem",spread:!1,checked:null,children:[e]})}return n}const Su=Us("div"),xu=Us("dt"),Ou=Us("dd");function Fu(e,t){const n=bu(e,{type:"element",tagName:"x",children:t});return 0===n.length?[]:1===n.length?n[0].children:[{type:"list",ordered:!1,start:null,spread:yu(n),children:n}]}function Iu(e,t){return e(t,"emphasis",Va(e,t))}function vu(e,t){const n=Number(t.tagName.charAt(1))||1,r=e.wrapText;e.wrapText=!1;const i=e(t,"heading",{depth:n},Va(e,t));return e.wrapText=r,i}function Lu(e,t){const n=t.properties;return e(t,"image",{url:iu(e,String(n.src||"")||null),title:n.title||null,alt:n.alt||""})}function Ru(e,t){return e(t,"inlineCode",Qa(e,du(t)))}var Mu={}.hasOwnProperty;function Pu(e,t){var n=t&&e&&"object"==typeof e&&"element"===e.type&&e.properties&&Mu.call(e.properties,t)&&e.properties[t];return null!=n&&!1!==n}const wu=Us("option");function Bu(e,t,n){const r=n||t.properties;let i=Hu(t);const o=Math.min(Number.parseInt(String(r.size),10),0)||(r.multiple?4:1);let s=-1;const a=[],u=[];for(;++s<i.length;)Pu(i[s],"selected")&&a.push(i[s]);for(i=(a.length>0?a:i).slice(0,o),s=-1;++s<i.length;){const t=i[s],n=Qa(e,du(t)),r=t.properties,o=n||String(r.label||""),a=String(r.value||"")||n;u.push([a,o===a?null:o])}return u}function Hu(e){const t=e.children;let n,r=-1,i=[];for(;++r<t.length;)n=t[r],Array.isArray(n.children)&&(i=i.concat(Hu(n))),wu(n)&&!Pu(n,"disabled")&&i.push(n);return i}const Uu=Us("datalist"),Gu=Us("p"),qu=Us("input");function Ku(e,t){const n=t.children[0];let r,i,o=null;Gu(n)&&(r=n.children[0],qu(r)&&r.properties&&("checkbox"===r.properties.type||"radio"===r.properties.type)&&(o=Boolean(r.properties.checked),i={...t,children:[{...n,children:n.children.slice(1)},...t.children.slice(1)]}));const s=nu(e,i||t);return e(t,"listItem",{spread:s.length>1,checked:o},s)}const zu=Us("ol");function ju(e,t){const n=zu(t),r=bu(e,t);let i=null;return n&&(i=Pu(t,"start")?Number.parseInt(String(t.properties.start),10):1),e(t,"list",{ordered:n,start:i,spread:yu(r)},r)}const Vu=Us("source"),Yu=Us("video");function Qu(e,t){let n=Va(e,t);const r=t.properties,i=Yu(t)&&String(r.poster||"");let o,s=String(r.src||""),a=-1,u=!1;if(Ft({type:"root",children:n},"link",(function(){return u=!0,xt})),u||Za(n))return n;for(;!s&&++a<t.children.length;)o=t.children[a],Vu(o)&&(s=String(o.properties.src||""));return i&&(n=[{type:"image",title:null,url:iu(e,i),alt:v({children:n})}]),{type:"link",title:t.properties.title||null,url:iu(e,s),children:n}}function Wu(e,t){const n=Va(e,t);if(n.length>0)return e(t,"paragraph",n)}function Xu(e,t){return e(t,"strong",Va(e,t))}function $u(e,t){const n=e.wrapText;e.wrapText=!1;const r=e(t,"tableCell",Va(e,t));if(t.properties&&(t.properties.rowSpan||t.properties.colSpan)){const e=r.data||(r.data={});t.properties.rowSpan&&(e.rowSpan=t.properties.rowSpan),t.properties.colSpan&&(e.colSpan=t.properties.colSpan)}return e.wrapText=n,r}const Zu=Us("thead"),Ju=Us("tr"),ec=Us(["th","td"]);function tc(e){const t=[];let n,r,i=-1;for(;++i<e.length;)n=e[i],"tableCell"===n.type?(r&&(n.children.unshift(...r),r=void 0),t.push(n)):(r||(r=[]),r.push(n));return r&&(n=t[t.length-1],n||(n={type:"tableCell",children:[]},t.push(n)),n.children.push(...r)),t}const nc={root:function(e,t){let n=Va(e,t);return(e.document||Za(n))&&(n=$a(n)),e(t,"root",n)},text:function(e,t){return e(t,"text",Qa(e,t.value))},comment:function(e,t){return e(t,"html","\x3c!--"+Qa(e,t.value)+"--\x3e")},doctype:rc,applet:rc,area:rc,basefont:rc,bgsound:rc,caption:rc,col:rc,colgroup:rc,command:rc,content:rc,datalist:rc,dialog:rc,element:rc,embed:rc,frame:rc,frameset:rc,isindex:rc,keygen:rc,link:rc,math:rc,menu:rc,menuitem:rc,meta:rc,nextid:rc,noembed:rc,noframes:rc,optgroup:rc,option:rc,param:rc,script:rc,shadow:rc,source:rc,spacer:rc,style:rc,svg:rc,template:rc,title:rc,track:rc,abbr:Va,acronym:Va,bdi:Va,bdo:Va,big:Va,blink:Va,button:Va,canvas:Va,cite:Va,data:Va,details:Va,dfn:Va,font:Va,ins:Va,label:Va,map:Va,marquee:Va,meter:Va,nobr:Va,noscript:Va,object:Va,output:Va,progress:Va,rb:Va,rbc:Va,rp:Va,rt:Va,rtc:Va,ruby:Va,slot:Va,small:Va,span:Va,sup:Va,sub:Va,tbody:Va,tfoot:Va,thead:Va,time:Va,address:nu,article:nu,aside:nu,body:nu,center:nu,div:nu,fieldset:nu,figcaption:nu,figure:nu,form:nu,footer:nu,header:nu,hgroup:nu,html:nu,legend:nu,main:nu,multicol:nu,nav:nu,picture:nu,section:nu,a:function(e,t){const n=t.properties;return e(t,"link",{title:n.title||null,url:iu(e,String(n.href||"")||null)},Va(e,t))},audio:Qu,b:Xu,base:function(e,t){e.baseFound||(e.frozenBaseUrl=String(t.properties&&t.properties.href||"")||null,e.baseFound=!0)},blockquote:function(e,t){return e(t,"blockquote",nu(e,t))},br:function(e,t){return e.wrapText?e(t,"break"):e(t,"text"," ")},code:Ru,dir:ju,dl:function(e,t){const n=t.children;let r=-1,i=[];const o=[];let s,a,u={titles:[],definitions:[]};for(;++r<n.length;)s=n[r],i=i.concat(Su(s)?s.children:s);for(r=-1;++r<i.length;)s=i[r],xu(s)?(Ou(i[r-1])&&(o.push(u),u={titles:[],definitions:[]}),u.titles.push(s)):u.definitions.push(s);o.push(u),r=-1;const c=[];for(;++r<o.length;)a=[...Fu(e,o[r].titles),...Fu(e,o[r].definitions)],a.length>0&&c.push({type:"listItem",spread:a.length>1,checked:null,children:a});if(c.length>0)return e(t,"list",{ordered:!1,start:null,spread:yu(c)},c)},dt:Ku,dd:Ku,del:Nu,em:Iu,h1:vu,h2:vu,h3:vu,h4:vu,h5:vu,h6:vu,hr:function(e,t){return e(t,"thematicBreak")},i:Iu,iframe:function(e,t){const n=t.properties,r=String(n.src||""),i=String(n.title||"");if(r&&i)return{type:"link",title:null,url:iu(e,r),children:[{type:"text",value:Qa(e,i)}]}},img:Lu,image:Lu,input:function(e,t){const n=t.properties;let r=String(n.value||n.placeholder||"");const i=[],o=[];let s,a=[],u=-1;if(!n.disabled&&"hidden"!==n.type&&"file"!==n.type){if("checkbox"===n.type||"radio"===n.type)return e(t,"text",Qa(e,e[n.checked?"checked":"unchecked"]));if("image"===n.type)return n.alt||r?e(t,"image",{url:iu(e,String(n.src||"")||null),title:Qa(e,String(n.title||""))||null,alt:Qa(e,String(n.alt||r))}):[];if(r?a=[[r,null]]:"password"!==n.type&&"file"!==n.type&&"submit"!==n.type&&"reset"!==n.type&&"button"!==n.type&&n.list&&(s=String(n.list).toUpperCase(),Ya.call(e.nodeById,s)&&Uu(e.nodeById[s])&&(a=Bu(e,e.nodeById[s],n))),0!==a.length){if("password"===n.type&&(a[0]=["•".repeat(a[0][0].length),null]),"url"===n.type||"email"===n.type){for(;++u<a.length;)r=iu(e,a[u][0]),i.push(e(t,"link",{title:null,url:Qa(e,"email"===n.type?"mailto:"+r:r)},[{type:"text",value:Qa(e,a[u][1]||r)}])),u!==a.length-1&&i.push({type:"text",value:", "});return i}for(;++u<a.length;)o.push(a[u][1]?a[u][1]+" ("+a[u][0]+")":a[u][0]);return e(t,"text",Qa(e,o.join(", ")))}}},kbd:Ru,li:Ku,listing:ku,mark:Iu,ol:ju,p:Wu,plaintext:ku,pre:ku,q:function(e,t){const n=e.quotes[e.qNesting%e.quotes.length];e.qNesting++;const r=Va(e,t);return e.qNesting--,r.unshift({type:"text",value:n.charAt(0)}),r.push({type:"text",value:n.length>1?n.charAt(1):n}),r},s:Nu,samp:Ru,select:function(e,t){const n=Bu(e,t);let r=-1;const i=[];let o;for(;++r<n.length;)o=n[r],i.push(o[1]?o[1]+" ("+o[0]+")":o[0]);if(i.length>0)return e(t,"text",Qa(e,i.join(", ")))},strike:Nu,strong:Xu,summary:Wu,table:function(e,t){if(e.inTable)return e(t,"text",Qa(e,du(t)));e.inTable=!0;const{headless:n,align:r}=function(e){let t=!0,n=0,r=0;const i=[null];return Ft(e,"element",(o=>{if("table"===o.tagName&&e!==o)return St;ec(o)&&o.properties?(i[r]||(i[r]=String(o.properties.align||"")||null),t&&n<2&&"th"===o.tagName&&(t=!1),r++):Zu(o)?t=!1:Ju(o)&&(n++,r=0)})),{align:i,headless:t}}(t),i=function(e,t){let n=-1;const r=[];let i;for(t&&r.push({type:"tableRow",children:[]});++n<e.length;){const t=e[n];"tableRow"===t.type?(i&&(t.children.unshift(...i),i=void 0),r.push(t)):(i||(i=[]),i.push(t))}for(i&&r[r.length-1].children.push(...i),n=-1;++n<r.length;)r[n].children=tc(r[n].children);return r}(Va(e,t),n);let o=1,s=-1;for(;++s<i.length;){const e=i[s].children;let t=-1;for(;++t<e.length;){const n=e[t];if(n.data){const e=Number.parseInt(String(n.data.colSpan),10)||1,r=Number.parseInt(String(n.data.rowSpan),10)||1;if(e>1||r>1){let n=s-1;for(;++n<s+r;){let r=t-1;for(;++r<t+e&&i[n];){const e=[];n===s&&r===t||e.push({type:"tableCell",children:[]}),i[n].children.splice(r,0,...e)}}}"colSpan"in n.data&&delete n.data.colSpan,"rowSpan"in n.data&&delete n.data.rowSpan,0===Object.keys(n.data).length&&delete n.data}}e.length>o&&(o=e.length)}for(s=-1;++s<i.length;){const e=i[s].children;let t=e.length-1;for(;++t<o;)e.push({type:"tableCell",children:[]})}let a=r.length-1;for(;++a<o;)r.push(null);return e.inTable=!1,e(t,"table",{align:r},i)},td:$u,textarea:function(e,t){return e(t,"text",Qa(e,du(t)))},th:$u,tr:function(e,t){return e(t,"tableRow",Va(e,t))},tt:Ru,u:Iu,ul:ju,var:Ru,video:Qu,wbr:function(e,t){return e(t,"text","​")},xmp:ku};function rc(){}const ic=Nt(["heading","paragraph","root"]),oc=n(514),sc={unified:k,rehypeSanitize:function(e=Jt){return t=>function(e,t){var n,r={type:"root",children:[]};return e&&"object"==typeof e&&e.type&&(n=rn(Object.assign({},Jt,t||{}),e,[]))&&(Array.isArray(n)?1===n.length?r=n[0]:r.children=n:r=n),r}(t,e)},rehypeParse:function(e){const t=this.data("settings"),n=Object.assign({},t,e);Object.assign(this,{Parser:function(e,t){const r=n.fragment?"parseFragment":"parse",i=n.emitParseErrors?function(r){const i=r.code,o=function(e){return e.replace(/-[a-z]/g,(e=>e.charAt(1).toUpperCase()))}(i),s=n[o],a=null==s||s,u="number"==typeof a?a:a?1:0,c={line:r.startLine,column:r.startCol,offset:r.startOffset},l={line:r.endLine,column:r.endCol,offset:r.endOffset};if(u){const e=Ps[o]||{reason:"",description:"",url:""},n=t.message(p(e.reason),{start:c,end:l});n.source="parse-error",n.ruleId=i,n.fatal=ws[u],n.note=p(e.description),n.url="url"in e&&!1===e.url?null:"https://html.spec.whatwg.org/multipage/parsing.html#parse-error-"+i}function p(t){return t.replace(/%c(?:-(\d+))?/g,((t,n)=>{const i=n?-Number.parseInt(n,10):0,o=e.charAt(r.startOffset+i);return"`"===o?"` ` `":o})).replace(/%x/g,(()=>"0x"+e.charCodeAt(r.startOffset).toString(16).toUpperCase()))}}:null;return Fs(new Lo({sourceCodeLocationInfo:!0,onParseError:i,scriptingEnabled:!1})[r](e),{space:n.space,file:t,verbose:n.verbose})}})},rehypeStringify:function(e){const t=this.data("settings"),n=Object.assign({},t,e);Object.assign(this,{Compiler:function(e){return function(e,t={}){const n=t.quote||'"',r='"'===n?"'":'"';if('"'!==n&&"'"!==n)throw new Error("Invalid quote `"+n+"`, expected `'` or `\"`");return ua({valid:t.allowParseErrors?0:1,safe:t.allowDangerousCharacters?0:1,schema:"svg"===t.space?as:ss,omit:t.omitOptionalTags?ra:void 0,quote:n,alternative:r,smart:t.quoteSmart,unquoted:t.preferUnquoted,tight:t.tightAttributes,upperDoctype:t.upperDoctype,tightDoctype:t.tightDoctype,bogusComments:t.bogusComments,tightLists:t.tightCommaSeparatedLists,tightClose:t.tightSelfClosing,collapseEmpty:t.collapseEmptyAttributes,dangerous:t.allowDangerousHtml,voids:t.voids||Bs.concat(),entities:t.entities||{},close:t.closeSelfClosing,closeEmpty:t.closeEmptyElements},Array.isArray(e)?{type:"root",children:e}:e,null,null)}(e,n)}})},rehypeRaw:function(e={}){return(t,n)=>Sa(t,n,e)},remarkParse:function(e){Object.assign(this,{Parser:t=>{const n=this.data("settings");return At(t,Object.assign({},n,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})},remarkRehype:function(e,t){return e&&"run"in e?function(e,t){return(n,r,i)=>{e.run(Zt(n,t),r,(e=>{i(e)}))}}(e,t):function(e){return t=>Zt(t,e)}(e||t)},remarkStringify:function(e){Object.assign(this,{Compiler:t=>{const n=this.data("settings");return Xn(t,Object.assign({},n,e,{extensions:this.data("toMarkdownExtensions")||[]}))}})},remarkDirective:function(){const e=this.data();function t(t,n){(e[t]?e[t]:e[t]=[]).push(n)}t("micromarkExtensions",Xi()),t("fromMarkdownExtensions",To),t("toMarkdownExtensions",Ao)},remarkFrontmatter:function(e="yaml"){const t=this.data();function n(e,n){(t[e]?t[e]:t[e]=[]).push(n)}n("micromarkExtensions",ar(e)),n("fromMarkdownExtensions",pr(e)),n("toMarkdownExtensions",mr(e))},remarkSqueezeParagraphs:function(){return vo},remarkToc:function(e={}){return t=>{const n=function(e,t){const n=t||{},r=n.heading?Cr(n.heading):null,i=Dr(e,r,n);return{index:r?i.index:null,endIndex:r?i.endIndex:null,map:i.map.length>0?kr(i.map,n):null}}(t,Object.assign({},e,{heading:e.heading||"toc|table[ -]of[ -]contents?"}));null!==n.endIndex&&null!==n.index&&-1!==n.index&&n.map&&(t.children=[...t.children.slice(0,n.index),n.map,...t.children.slice(n.endIndex)])}},remarkGFM:function(e={}){const t=this.data();function n(e,n){(t[e]?t[e]:t[e]=[]).push(n)}n("micromarkExtensions",ii(e)),n("fromMarkdownExtensions",Mi()),n("toMarkdownExtensions",Pi(e))},toMdast:function(e,t={}){const n={};let r;const i=Object.assign(((e,t,n,r)=>{let i;"string"==typeof n||Array.isArray(n)?(r=n,i={}):i=n;const o={type:t,...i};return"string"==typeof r?o.value=r:r&&(o.children=r),e.position&&(o.position=e.position),o}),{nodeById:n,baseFound:!1,inTable:!1,wrapText:!0,frozenBaseUrl:null,qNesting:0,handlers:t.handlers?{...nc,...t.handlers}:nc,document:t.document,checked:t.checked||"[x]",unchecked:t.unchecked||"[ ]",quotes:t.quotes||['"']});Ft(e,"element",(e=>{const t=e.properties&&"id"in e.properties&&String(e.properties.id).toUpperCase();t&&!Ya.call(n,t)&&(n[t]=e)})),Pa({newlines:!0===t.newlines})(e);const o=Wa(i,e,void 0);return r=o?Array.isArray(o)?{type:"root",children:o}:o:{type:"root",children:[]},Ft(r,"text",(function(e,t,n){if(null===t||!n)return;const r=n.children[t-1];return r&&r.type===e.type?(r.value+=e.value,n.children.splice(t,1),r.position&&e.position&&(r.position.end=e.position.end),t-1):(e.value=e.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/,"$1"),n&&ic(n)&&(t||(e.value=e.value.replace(/^[\t ]+/,"")),t===n.children.length-1&&(e.value=e.value.replace(/[\t ]+$/,""))),e.value?void 0:(n.children.splice(t,1),t))})),r},visit:Ft,toMarkdown:Xn,fromMarkdown:At,toPlainText:v,unistFlatMap:oc,gfm:ii,gfmFromMarkdown:Mi,gfmToMarkdown:Pi,frontmatter:ar,frontmatterToMarkdown:mr,frontmatterFromMarkdown:pr,directive:Xi,directiveFromMarkdown:To,directiveToMarkdown:Ao}})();var i=exports;for(var o in r)i[o]=r[o];r.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,